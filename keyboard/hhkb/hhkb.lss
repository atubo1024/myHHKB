
hhkb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00004aa6  00004b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800138  00800138  00004b72  2**0
                  ALLOC
  3 .noinit       00000004  0080020a  0080020a  00004b72  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00004b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  0000542c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000054cc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a90  00000000  00000000  000054e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000efee  00000000  00000000  00005f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003be1  00000000  00000000  00014f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000056b2  00000000  00000000  00018b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001a0c  00000000  00000000  0001e1f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004435  00000000  00000000  0001fc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000082d9  00000000  00000000  00024035  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b68  00000000  00000000  0002c30e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__ctors_end>
       4:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
       8:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
       c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      10:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      14:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      18:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      1c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      20:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      24:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      28:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_10>
      2c:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_11>
      30:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__vector_12>
      34:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      3c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      40:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      44:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      4c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      50:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__vector_21>
      58:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      5c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      60:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      68:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      70:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      74:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      78:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      7c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      84:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      88:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      94:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      a0:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      a4:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__bad_interrupt>
      ac:	ab 0d       	add	r26, r11
      ae:	cd 0d       	add	r28, r13
      b0:	b8 0e       	add	r11, r24
      b2:	cd 0d       	add	r28, r13
      b4:	b8 0e       	add	r11, r24
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	0f 0e       	add	r0, r31
      b8:	32 0e       	add	r3, r18
      ba:	b8 0e       	add	r11, r24
      bc:	87 0e       	add	r8, r23
      be:	9a 0e       	add	r9, r26
      c0:	f1 11       	cpse	r31, r1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	f1 11       	cpse	r31, r1
      c4:	1f 12       	cpse	r1, r31
      c6:	1f 12       	cpse	r1, r31
      c8:	7b 12       	cpse	r7, r27
      ca:	b7 12       	cpse	r11, r23
      cc:	a8 14       	cp	r10, r8
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	a8 14       	cp	r10, r8
      d0:	cf 12       	cpse	r12, r31
      d2:	a8 14       	cp	r10, r8
      d4:	c6 13       	cpse	r28, r22
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	c6 13       	cpse	r28, r22
      d8:	82 14       	cp	r8, r2
      da:	a8 14       	cp	r10, r8
      dc:	a8 14       	cp	r10, r8
      de:	96 14       	cp	r9, r6

000000e0 <__trampolines_end>:
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21

000000e2 <keymaps>:
      e2:	1f 14 1a 16 04 1d 1b 06 20 21 15 08 07 09 19 05     ........ !......
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f2:	22 23 1c 17 0a 0b 11 00 1e 29 2b e0 e1 e2 e3 2c     "#.......)+....,
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	24 25 18 0c 0e 0d 10 00 31 35 2a 28 c0 e5 e6 e7     $%......15*(....
     112:	26 27 12 13 33 0f 36 00 2d 2e 30 2f 34 38 37 00     &'..3.6.-.0/487.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     122:	3b 01 01 a9 aa 01 01 01 3c 3d 01 01 a8 01 01 01     ;.......<=......
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     132:	3e 3f 01 01 01 55 57 00 3a a5 39 01 01 01 01 01     >?...UW.:.9.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     142:	40 41 01 46 4a 54 56 00 49 4c 2a 58 01 01 01 01     @A.FJTV.IL*X....
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     152:	42 43 47 48 50 4b 4d 00 44 45 01 52 4f 51 4e 00     BCGHPKM.DE.ROQN.

00000162 <__c.4790>:
				ReportSize     -= 2;
				ReportData     += 2;
     162:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     172:	00                                                  .

00000173 <__c.4788>:
     173:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     183:	00                                                  .

00000184 <__c.4783>:
     184:	0d 0a 69 6e 69 74 0a 00                             ..init..

0000018c <__c.4677>:
     18c:	5b 44 5d 00                                         [D].

00000190 <__c.4672>:
     190:	5b 43 5d 00                                         [C].

00000194 <ProductString>:
     194:	12 03 48 00 48 00 4b 00 42 00 20 00 6d 00 6f 00     ..H.H.K.B. .m.o.

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a4:	64 00 00 00                                         d...

000001a8 <ManufacturerString>:
     1a8:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

000001b8 <LanguageString>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b8:	04 03 09 04                                         ....

000001bc <ConfigurationDescriptor>:
     1bc:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     1cc:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1dc:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1ec:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fc:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     20c:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     21c:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     22c:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     23c:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

00000249 <DeviceDescriptor>:
     249:	12 01 10 01 00 00 00 08 ed fe fe ca 04 01 01 02     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     259:	00 01                                               ..

0000025b <NKROReport>:
     25b:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     26b:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     27b:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     28b:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000294 <ConsoleReport>:
     294:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
     2a4:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
     2b4:	02 c0                                               ..

000002b6 <ExtrakeyReport>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b6:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c6:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d6:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e6:	10 95 01 81 00 c0                                   ......

000002ec <MouseReport>:
     2ec:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2fc:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     30c:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31c:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     32c:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000339 <KeyboardReport>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     339:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     349:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     359:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     369:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000379 <__c.4409>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     379:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000389 <__c.4404>:
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     389:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000397 <__c.4396>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     397:	0a 00                                               ..

00000399 <__c.4391>:
     399:	25 30 32 58 20 00                                   %02X .

0000039f <__c.4388>:
     39f:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

000003aa <__c.4736>:
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3aa:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000003b5 <__c.1714>:
     3b5:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

000003c3 <__c.1711>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c3:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

000003d1 <__c.4539>:
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3d1:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3e1:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003ef <__c.4534>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ef:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3ff:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000040d <__c.4447>:
				}

				CurrCollectionPath->Type       = ReportItemData;
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40d:	4f 6e 65 73 68 6f 74 3a 20 74 69 6d 65 6f 75 74     Oneshot: timeout

				if (UsageListSize)
     41d:	0a 00                                               ..

0000041f <__c.4468>:
     41f:	29 0a 00                                            )..

00000422 <__c.4466>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     422:	25 75 00                                            %u.

00000425 <__c.4464>:
     425:	2f 00                                               /.

00000427 <__c.4462>:
     427:	25 75 00                                            %u.

0000042a <__c.4460>:
     42a:	5d 28 00                                            ](.

0000042d <__c.4458>:
     42d:	25 64 00                                            %d.

00000430 <__c.4456>:
     430:	20 00                                                .

00000432 <__c.4454>:
     432:	25 64 00                                            %d.

00000435 <__c.4452>:
     435:	20 00                                                .

00000437 <__c.4450>:
     437:	25 64 00                                            %d.

0000043a <__c.4448>:

					for (uint8_t i = 1; i < UsageListSize; i++)
     43a:	20 00                                                .

0000043c <__c.4446>:
     43c:	25 64 00                                            %d.

0000043f <__c.4444>:
     43f:	7c 00                                               |.

00000441 <__c.4442>:
     441:	25 30 32 58 00                                      %02X.

00000446 <__c.4440>:
					  UsageList[i - 1] = UsageList[i];
     446:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 

					UsageListSize--;
     456:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     466:	20 5b 00                                             [.

00000469 <__c.4963>:
     469:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     479:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000484 <__c.4960>:
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     484:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     494:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000049d <__c.4957>:
     49d:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4ad:	20 25 64 0a 00                                       %d..

000004b2 <__c.4954>:
     4b2:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c2:	64 0a 00                                            d..

000004c5 <__c.4951>:
     4c5:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4d5:	0a 00                                               ..

000004d7 <__c.4947>:
     4d7:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004e6 <__c.4940>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4e6:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4f6:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000501 <__c.4937>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     501:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     511:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000051a <__c.4934>:

					if (UsageListSize)
     51a:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     52a:	20 25 64 0a 00                                       %d..

0000052f <__c.4931>:
     52f:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %

						for (uint8_t i = 1; i < UsageListSize; i++)
     53f:	64 0a 00                                            d..

00000542 <__c.4928>:
						  UsageList[i - 1] = UsageList[i];
     542:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d

						UsageListSize--;
     552:	0a 00                                               ..

00000554 <__c.4924>:
     554:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000563 <__c.4917>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     563:	0a 00                                               ..

00000565 <__c.4915>:
     565:	25 75 00                                            %u.

00000568 <__c.4913>:
     568:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     578:	5f 6d 61 78 3a 20 00                                _max: .

0000057f <__c.4911>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57f:	0a 00                                               ..

00000581 <__c.4909>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     581:	25 75 00                                            %u.

00000584 <__c.4907>:
     584:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     594:	65 64 3a 20 00                                      ed: .

00000599 <__c.4905>:
     599:	0a 00                                               ..

0000059b <__c.4903>:
     59b:	25 75 00                                            %u.

0000059e <__c.4901>:
     59e:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5ae:	00                                                  .

000005af <__c.4899>:
     5af:	0a 00                                               ..

000005b1 <__c.4897>:
     5b1:	25 75 00                                            %u.

000005b4 <__c.4895>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b4:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000005c3 <__c.4893>:
     5c3:	0a 00                                               ..

000005c5 <__c.4891>:
     5c5:	25 75 00                                            %u.

000005c8 <__c.4889>:
     5c8:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     5d8:	20 00                                                .

000005da <__c.4887>:
     5da:	0a 00                                               ..

000005dc <__c.4885>:
     5dc:	25 75 00                                            %u.

000005df <__c.4883>:
     5df:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ef:	20 00                                                .

000005f1 <__c.4881>:
     5f1:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005ff <__c.5001>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5ff:	4d 3e 00                                            M>.

00000602 <__c.4999>:
     602:	4d 25 64 3e 20 00                                   M%d> .

00000608 <__c.4997>:
     608:	3f 00                                               ?.

0000060a <__c.4994>:
     60a:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000617 <__c.4980>:
     617:	43 3e 20 00                                         C> .

0000061b <__c.4970>:
     61b:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     62b:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     63b:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     64b:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     65b:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000669 <__c.4968>:
     669:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     679:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
					  ParserData->TotalReportItems++;
     689:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     699:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
			UsageListSize       = 0;
     6a9:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b9:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c9:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d9:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     6e9:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6f9:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     709:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     719:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     729:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     739:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     749:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     759:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000764 <__c.4873>:
     764:	3f 00                                               ?.

00000766 <__c.4870>:
     766:	4d 3e 20 00                                         M> .

0000076a <__c.4875>:
     76a:	43 3e 20 00                                         C> .

0000076e <__c.5019>:
     76e:	4c 25 64 0a 00                                      L%d..

00000773 <__c.4859>:
     773:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     783:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     793:	73 65 6b 65 79 0a 00                                sekey..

0000079a <__c.4782>:
     79a:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     7aa:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     7ba:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7ca:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     7da:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     7ea:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7fa:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     80a:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     81a:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     82a:	72 0a 6e 3a 09 4e 4b 52 4f 0a 00                    r.n:.NKRO..

00000835 <__c.4854>:
     835:	3f 00                                               ?.

00000837 <__c.4845>:
     837:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000842 <__c.4843>:
     842:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

0000084c <__c.4840>:
     84c:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     85c:	25 30 34 6c 58 0a 00                                %04lX..

00000863 <__c.4838>:
     863:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     873:	58 0a 00                                            X..

00000876 <__c.4836>:
     876:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     886:	58 0a 00                                            X..

00000889 <__c.4834>:
     889:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     899:	6c 3a 20 25 58 0a 00                                l: %X..

000008a0 <__c.4832>:
     8a0:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     8b0:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000008ba <__c.4830>:
     8ba:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000008c8 <__c.4827>:
     8c8:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     8d8:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     8e8:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

000008f6 <__c.4825>:
     8f6:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     906:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     916:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     926:	4e 4b 52 4f 20 34 30 39 36 0a 00                    NKRO 4096..

00000931 <__c.4823>:
     931:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     941:	31 31 3a 35 38 3a 34 34 20 4a 75 6c 20 31 34 20     11:58:44 Jul 14 
     951:	32 30 31 37 29 0a 00                                2017)..

00000958 <__c.4821>:
     958:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     968:	6b 2e 29 20 50 49 44 3a 20 30 78 43 41 46 45 28     k.) PID: 0xCAFE(
     978:	48 48 4b 42 20 6d 6f 64 29 20 56 45 52 3a 20 30     HHKB mod) VER: 0
     988:	78 30 31 30 34 0a 00                                x0104..

0000098f <__c.4819>:
     98f:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     99f:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     9af:	6f 72 20 48 48 4b 42 20 6d 6f 64 0a 00              or HHKB mod..

000009bc <__c.4817>:
     9bc:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000009cb <__c.4814>:
     9cb:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000009d8 <__c.4812>:
     9d8:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000009e4 <__c.4809>:
     9e4:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000009f4 <__c.4807>:
     9f4:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000a03 <__c.4804>:
     a03:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000a11 <__c.4802>:
     a11:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000a1e <__c.4799>:
     a1e:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000a2a <__c.4797>:
     a2a:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000a37 <__c.4794>:
     a37:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     a47:	00                                                  .

00000a48 <__c.4791>:
     a48:	43 3e 20 00                                         C> .

00000a4c <__ctors_end>:
     a4c:	11 24       	eor	r1, r1
     a4e:	1f be       	out	0x3f, r1	; 63
     a50:	cf ef       	ldi	r28, 0xFF	; 255
     a52:	da e0       	ldi	r29, 0x0A	; 10
     a54:	de bf       	out	0x3e, r29	; 62
     a56:	cd bf       	out	0x3d, r28	; 61

00000a58 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     a58:	04 b6       	in	r0, 0x34	; 52
     a5a:	03 fe       	sbrs	r0, 3
     a5c:	24 c0       	rjmp	.+72     	; 0xaa6 <__do_copy_data>
     a5e:	80 91 0a 02 	lds	r24, 0x020A
     a62:	90 91 0b 02 	lds	r25, 0x020B
     a66:	a0 91 0c 02 	lds	r26, 0x020C
     a6a:	b0 91 0d 02 	lds	r27, 0x020D
     a6e:	87 30       	cpi	r24, 0x07	; 7
     a70:	90 4b       	sbci	r25, 0xB0	; 176
     a72:	a7 40       	sbci	r26, 0x07	; 7
     a74:	b0 4b       	sbci	r27, 0xB0	; 176
     a76:	b9 f4       	brne	.+46     	; 0xaa6 <__do_copy_data>
        reset_key = 0;
     a78:	10 92 0a 02 	sts	0x020A, r1
     a7c:	10 92 0b 02 	sts	0x020B, r1
     a80:	10 92 0c 02 	sts	0x020C, r1
     a84:	10 92 0d 02 	sts	0x020D, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     a88:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     a8a:	84 b7       	in	r24, 0x34	; 52
     a8c:	87 7f       	andi	r24, 0xF7	; 247
     a8e:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     a90:	88 e1       	ldi	r24, 0x18	; 24
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	80 93 60 00 	sts	0x0060, r24
     a9a:	10 92 60 00 	sts	0x0060, r1
     a9e:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     aa0:	e0 e0       	ldi	r30, 0x00	; 0
     aa2:	f8 e3       	ldi	r31, 0x38	; 56
     aa4:	09 95       	icall

00000aa6 <__do_copy_data>:
     aa6:	11 e0       	ldi	r17, 0x01	; 1
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b1 e0       	ldi	r27, 0x01	; 1
     aac:	e6 ea       	ldi	r30, 0xA6	; 166
     aae:	fa e4       	ldi	r31, 0x4A	; 74
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__do_copy_data+0x10>
     ab2:	05 90       	lpm	r0, Z+
     ab4:	0d 92       	st	X+, r0
     ab6:	a8 33       	cpi	r26, 0x38	; 56
     ab8:	b1 07       	cpc	r27, r17
     aba:	d9 f7       	brne	.-10     	; 0xab2 <__do_copy_data+0xc>

00000abc <__do_clear_bss>:
     abc:	22 e0       	ldi	r18, 0x02	; 2
     abe:	a8 e3       	ldi	r26, 0x38	; 56
     ac0:	b1 e0       	ldi	r27, 0x01	; 1
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <.do_clear_bss_start>

00000ac4 <.do_clear_bss_loop>:
     ac4:	1d 92       	st	X+, r1

00000ac6 <.do_clear_bss_start>:
     ac6:	aa 30       	cpi	r26, 0x0A	; 10
     ac8:	b2 07       	cpc	r27, r18
     aca:	e1 f7       	brne	.-8      	; 0xac4 <.do_clear_bss_loop>
     acc:	0e 94 a7 09 	call	0x134e	; 0x134e <main>
     ad0:	0c 94 51 25 	jmp	0x4aa2	; 0x4aa2 <_exit>

00000ad4 <__bad_interrupt>:
     ad4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000ad8 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     ad8:	ff 93       	push	r31
	push	ZL
     ada:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     adc:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     ae0:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     ae4:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     ae6:	09 f0       	breq	.+2      	; 0xaea <xputc+0x12>
	icall
     ae8:	09 95       	icall
2:	pop	ZL
     aea:	ef 91       	pop	r30
	pop	ZH
     aec:	ff 91       	pop	r31
	ret
     aee:	08 95       	ret

00000af0 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     af0:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     af2:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     af4:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     af6:	11 f0       	breq	.+4      	; 0xafc <xputs+0xc>
	rcall	xputc
     af8:	ef df       	rcall	.-34     	; 0xad8 <xputc>
	rjmp	1b
     afa:	fb cf       	rjmp	.-10     	; 0xaf2 <xputs+0x2>
2:	ret
     afc:	08 95       	ret

00000afe <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     afe:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     b00:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     b02:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     b04:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     b06:	0c c0       	rjmp	.+24     	; 0xb20 <__stack+0x21>
	neg	r20		;
     b08:	41 95       	neg	r20
	sbrs	r25, 7		;
     b0a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     b0c:	09 c0       	rjmp	.+18     	; 0xb20 <__stack+0x21>
	ldi	r30, '-'	;
     b0e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     b10:	60 95       	com	r22
	com	r23		;
     b12:	70 95       	com	r23
	com	r24		;
     b14:	80 95       	com	r24
	com	r25		;
     b16:	90 95       	com	r25
	adc	r22, r1		;
     b18:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     b1a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     b1c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     b1e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     b20:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <__stack+0x29>
	neg	r18		;
     b24:	21 95       	neg	r18
	ldi	r19, '0'	;/
     b26:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     b28:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     b2a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     b2c:	66 0f       	add	r22, r22
	rol	r23		;
     b2e:	77 1f       	adc	r23, r23
	rol	r24		;
     b30:	88 1f       	adc	r24, r24
	rol	r25		;
     b32:	99 1f       	adc	r25, r25
	rol	r26		;
     b34:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     b36:	a4 17       	cp	r26, r20
	brcs	3f		;
     b38:	10 f0       	brcs	.+4      	; 0xb3e <__stack+0x3f>
	sub	r26, r20	;
     b3a:	a4 1b       	sub	r26, r20
	inc	r22		;
     b3c:	63 95       	inc	r22
3:	dec	r21		;
     b3e:	5a 95       	dec	r21
	brne	2b		;/
     b40:	a9 f7       	brne	.-22     	; 0xb2c <__stack+0x2d>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     b42:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     b44:	08 f0       	brcs	.+2      	; 0xb48 <__stack+0x49>
	subi	r26, -7		;
     b46:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     b48:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     b4a:	af 93       	push	r26
	inc	r31		;/
     b4c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     b4e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     b50:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     b52:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     b54:	91 05       	cpc	r25, r1
	brne	1b		;/
     b56:	41 f7       	brne	.-48     	; 0xb28 <__stack+0x29>

	cpi	r30, '-'	;Minus sign if needed
     b58:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     b5a:	11 f4       	brne	.+4      	; 0xb60 <__stack+0x61>
	push	r30		;
     b5c:	ef 93       	push	r30
	inc	r31		;/
     b5e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     b60:	f2 17       	cp	r31, r18
	brcc	6f		;
     b62:	18 f4       	brcc	.+6      	; 0xb6a <__stack+0x6b>
	push	r19		;
     b64:	3f 93       	push	r19
	inc	r31		;
     b66:	f3 95       	inc	r31
	rjmp	5b		;/
     b68:	fb cf       	rjmp	.-10     	; 0xb60 <__stack+0x61>

6:	pop	r24		;Flush stacked digits and exit
     b6a:	8f 91       	pop	r24
	rcall	xputc		;
     b6c:	b5 df       	rcall	.-150    	; 0xad8 <xputc>
	dec	r31		;
     b6e:	fa 95       	dec	r31
	brne	6b		;/
     b70:	e1 f7       	brne	.-8      	; 0xb6a <__stack+0x6b>

	ret
     b72:	08 95       	ret

00000b74 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     b74:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     b76:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     b78:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     b7a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     b7c:	21 f0       	breq	.+8      	; 0xb86 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     b7e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     b80:	19 f0       	breq	.+6      	; 0xb88 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     b82:	aa df       	rcall	.-172    	; 0xad8 <xputc>
	rjmp	0b		;/
     b84:	f9 cf       	rjmp	.-14     	; 0xb78 <xvprintf+0x4>
90:	ret
     b86:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     b88:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     b8a:	e8 94       	clt
	_LPMI	r21		;Get flags
     b8c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     b8e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     b90:	c1 f3       	breq	.-16     	; 0xb82 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     b92:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     b94:	11 f4       	brne	.+4      	; 0xb9a <xvprintf+0x26>
	set			;/
     b96:	68 94       	set
22:	_LPMI	r21		;Get width
     b98:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     b9a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     b9c:	48 f4       	brcc	.+18     	; 0xbb0 <xvprintf+0x3c>
	subi	r21, '0'	;
     b9e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     ba0:	90 f3       	brcs	.-28     	; 0xb86 <xvprintf+0x12>
	lsl	r18		;
     ba2:	22 0f       	add	r18, r18
	mov	r0, r18		;
     ba4:	02 2e       	mov	r0, r18
	lsl	r18		;
     ba6:	22 0f       	add	r18, r18
	lsl	r18		;
     ba8:	22 0f       	add	r18, r18
	add	r18, r0		;
     baa:	20 0d       	add	r18, r0
	add	r18, r21	;
     bac:	25 0f       	add	r18, r21
	rjmp	22b		;/
     bae:	f4 cf       	rjmp	.-24     	; 0xb98 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     bb0:	0e f4       	brtc	.+2      	; 0xbb4 <xvprintf+0x40>
	neg	r18		;
     bb2:	21 95       	neg	r18
25:	ld	r24, Y+		;
     bb4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     bb6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     bb8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     bba:	19 f3       	breq	.-58     	; 0xb82 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     bbc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     bbe:	29 f1       	breq	.+74     	; 0xc0a <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     bc0:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     bc2:	59 f1       	breq	.+86     	; 0xc1a <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     bc4:	bc 01       	movw	r22, r24
	clr	r24		;
     bc6:	88 27       	eor	r24, r24
	clr	r25		;
     bc8:	99 27       	eor	r25, r25
	clt			;/
     bca:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     bcc:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     bce:	21 f4       	brne	.+8      	; 0xbd8 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     bd0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     bd2:	99 91       	ld	r25, Y+
	set			;
     bd4:	68 94       	set
	_LPMI	r21		;/
     bd6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     bd8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     bda:	39 f4       	brne	.+14     	; 0xbea <xvprintf+0x76>
	ldi	r20, -10	;
     bdc:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     bde:	7e f0       	brts	.+30     	; 0xbfe <xvprintf+0x8a>
	sbrs	r23, 7		;
     be0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     be2:	0d c0       	rjmp	.+26     	; 0xbfe <xvprintf+0x8a>
	ldi	r24, -1		;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     be6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     be8:	0a c0       	rjmp	.+20     	; 0xbfe <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     bea:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     bec:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     bee:	39 f0       	breq	.+14     	; 0xbfe <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     bf0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     bf2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     bf4:	21 f0       	breq	.+8      	; 0xbfe <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     bf6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     bf8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     bfa:	09 f0       	breq	.+2      	; 0xbfe <xvprintf+0x8a>
	ret			;abort
     bfc:	08 95       	ret
40:	push	ZH		;Output the value
     bfe:	ff 93       	push	r31
	push	ZL		;
     c00:	ef 93       	push	r30
	rcall	xitoa		;
     c02:	7d df       	rcall	.-262    	; 0xafe <xitoa>
42:	pop	ZL		;
     c04:	ef 91       	pop	r30
	pop	ZH		;
     c06:	ff 91       	pop	r31
	rjmp	0b		;/
     c08:	b7 cf       	rjmp	.-146    	; 0xb78 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     c0a:	ff 93       	push	r31
	push	ZL
     c0c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     c0e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     c10:	81 91       	ld	r24, Z+
	cpi	r24, 0
     c12:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     c14:	b9 f3       	breq	.-18     	; 0xc04 <xvprintf+0x90>
	rcall	xputc
     c16:	60 df       	rcall	.-320    	; 0xad8 <xputc>
	rjmp	51b
     c18:	fb cf       	rjmp	.-10     	; 0xc10 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     c1a:	ff 93       	push	r31
	push	ZL
     c1c:	ef 93       	push	r30
	rcall	xputs
     c1e:	68 df       	rcall	.-304    	; 0xaf0 <xputs>
	rjmp	42b
     c20:	f1 cf       	rjmp	.-30     	; 0xc04 <xvprintf+0x90>

00000c22 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     c22:	df 93       	push	r29
	push	YL
     c24:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     c26:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     c28:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     c2a:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     c2c:	a3 df       	rcall	.-186    	; 0xb74 <xvprintf>
	pop	YL
     c2e:	cf 91       	pop	r28
	pop	YH
     c30:	df 91       	pop	r29
	ret
     c32:	08 95       	ret

00000c34 <matrix_init>:
static inline bool KEY_POWER_STATE(void) { return true; }
#endif
static inline void KEY_INIT(void)
{
    /* row,col,prev: output */
    DDRB  = 0xFF;
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x40;   // unable
     c38:	80 e4       	ldi	r24, 0x40	; 64
     c3a:	85 b9       	out	0x05, r24	; 5
    /* key: input with pull-up */
    DDRD  &= ~0x80;
     c3c:	57 98       	cbi	0x0a, 7	; 10
    PORTD |=  0x80;
     c3e:	5f 9a       	sbi	0x0b, 7	; 11
    /* row extention for HHKB JP */
    DDRC  |= (1<<6|1<<7);
    PORTC |= (1<<6|1<<7);
#else
    /* input with pull up to save power */
    DDRC  &= ~(1<<6|1<<7);
     c40:	87 b1       	in	r24, 0x07	; 7
     c42:	8f 73       	andi	r24, 0x3F	; 63
     c44:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<6|1<<7);
     c46:	88 b1       	in	r24, 0x08	; 8
     c48:	80 6c       	ori	r24, 0xC0	; 192
     c4a:	88 b9       	out	0x08, r24	; 8
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     c4c:	2e 9a       	sbi	0x05, 6	; 5
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
     c4e:	2f 98       	cbi	0x05, 7	; 5
     c50:	e2 e4       	ldi	r30, 0x42	; 66
     c52:	f1 e0       	ldi	r31, 0x01	; 1
#endif

    KEY_INIT();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix0[i] = 0x00;
     c54:	11 92       	st	Z+, r1
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	ea 34       	cpi	r30, 0x4A	; 74
     c5a:	f8 07       	cpc	r31, r24
     c5c:	d9 f7       	brne	.-10     	; 0xc54 <matrix_init+0x20>
     c5e:	ea e3       	ldi	r30, 0x3A	; 58
     c60:	f1 e0       	ldi	r31, 0x01	; 1
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix1[i] = 0x00;
     c62:	11 92       	st	Z+, r1
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	e2 34       	cpi	r30, 0x42	; 66
     c68:	f8 07       	cpc	r31, r24
     c6a:	d9 f7       	brne	.-10     	; 0xc62 <matrix_init+0x2e>
    matrix = _matrix0;
     c6c:	82 e4       	ldi	r24, 0x42	; 66
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	90 93 4d 01 	sts	0x014D, r25
     c74:	80 93 4c 01 	sts	0x014C, r24
    matrix_prev = _matrix1;
     c78:	8a e3       	ldi	r24, 0x3A	; 58
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	90 93 4b 01 	sts	0x014B, r25
     c80:	80 93 4a 01 	sts	0x014A, r24
     c84:	08 95       	ret

00000c86 <matrix_scan>:
}

uint8_t matrix_scan(void)
{
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
    uint8_t *tmp;

    tmp = matrix_prev;
     c8e:	80 91 4a 01 	lds	r24, 0x014A
     c92:	90 91 4b 01 	lds	r25, 0x014B
    matrix_prev = matrix;
     c96:	20 91 4c 01 	lds	r18, 0x014C
     c9a:	30 91 4d 01 	lds	r19, 0x014D
     c9e:	30 93 4b 01 	sts	0x014B, r19
     ca2:	20 93 4a 01 	sts	0x014A, r18
    matrix = tmp;
     ca6:	90 93 4d 01 	sts	0x014D, r25
     caa:	80 93 4c 01 	sts	0x014C, r24
     cae:	c0 e0       	ldi	r28, 0x00	; 0
     cb0:	d0 e0       	ldi	r29, 0x00	; 0
            _delay_us(5);

            if (KEY_STATE()) {
                matrix[row] &= ~(1<<col);
            } else {
                matrix[row] |= (1<<col);
     cb2:	01 e0       	ldi	r16, 0x01	; 1
     cb4:	10 e0       	ldi	r17, 0x00	; 0
    matrix = _matrix0;
    matrix_prev = _matrix1;
}

uint8_t matrix_scan(void)
{
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0

    KEY_POWER_OFF();
}
static inline void KEY_SELECT(uint8_t ROW, uint8_t COL)
{
    PORTB = (PORTB & 0xC0) | (((COL) & 0x07)<<3) | ((ROW) & 0x07);
     cba:	45 b1       	in	r20, 0x05	; 5
     cbc:	40 7c       	andi	r20, 0xC0	; 192
     cbe:	4c 2b       	or	r20, r28
     cc0:	9c 01       	movw	r18, r24
     cc2:	53 e0       	ldi	r21, 0x03	; 3
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	5a 95       	dec	r21
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <matrix_scan+0x3e>
     ccc:	42 2b       	or	r20, r18
     cce:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd0:	ea e1       	ldi	r30, 0x1A	; 26
     cd2:	ea 95       	dec	r30
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <matrix_scan+0x4c>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <matrix_scan+0x52>
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
            KEY_SELECT(row, col);
            _delay_us(5);

            // Not sure this is needed. This just emulates HHKB controller's behaviour.
            if (matrix_prev[row] & (1<<col)) {
     cd8:	e0 91 4a 01 	lds	r30, 0x014A
     cdc:	f0 91 4b 01 	lds	r31, 0x014B
     ce0:	ec 0f       	add	r30, r28
     ce2:	fd 1f       	adc	r31, r29
     ce4:	20 81       	ld	r18, Z
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	08 2e       	mov	r0, r24
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <matrix_scan+0x6a>
     cec:	35 95       	asr	r19
     cee:	27 95       	ror	r18
     cf0:	0a 94       	dec	r0
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <matrix_scan+0x66>
     cf4:	20 fd       	sbrc	r18, 0
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
     cf6:	2f 9a       	sbi	0x05, 7	; 5
     cf8:	f5 e3       	ldi	r31, 0x35	; 53
     cfa:	fa 95       	dec	r31
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <matrix_scan+0x74>
     cfe:	00 00       	nop
            _delay_us(10);

            // NOTE: KEY_STATE is valid only in 20us after KEY_ENABLE.
            // If V-USB interrupts in this section we could lose 40us or so
            // and would read invalid value from KEY_STATE.
            uint8_t last = TIMER_RAW;
     d00:	a6 b5       	in	r26, 0x26	; 38
 * key:     PD7(pull-uped)
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
     d02:	2e 98       	cbi	0x05, 6	; 5
     d04:	2a e1       	ldi	r18, 0x1A	; 26
     d06:	2a 95       	dec	r18
     d08:	f1 f7       	brne	.-4      	; 0xd06 <matrix_scan+0x80>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <matrix_scan+0x86>
     d0c:	20 91 4c 01 	lds	r18, 0x014C
     d10:	30 91 4d 01 	lds	r19, 0x014D
            // 10us wait does    work on Teensy++ with pro
            // 10us wait does    work on 328p+iwrap with pro
            // 10us wait doesn't work on tmk PCB(8MHz) with pro2(very lagged scan)
            _delay_us(5);

            if (KEY_STATE()) {
     d14:	4f 9b       	sbis	0x09, 7	; 9
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <matrix_scan+0xae>
                matrix[row] &= ~(1<<col);
     d18:	a8 01       	movw	r20, r16
     d1a:	08 2e       	mov	r0, r24
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <matrix_scan+0x9a>
     d1e:	44 0f       	add	r20, r20
     d20:	0a 94       	dec	r0
     d22:	ea f7       	brpl	.-6      	; 0xd1e <matrix_scan+0x98>
     d24:	40 95       	com	r20
     d26:	f9 01       	movw	r30, r18
     d28:	ec 0f       	add	r30, r28
     d2a:	fd 1f       	adc	r31, r29
     d2c:	50 81       	ld	r21, Z
     d2e:	54 23       	and	r21, r20
     d30:	50 83       	st	Z, r21
     d32:	0c c0       	rjmp	.+24     	; 0xd4c <matrix_scan+0xc6>
            } else {
                matrix[row] |= (1<<col);
     d34:	f9 01       	movw	r30, r18
     d36:	ec 0f       	add	r30, r28
     d38:	fd 1f       	adc	r31, r29
     d3a:	60 81       	ld	r22, Z
     d3c:	a8 01       	movw	r20, r16
     d3e:	08 2e       	mov	r0, r24
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <matrix_scan+0xbe>
     d42:	44 0f       	add	r20, r20
     d44:	0a 94       	dec	r0
     d46:	ea f7       	brpl	.-6      	; 0xd42 <matrix_scan+0xbc>
     d48:	64 2b       	or	r22, r20
     d4a:	60 83       	st	Z, r22
            }

            // Ignore if this code region execution time elapses more than 20us.
            // MEMO: 20[us] * (TIMER_RAW_FREQ / 1000000)[count per us]
            // MEMO: then change above using this rule: a/(b/c) = a*1/(b/c) = a*(c/b)
            if (TIMER_DIFF_RAW(TIMER_RAW, last) > 20/(1000000/TIMER_RAW_FREQ)) {
     d4c:	46 b5       	in	r20, 0x26	; 38
     d4e:	6a 2f       	mov	r22, r26
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	4a 17       	cp	r20, r26
     d54:	18 f0       	brcs	.+6      	; 0xd5c <matrix_scan+0xd6>
     d56:	46 b5       	in	r20, 0x26	; 38
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <matrix_scan+0xde>
     d5c:	46 b5       	in	r20, 0x26	; 38
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	41 50       	subi	r20, 0x01	; 1
     d62:	5f 4f       	sbci	r21, 0xFF	; 255
     d64:	46 1b       	sub	r20, r22
     d66:	57 0b       	sbc	r21, r23
     d68:	46 30       	cpi	r20, 0x06	; 6
     d6a:	51 05       	cpc	r21, r1
     d6c:	58 f0       	brcs	.+22     	; 0xd84 <matrix_scan+0xfe>
                matrix[row] = matrix_prev[row];
     d6e:	e0 91 4a 01 	lds	r30, 0x014A
     d72:	f0 91 4b 01 	lds	r31, 0x014B
     d76:	ec 0f       	add	r30, r28
     d78:	fd 1f       	adc	r31, r29
     d7a:	40 81       	ld	r20, Z
     d7c:	f9 01       	movw	r30, r18
     d7e:	ec 0f       	add	r30, r28
     d80:	fd 1f       	adc	r31, r29
     d82:	40 83       	st	Z, r20
     d84:	ea e1       	ldi	r30, 0x1A	; 26
     d86:	ea 95       	dec	r30
     d88:	f1 f7       	brne	.-4      	; 0xd86 <matrix_scan+0x100>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <matrix_scan+0x106>
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
     d8c:	2f 98       	cbi	0x05, 7	; 5
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     d8e:	2e 9a       	sbi	0x05, 6	; 5
     d90:	eb e2       	ldi	r30, 0x2B	; 43
     d92:	f1 e0       	ldi	r31, 0x01	; 1
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <matrix_scan+0x10e>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <matrix_scan+0x114>
     d9a:	00 00       	nop
     d9c:	01 96       	adiw	r24, 0x01	; 1
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
     d9e:	88 30       	cpi	r24, 0x08	; 8
     da0:	91 05       	cpc	r25, r1
     da2:	09 f0       	breq	.+2      	; 0xda6 <matrix_scan+0x120>
     da4:	8a cf       	rjmp	.-236    	; 0xcba <matrix_scan+0x34>
            _delay_us(30);
#else
            _delay_us(75);
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
     da6:	a0 91 4c 01 	lds	r26, 0x014C
     daa:	b0 91 4d 01 	lds	r27, 0x014D
     dae:	ac 0f       	add	r26, r28
     db0:	bd 1f       	adc	r27, r29
     db2:	e0 91 4a 01 	lds	r30, 0x014A
     db6:	f0 91 4b 01 	lds	r31, 0x014B
     dba:	ec 0f       	add	r30, r28
     dbc:	fd 1f       	adc	r31, r29
     dbe:	9c 91       	ld	r25, X
     dc0:	80 81       	ld	r24, Z
     dc2:	98 17       	cp	r25, r24
     dc4:	51 f0       	breq	.+20     	; 0xdda <matrix_scan+0x154>
     dc6:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <timer_read32>
     dca:	60 93 4e 01 	sts	0x014E, r22
     dce:	70 93 4f 01 	sts	0x014F, r23
     dd2:	80 93 50 01 	sts	0x0150, r24
     dd6:	90 93 51 01 	sts	0x0151, r25
     dda:	21 96       	adiw	r28, 0x01	; 1
    matrix_prev = matrix;
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     ddc:	c8 30       	cpi	r28, 0x08	; 8
     dde:	d1 05       	cpc	r29, r1
     de0:	09 f0       	breq	.+2      	; 0xde4 <matrix_scan+0x15e>
     de2:	69 cf       	rjmp	.-302    	; 0xcb6 <matrix_scan+0x30>
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
     de4:	80 91 01 02 	lds	r24, 0x0201
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
     de8:	85 30       	cpi	r24, 0x05	; 5
     dea:	21 f0       	breq	.+8      	; 0xdf4 <matrix_scan+0x16e>
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
     dec:	80 91 01 02 	lds	r24, 0x0201
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
     df0:	81 11       	cpse	r24, r1
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <matrix_scan+0x190>
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
     df4:	60 91 4e 01 	lds	r22, 0x014E
     df8:	70 91 4f 01 	lds	r23, 0x014F
     dfc:	80 91 50 01 	lds	r24, 0x0150
     e00:	90 91 51 01 	lds	r25, 0x0151
     e04:	0e 94 34 1c 	call	0x3868	; 0x3868 <timer_elapsed32>
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
     e08:	61 31       	cpi	r22, 0x11	; 17
     e0a:	77 42       	sbci	r23, 0x27	; 39
     e0c:	81 05       	cpc	r24, r1
     e0e:	91 05       	cpc	r25, r1
     e10:	10 f0       	brcs	.+4      	; 0xe16 <matrix_scan+0x190>
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
        KEY_POWER_OFF();
        suspend_power_down();
     e12:	0e 94 82 1b 	call	0x3704	; 0x3704 <suspend_power_down>
    }
    return 1;
}
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     e22:	e0 91 4c 01 	lds	r30, 0x014C
     e26:	f0 91 4d 01 	lds	r31, 0x014D
     e2a:	e8 0f       	add	r30, r24
     e2c:	f1 1d       	adc	r31, r1
}
     e2e:	80 81       	ld	r24, Z
     e30:	08 95       	ret

00000e32 <matrix_power_up>:

void matrix_power_up(void) {
     e32:	08 95       	ret

00000e34 <matrix_power_down>:
    KEY_POWER_ON();
}
void matrix_power_down(void) {
     e34:	08 95       	ret

00000e36 <led_set>:

/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
        DDRD |= (1<<6);
     e36:	56 9a       	sbi	0x0a, 6	; 10


/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     e38:	81 ff       	sbrs	r24, 1
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <led_set+0xa>
        DDRD |= (1<<6);
        PORTD |= (1<<6);
     e3c:	5e 9a       	sbi	0x0b, 6	; 11
     e3e:	08 95       	ret
    } else {
        DDRD |= (1<<6);
        PORTD &= ~(1<<6);
     e40:	5e 98       	cbi	0x0b, 6	; 11
     e42:	08 95       	ret

00000e44 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e44:	80 91 76 01 	lds	r24, 0x0176
     e48:	08 95       	ret

00000e4a <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     e4a:	9f b7       	in	r25, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	10 92 55 01 	sts	0x0155, r1
     e52:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     e54:	90 91 01 02 	lds	r25, 0x0201
     e58:	94 30       	cpi	r25, 0x04	; 4
     e5a:	09 f0       	breq	.+2      	; 0xe5e <sendchar+0x14>
     e5c:	58 c0       	rjmp	.+176    	; 0xf0e <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e5e:	90 91 e9 00 	lds	r25, 0x00E9
     e62:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e64:	20 91 ec 00 	lds	r18, 0x00EC
     e68:	20 ff       	sbrs	r18, 0
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <sendchar+0x26>
     e6c:	20 e8       	ldi	r18, 0x80	; 128
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <sendchar+0x28>
     e70:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e72:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e7a:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e7e:	90 ff       	sbrs	r25, 0
     e80:	43 c0       	rjmp	.+134    	; 0xf08 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e82:	90 91 ee 00 	lds	r25, 0x00EE
     e86:	97 ff       	sbrs	r25, 7
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     e8a:	90 91 52 01 	lds	r25, 0x0152
     e8e:	99 23       	and	r25, r25
     e90:	21 f0       	breq	.+8      	; 0xe9a <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e92:	90 91 e8 00 	lds	r25, 0x00E8
     e96:	95 ff       	sbrs	r25, 5
     e98:	37 c0       	rjmp	.+110    	; 0xf08 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
     e9a:	10 92 52 01 	sts	0x0152, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	30 91 e8 00 	lds	r19, 0x00E8
     ea4:	35 fd       	sbrc	r19, 5
     ea6:	15 c0       	rjmp	.+42     	; 0xed2 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     ea8:	30 91 01 02 	lds	r19, 0x0201
     eac:	34 30       	cpi	r19, 0x04	; 4
     eae:	61 f5       	brne	.+88     	; 0xf08 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     eb0:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     eb4:	35 fd       	sbrc	r19, 5
     eb6:	28 c0       	rjmp	.+80     	; 0xf08 <sendchar+0xbe>
     eb8:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     eba:	21 f4       	brne	.+8      	; 0xec4 <sendchar+0x7a>
            timeouted = true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 52 01 	sts	0x0152, r24
            goto ERROR_EXIT;
     ec2:	22 c0       	rjmp	.+68     	; 0xf08 <sendchar+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ec4:	ef e9       	ldi	r30, 0x9F	; 159
     ec6:	ff e0       	ldi	r31, 0x0F	; 15
     ec8:	31 97       	sbiw	r30, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <sendchar+0x7e>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <sendchar+0x84>
     ece:	00 00       	nop
     ed0:	e7 cf       	rjmp	.-50     	; 0xea0 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ed2:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ed6:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
     eda:	85 fd       	sbrc	r24, 5
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ede:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	fc cf       	rjmp	.-8      	; 0xede <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee6:	80 91 e8 00 	lds	r24, 0x00E8
     eea:	8e 77       	andi	r24, 0x7E	; 126
     eec:	80 93 e8 00 	sts	0x00E8, r24
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
     ef2:	8f b7       	in	r24, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	90 93 55 01 	sts	0x0155, r25
     efc:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efe:	2f 70       	andi	r18, 0x0F	; 15
     f00:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret
     f08:	2f 70       	andi	r18, 0x0F	; 15
     f0a:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
     f10:	08 95       	ret

00000f12 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <send_consumer+0x6>
     f18:	1f 92       	push	r1
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f1e:	20 91 01 02 	lds	r18, 0x0201
     f22:	24 30       	cpi	r18, 0x04	; 4
     f24:	19 f5       	brne	.+70     	; 0xf6c <send_consumer+0x5a>
        return;

    report_extra_t r = {
     f26:	23 e0       	ldi	r18, 0x03	; 3
     f28:	29 83       	std	Y+1, r18	; 0x01
     f2a:	9b 83       	std	Y+3, r25	; 0x03
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	20 93 e9 00 	sts	0x00E9, r18
     f32:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f34:	90 91 e8 00 	lds	r25, 0x00E8
     f38:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f3a:	95 fd       	sbrc	r25, 5
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f3e:	95 ed       	ldi	r25, 0xD5	; 213
     f40:	9a 95       	dec	r25
     f42:	f1 f7       	brne	.-4      	; 0xf40 <send_consumer+0x2e>
     f44:	00 00       	nop
     f46:	81 11       	cpse	r24, r1
     f48:	f5 cf       	rjmp	.-22     	; 0xf34 <send_consumer+0x22>
     f4a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     f4e:	85 ff       	sbrs	r24, 5
     f50:	0d c0       	rjmp	.+26     	; 0xf6c <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	63 e0       	ldi	r22, 0x03	; 3
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	ce 01       	movw	r24, r28
     f5c:	01 96       	adiw	r24, 0x01	; 1
     f5e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f62:	80 91 e8 00 	lds	r24, 0x00E8
     f66:	8e 77       	andi	r24, 0x7E	; 126
     f68:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <send_system+0x6>
     f7e:	1f 92       	push	r1
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f84:	20 91 01 02 	lds	r18, 0x0201
     f88:	24 30       	cpi	r18, 0x04	; 4
     f8a:	21 f5       	brne	.+72     	; 0xfd4 <send_system+0x5c>
        return;

    report_extra_t r = {
     f8c:	22 e0       	ldi	r18, 0x02	; 2
     f8e:	29 83       	std	Y+1, r18	; 0x01
     f90:	9b 83       	std	Y+3, r25	; 0x03
     f92:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	80 93 e9 00 	sts	0x00E9, r24
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f9c:	90 91 e8 00 	lds	r25, 0x00E8
     fa0:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     fa2:	95 fd       	sbrc	r25, 5
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <send_system+0x3a>
     fa6:	95 ed       	ldi	r25, 0xD5	; 213
     fa8:	9a 95       	dec	r25
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <send_system+0x30>
     fac:	00 00       	nop
     fae:	81 11       	cpse	r24, r1
     fb0:	f5 cf       	rjmp	.-22     	; 0xf9c <send_system+0x24>
     fb2:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     fb6:	85 ff       	sbrs	r24, 5
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	63 e0       	ldi	r22, 0x03	; 3
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fca:	80 91 e8 00 	lds	r24, 0x00E8
     fce:	8e 77       	andi	r24, 0x7E	; 126
     fd0:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     fe0:	20 91 01 02 	lds	r18, 0x0201
     fe4:	24 30       	cpi	r18, 0x04	; 4
     fe6:	f1 f4       	brne	.+60     	; 0x1024 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fe8:	22 e0       	ldi	r18, 0x02	; 2
     fea:	20 93 e9 00 	sts	0x00E9, r18
     fee:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ff0:	30 91 e8 00 	lds	r19, 0x00E8
     ff4:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     ff6:	35 fd       	sbrc	r19, 5
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <send_mouse+0x26>
     ffa:	35 ed       	ldi	r19, 0xD5	; 213
     ffc:	3a 95       	dec	r19
     ffe:	f1 f7       	brne	.-4      	; 0xffc <send_mouse+0x1c>
    1000:	00 00       	nop
    1002:	21 11       	cpse	r18, r1
    1004:	f5 cf       	rjmp	.-22     	; 0xff0 <send_mouse+0x10>
    1006:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    100a:	25 ff       	sbrs	r18, 5
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	65 e0       	ldi	r22, 0x05	; 5
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    101a:	80 91 e8 00 	lds	r24, 0x00E8
    101e:	8e 77       	andi	r24, 0x7E	; 126
    1020:	80 93 e8 00 	sts	0x00E8, r24
    1024:	08 95       	ret

00001026 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    102c:	80 91 01 02 	lds	r24, 0x0201
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	09 f0       	breq	.+2      	; 0x1036 <send_keyboard+0x10>
    1034:	47 c0       	rjmp	.+142    	; 0x10c4 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1036:	80 91 0a 01 	lds	r24, 0x010A
    103a:	88 23       	and	r24, r24
    103c:	e1 f0       	breq	.+56     	; 0x1076 <send_keyboard+0x50>
    103e:	80 91 0b 01 	lds	r24, 0x010B
    1042:	88 23       	and	r24, r24
    1044:	c1 f0       	breq	.+48     	; 0x1076 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1046:	85 e0       	ldi	r24, 0x05	; 5
    1048:	80 93 e9 00 	sts	0x00E9, r24
    104c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    104e:	90 91 e8 00 	lds	r25, 0x00E8
    1052:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1054:	95 fd       	sbrc	r25, 5
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <send_keyboard+0x3e>
    1058:	95 e1       	ldi	r25, 0x15	; 21
    105a:	9a 95       	dec	r25
    105c:	f1 f7       	brne	.-4      	; 0x105a <send_keyboard+0x34>
    105e:	00 00       	nop
    1060:	81 11       	cpse	r24, r1
    1062:	f5 cf       	rjmp	.-22     	; 0x104e <send_keyboard+0x28>
    1064:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1068:	85 ff       	sbrs	r24, 5
    106a:	2c c0       	rjmp	.+88     	; 0x10c4 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e2       	ldi	r22, 0x20	; 32
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	17 c0       	rjmp	.+46     	; 0x10a4 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 e9 00 	sts	0x00E9, r24
    107c:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    107e:	90 91 e8 00 	lds	r25, 0x00E8
    1082:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1084:	95 fd       	sbrc	r25, 5
    1086:	06 c0       	rjmp	.+12     	; 0x1094 <send_keyboard+0x6e>
    1088:	95 ed       	ldi	r25, 0xD5	; 213
    108a:	9a 95       	dec	r25
    108c:	f1 f7       	brne	.-4      	; 0x108a <send_keyboard+0x64>
    108e:	00 00       	nop
    1090:	81 11       	cpse	r24, r1
    1092:	f5 cf       	rjmp	.-22     	; 0x107e <send_keyboard+0x58>
    1094:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1098:	85 ff       	sbrs	r24, 5
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	68 e0       	ldi	r22, 0x08	; 8
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10aa:	80 91 e8 00 	lds	r24, 0x00E8
    10ae:	8e 77       	andi	r24, 0x7E	; 126
    10b0:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    10b4:	80 e2       	ldi	r24, 0x20	; 32
    10b6:	fe 01       	movw	r30, r28
    10b8:	a6 e5       	ldi	r26, 0x56	; 86
    10ba:	b1 e0       	ldi	r27, 0x01	; 1
    10bc:	01 90       	ld	r0, Z+
    10be:	0d 92       	st	X+, r0
    10c0:	8a 95       	dec	r24
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <send_keyboard+0x96>
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    10ca:	80 e9       	ldi	r24, 0x90	; 144
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    10d2:	80 91 00 02 	lds	r24, 0x0200
    10d6:	81 11       	cpse	r24, r1
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    10da:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <USB_Disable>
        USB_Init();
    10de:	0e 94 56 0c 	call	0x18ac	; 0x18ac <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    10e2:	80 91 e2 00 	lds	r24, 0x00E2
    10e6:	84 60       	ori	r24, 0x04	; 4
    10e8:	80 93 e2 00 	sts	0x00E2, r24
    10ec:	08 95       	ret

000010ee <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    10ee:	8c e8       	ldi	r24, 0x8C	; 140
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    10f6:	10 92 00 02 	sts	0x0200, r1
    10fa:	08 95       	ret

000010fc <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    10fc:	08 95       	ret

000010fe <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    10fe:	80 91 53 01 	lds	r24, 0x0153
    1102:	8f 5f       	subi	r24, 0xFF	; 255
    1104:	80 93 53 01 	sts	0x0153, r24
    1108:	62 e3       	ldi	r22, 0x32	; 50
    110a:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <__udivmodqi4>
    110e:	91 11       	cpse	r25, r1
    1110:	35 c0       	rjmp	.+106    	; 0x117c <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1112:	10 92 53 01 	sts	0x0153, r1

    if (!console_flush) return;
    1116:	80 91 55 01 	lds	r24, 0x0155
    111a:	88 23       	and	r24, r24
    111c:	79 f1       	breq	.+94     	; 0x117c <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    111e:	80 91 01 02 	lds	r24, 0x0201
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	49 f5       	brne	.+82     	; 0x1178 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1126:	80 91 e9 00 	lds	r24, 0x00E9
    112a:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    112c:	90 91 ec 00 	lds	r25, 0x00EC
    1130:	90 ff       	sbrs	r25, 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <EVENT_USB_Device_StartOfFrame+0x3a>
    1134:	90 e8       	ldi	r25, 0x80	; 128
    1136:	01 c0       	rjmp	.+2      	; 0x113a <EVENT_USB_Device_StartOfFrame+0x3c>
    1138:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    113a:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1142:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1146:	80 ff       	sbrs	r24, 0
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    114a:	80 91 ee 00 	lds	r24, 0x00EE
    114e:	87 ff       	sbrs	r24, 7
    1150:	10 c0       	rjmp	.+32     	; 0x1172 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1152:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1156:	85 ff       	sbrs	r24, 5
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    115a:	10 92 f1 00 	sts	0x00F1, r1
    115e:	f9 cf       	rjmp	.-14     	; 0x1152 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1160:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1164:	80 ff       	sbrs	r24, 0
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1168:	80 91 e8 00 	lds	r24, 0x00E8
    116c:	8e 77       	andi	r24, 0x7E	; 126
    116e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1172:	9f 70       	andi	r25, 0x0F	; 15
    1174:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1178:	10 92 55 01 	sts	0x0155, r1
    117c:	08 95       	ret

0000117e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    117e:	42 e0       	ldi	r20, 0x02	; 2
    1180:	61 ec       	ldi	r22, 0xC1	; 193
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>
    1188:	42 e0       	ldi	r20, 0x02	; 2
    118a:	61 ec       	ldi	r22, 0xC1	; 193
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>
    1192:	42 e0       	ldi	r20, 0x02	; 2
    1194:	61 ec       	ldi	r22, 0xC1	; 193
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>
    119c:	42 e2       	ldi	r20, 0x22	; 34
    119e:	61 ec       	ldi	r22, 0xC1	; 193
    11a0:	84 e0       	ldi	r24, 0x04	; 4
    11a2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>
    11a6:	42 e2       	ldi	r20, 0x22	; 34
    11a8:	61 ec       	ldi	r22, 0xC1	; 193
    11aa:	85 e0       	ldi	r24, 0x05	; 5
    11ac:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>

000011b0 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    11b0:	80 91 03 02 	lds	r24, 0x0203
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	09 f4       	brne	.+2      	; 0x11ba <EVENT_USB_Device_ControlRequest+0xa>
    11b8:	55 c0       	rjmp	.+170    	; 0x1264 <EVENT_USB_Device_ControlRequest+0xb4>
    11ba:	30 f4       	brcc	.+12     	; 0x11c8 <EVENT_USB_Device_ControlRequest+0x18>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	71 f0       	breq	.+28     	; 0x11dc <EVENT_USB_Device_ControlRequest+0x2c>
    11c0:	82 30       	cpi	r24, 0x02	; 2
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <EVENT_USB_Device_ControlRequest+0x16>
    11c4:	8e c0       	rjmp	.+284    	; 0x12e2 <EVENT_USB_Device_ControlRequest+0x132>
    11c6:	08 95       	ret
    11c8:	8a 30       	cpi	r24, 0x0A	; 10
    11ca:	09 f4       	brne	.+2      	; 0x11ce <EVENT_USB_Device_ControlRequest+0x1e>
    11cc:	7a c0       	rjmp	.+244    	; 0x12c2 <EVENT_USB_Device_ControlRequest+0x112>
    11ce:	8b 30       	cpi	r24, 0x0B	; 11
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <EVENT_USB_Device_ControlRequest+0x24>
    11d2:	60 c0       	rjmp	.+192    	; 0x1294 <EVENT_USB_Device_ControlRequest+0xe4>
    11d4:	89 30       	cpi	r24, 0x09	; 9
    11d6:	09 f0       	breq	.+2      	; 0x11da <EVENT_USB_Device_ControlRequest+0x2a>
    11d8:	9c c0       	rjmp	.+312    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
    11da:	20 c0       	rjmp	.+64     	; 0x121c <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11dc:	80 91 02 02 	lds	r24, 0x0202
    11e0:	81 3a       	cpi	r24, 0xA1	; 161
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <EVENT_USB_Device_ControlRequest+0x36>
    11e4:	96 c0       	rjmp	.+300    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11e6:	80 91 e8 00 	lds	r24, 0x00E8
    11ea:	87 7f       	andi	r24, 0xF7	; 247
    11ec:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    11f0:	80 91 06 02 	lds	r24, 0x0206
    11f4:	90 91 07 02 	lds	r25, 0x0207
    11f8:	89 2b       	or	r24, r25
    11fa:	21 f0       	breq	.+8      	; 0x1204 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    11fc:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	03 c0       	rjmp	.+6      	; 0x120a <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1204:	60 e2       	ldi	r22, 0x20	; 32

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1206:	86 e5       	ldi	r24, 0x56	; 86
    1208:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1210:	80 91 e8 00 	lds	r24, 0x00E8
    1214:	8b 77       	andi	r24, 0x7B	; 123
    1216:	80 93 e8 00 	sts	0x00E8, r24
    121a:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    121c:	80 91 02 02 	lds	r24, 0x0202
    1220:	81 32       	cpi	r24, 0x21	; 33
    1222:	09 f0       	breq	.+2      	; 0x1226 <EVENT_USB_Device_ControlRequest+0x76>
    1224:	76 c0       	rjmp	.+236    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1226:	80 91 06 02 	lds	r24, 0x0206
    122a:	90 91 07 02 	lds	r25, 0x0207
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	19 f0       	breq	.+6      	; 0x1238 <EVENT_USB_Device_ControlRequest+0x88>
    1232:	04 97       	sbiw	r24, 0x04	; 4
    1234:	09 f0       	breq	.+2      	; 0x1238 <EVENT_USB_Device_ControlRequest+0x88>
    1236:	6d c0       	rjmp	.+218    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1238:	80 91 e8 00 	lds	r24, 0x00E8
    123c:	87 7f       	andi	r24, 0xF7	; 247
    123e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1242:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1246:	82 fd       	sbrc	r24, 2
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    124a:	80 91 01 02 	lds	r24, 0x0201
    124e:	81 11       	cpse	r24, r1
    1250:	f8 cf       	rjmp	.-16     	; 0x1242 <EVENT_USB_Device_ControlRequest+0x92>
    1252:	5f c0       	rjmp	.+190    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1254:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1258:	80 93 76 01 	sts	0x0176, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    125c:	80 91 e8 00 	lds	r24, 0x00E8
    1260:	8b 77       	andi	r24, 0x7B	; 123
    1262:	53 c0       	rjmp	.+166    	; 0x130a <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1264:	80 91 02 02 	lds	r24, 0x0202
    1268:	81 3a       	cpi	r24, 0xA1	; 161
    126a:	09 f0       	breq	.+2      	; 0x126e <EVENT_USB_Device_ControlRequest+0xbe>
    126c:	52 c0       	rjmp	.+164    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    126e:	80 91 06 02 	lds	r24, 0x0206
    1272:	90 91 07 02 	lds	r25, 0x0207
    1276:	89 2b       	or	r24, r25
    1278:	09 f0       	breq	.+2      	; 0x127c <EVENT_USB_Device_ControlRequest+0xcc>
    127a:	4b c0       	rjmp	.+150    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    127c:	80 91 e8 00 	lds	r24, 0x00E8
    1280:	87 7f       	andi	r24, 0xF7	; 247
    1282:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1286:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    128a:	80 ff       	sbrs	r24, 0
    128c:	fc cf       	rjmp	.-8      	; 0x1286 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    128e:	80 91 0a 01 	lds	r24, 0x010A
    1292:	36 c0       	rjmp	.+108    	; 0x1300 <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1294:	80 91 02 02 	lds	r24, 0x0202
    1298:	81 32       	cpi	r24, 0x21	; 33
    129a:	d9 f5       	brne	.+118    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    129c:	80 91 06 02 	lds	r24, 0x0206
    12a0:	90 91 07 02 	lds	r25, 0x0207
    12a4:	89 2b       	or	r24, r25
    12a6:	a9 f5       	brne	.+106    	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12a8:	80 91 e8 00 	lds	r24, 0x00E8
    12ac:	87 7f       	andi	r24, 0xF7	; 247
    12ae:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    12b2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    12b6:	80 91 04 02 	lds	r24, 0x0204
    12ba:	80 93 0a 01 	sts	0x010A, r24
                    clear_keyboard();
    12be:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12c2:	80 91 02 02 	lds	r24, 0x0202
    12c6:	81 32       	cpi	r24, 0x21	; 33
    12c8:	21 f5       	brne	.+72     	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
    12ca:	80 91 e8 00 	lds	r24, 0x00E8
    12ce:	87 7f       	andi	r24, 0xF7	; 247
    12d0:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    12d4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    12d8:	80 91 05 02 	lds	r24, 0x0205
    12dc:	80 93 77 01 	sts	0x0177, r24
    12e0:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12e2:	80 91 02 02 	lds	r24, 0x0202
    12e6:	81 3a       	cpi	r24, 0xA1	; 161
    12e8:	a1 f4       	brne	.+40     	; 0x1312 <EVENT_USB_Device_ControlRequest+0x162>
    12ea:	80 91 e8 00 	lds	r24, 0x00E8
    12ee:	87 7f       	andi	r24, 0xF7	; 247
    12f0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12f4:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    12f8:	80 ff       	sbrs	r24, 0
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    12fc:	80 91 77 01 	lds	r24, 0x0177
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1300:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1304:	80 91 e8 00 	lds	r24, 0x00E8
    1308:	8e 77       	andi	r24, 0x7E	; 126
    130a:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    130e:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <Endpoint_ClearStatusStage>
    1312:	08 95       	ret

00001314 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    1314:	08 95       	ret

00001316 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    1316:	08 95       	ret

00001318 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    1318:	80 91 76 01 	lds	r24, 0x0176
    131c:	80 93 54 01 	sts	0x0154, r24
    keyboard_led_stats = 0;
    1320:	10 92 76 01 	sts	0x0176, r1
    led_set(keyboard_led_stats);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	0e 94 1b 07 	call	0xe36	; 0xe36 <led_set>

    matrix_clear();
    132a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <matrix_clear>
    clear_keyboard();
    132e:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <clear_keyboard>

00001332 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1332:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <hook_usb_suspend_entry>

00001336 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1336:	0e 94 82 1b 	call	0x3704	; 0x3704 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    133a:	80 91 ff 01 	lds	r24, 0x01FF
    133e:	88 23       	and	r24, r24
    1340:	29 f0       	breq	.+10     	; 0x134c <hook_usb_suspend_loop+0x16>
    1342:	0e 94 a8 1b 	call	0x3750	; 0x3750 <suspend_wakeup_condition>
    1346:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1348:	0c 94 51 0a 	jmp	0x14a2	; 0x14a2 <USB_Device_SendRemoteWakeup>
    134c:	08 95       	ret

0000134e <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    134e:	84 b7       	in	r24, 0x34	; 52
    1350:	87 7f       	andi	r24, 0xF7	; 247
    1352:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1354:	88 e1       	ldi	r24, 0x18	; 24
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	80 93 60 00 	sts	0x0060, r24
    135e:	10 92 60 00 	sts	0x0060, r1
    1362:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	80 93 61 00 	sts	0x0061, r24
    1370:	90 93 61 00 	sts	0x0061, r25
    1374:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    1376:	85 e2       	ldi	r24, 0x25	; 37
    1378:	97 e0       	ldi	r25, 0x07	; 7
    137a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <print_set_sendchar>
    print("\r\ninit\n");
    137e:	84 e8       	ldi	r24, 0x84	; 132
    1380:	91 e0       	ldi	r25, 0x01	; 1
    1382:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>

    hook_early_init();
    1386:	0e 94 8a 09 	call	0x1314	; 0x1314 <hook_early_init>
    keyboard_setup();
    138a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    138e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <USB_Disable>

    USB_Init();
    1392:	0e 94 56 0c 	call	0x18ac	; 0x18ac <USB_Init>
    1396:	80 91 e2 00 	lds	r24, 0x00E2
    139a:	84 60       	ori	r24, 0x04	; 4
    139c:	80 93 e2 00 	sts	0x00E2, r24
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    13a0:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    13a2:	80 91 01 02 	lds	r24, 0x0201
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <main+0x54>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    13aa:	83 e7       	ldi	r24, 0x73	; 115
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>

    /* init modules */
    keyboard_init();
    13b2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <keyboard_init>
    host_set_driver(&lufa_driver);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    13be:	82 e6       	ldi	r24, 0x62	; 98
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    hook_late_init();
    13c6:	0e 94 8b 09 	call	0x1316	; 0x1316 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    13ca:	80 91 01 02 	lds	r24, 0x0201
    13ce:	85 30       	cpi	r24, 0x05	; 5
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <main+0x8a>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    13d2:	0e 94 9b 09 	call	0x1336	; 0x1336 <hook_usb_suspend_loop>
    13d6:	f9 cf       	rjmp	.-14     	; 0x13ca <main+0x7c>
        }

        keyboard_task();
    13d8:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    13dc:	f6 cf       	rjmp	.-20     	; 0x13ca <main+0x7c>

000013de <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    13de:	0e 94 bd 1b 	call	0x377a	; 0x377a <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    13e2:	80 91 54 01 	lds	r24, 0x0154
    13e6:	80 93 76 01 	sts	0x0176, r24
    13ea:	08 95       	ret

000013ec <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    13ec:	0c 94 ef 09 	jmp	0x13de	; 0x13de <hook_usb_wakeup>

000013f0 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    13f0:	29 2f       	mov	r18, r25
    13f2:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    13f4:	23 30       	cpi	r18, 0x03	; 3
    13f6:	31 05       	cpc	r19, r1
    13f8:	a9 f0       	breq	.+42     	; 0x1424 <CALLBACK_USB_GetDescriptor+0x34>
    13fa:	6c f4       	brge	.+26     	; 0x1416 <CALLBACK_USB_GetDescriptor+0x26>
    13fc:	21 30       	cpi	r18, 0x01	; 1
    13fe:	31 05       	cpc	r19, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <CALLBACK_USB_GetDescriptor+0x14>
    1402:	42 c0       	rjmp	.+132    	; 0x1488 <CALLBACK_USB_GetDescriptor+0x98>
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	09 f0       	breq	.+2      	; 0x140c <CALLBACK_USB_GetDescriptor+0x1c>
    140a:	43 c0       	rjmp	.+134    	; 0x1492 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    140c:	8d e8       	ldi	r24, 0x8D	; 141
    140e:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1410:	2c eb       	ldi	r18, 0xBC	; 188
    1412:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1414:	42 c0       	rjmp	.+132    	; 0x149a <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1416:	21 32       	cpi	r18, 0x21	; 33
    1418:	31 05       	cpc	r19, r1
    141a:	c9 f0       	breq	.+50     	; 0x144e <CALLBACK_USB_GetDescriptor+0x5e>
    141c:	22 32       	cpi	r18, 0x22	; 34
    141e:	31 05       	cpc	r19, r1
    1420:	19 f1       	breq	.+70     	; 0x1468 <CALLBACK_USB_GetDescriptor+0x78>
    1422:	37 c0       	rjmp	.+110    	; 0x1492 <CALLBACK_USB_GetDescriptor+0xa2>
    1424:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	41 f0       	breq	.+16     	; 0x143c <CALLBACK_USB_GetDescriptor+0x4c>
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	91 05       	cpc	r25, r1
    1430:	41 f0       	breq	.+16     	; 0x1442 <CALLBACK_USB_GetDescriptor+0x52>
    1432:	89 2b       	or	r24, r25
    1434:	71 f5       	brne	.+92     	; 0x1492 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1436:	e8 eb       	ldi	r30, 0xB8	; 184
    1438:	f1 e0       	ldi	r31, 0x01	; 1
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    143c:	e8 ea       	ldi	r30, 0xA8	; 168
    143e:	f1 e0       	ldi	r31, 0x01	; 1
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1442:	e4 e9       	ldi	r30, 0x94	; 148
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	84 91       	lpm	r24, Z
    1448:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    144a:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    144c:	26 c0       	rjmp	.+76     	; 0x149a <CALLBACK_USB_GetDescriptor+0xaa>
    144e:	65 30       	cpi	r22, 0x05	; 5
    1450:	00 f5       	brcc	.+64     	; 0x1492 <CALLBACK_USB_GetDescriptor+0xa2>
    1452:	e6 2f       	mov	r30, r22
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	ed 5d       	subi	r30, 0xDD	; 221
    145c:	fe 4f       	sbci	r31, 0xFE	; 254
    145e:	20 81       	ld	r18, Z
    1460:	31 81       	ldd	r19, Z+1	; 0x01
    1462:	89 e0       	ldi	r24, 0x09	; 9
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	19 c0       	rjmp	.+50     	; 0x149a <CALLBACK_USB_GetDescriptor+0xaa>
    1468:	65 30       	cpi	r22, 0x05	; 5
    146a:	98 f4       	brcc	.+38     	; 0x1492 <CALLBACK_USB_GetDescriptor+0xa2>
    146c:	e6 2f       	mov	r30, r22
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	df 01       	movw	r26, r30
    1472:	aa 0f       	add	r26, r26
    1474:	bb 1f       	adc	r27, r27
    1476:	a7 5e       	subi	r26, 0xE7	; 231
    1478:	be 4f       	sbci	r27, 0xFE	; 254
    147a:	2d 91       	ld	r18, X+
    147c:	3c 91       	ld	r19, X
    147e:	ec 5e       	subi	r30, 0xEC	; 236
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	80 81       	ld	r24, Z
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	09 c0       	rjmp	.+18     	; 0x149a <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1488:	82 e1       	ldi	r24, 0x12	; 18
    148a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    148c:	29 e4       	ldi	r18, 0x49	; 73
    148e:	32 e0       	ldi	r19, 0x02	; 2
    1490:	04 c0       	rjmp	.+8      	; 0x149a <CALLBACK_USB_GetDescriptor+0xaa>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    149a:	fa 01       	movw	r30, r20
    149c:	31 83       	std	Z+1, r19	; 0x01
    149e:	20 83       	st	Z, r18
    return Size;
}
    14a0:	08 95       	ret

000014a2 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    14a2:	80 e1       	ldi	r24, 0x10	; 16
    14a4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14a6:	82 e1       	ldi	r24, 0x12	; 18
    14a8:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    14aa:	09 b4       	in	r0, 0x29	; 41
    14ac:	00 fe       	sbrs	r0, 0
    14ae:	fd cf       	rjmp	.-6      	; 0x14aa <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14b0:	80 91 d8 00 	lds	r24, 0x00D8
    14b4:	8f 7d       	andi	r24, 0xDF	; 223
    14b6:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    14ba:	80 91 e0 00 	lds	r24, 0x00E0
    14be:	82 60       	ori	r24, 0x02	; 2
    14c0:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    14c4:	80 91 e0 00 	lds	r24, 0x00E0
    14c8:	81 fd       	sbrc	r24, 1
    14ca:	fc cf       	rjmp	.-8      	; 0x14c4 <USB_Device_SendRemoteWakeup+0x22>
}
    14cc:	08 95       	ret

000014ce <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	7c 01       	movw	r14, r24
    14e0:	8b 01       	movw	r16, r22
    14e2:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    14e4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <Endpoint_WaitUntilReady>
    14e8:	81 11       	cpse	r24, r1
    14ea:	31 c0       	rjmp	.+98     	; 0x154e <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14ec:	20 97       	sbiw	r28, 0x00	; 0
    14ee:	31 f0       	breq	.+12     	; 0x14fc <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    14f0:	88 81       	ld	r24, Y
    14f2:	99 81       	ldd	r25, Y+1	; 0x01
    14f4:	08 1b       	sub	r16, r24
    14f6:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14f8:	e8 0e       	add	r14, r24
    14fa:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14fc:	c1 2c       	mov	r12, r1
    14fe:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1500:	01 15       	cp	r16, r1
    1502:	11 05       	cpc	r17, r1
    1504:	19 f1       	breq	.+70     	; 0x154c <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1506:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    150a:	85 fd       	sbrc	r24, 5
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    150e:	80 91 e8 00 	lds	r24, 0x00E8
    1512:	8e 77       	andi	r24, 0x7E	; 126
    1514:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	41 f0       	breq	.+16     	; 0x152c <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    151c:	88 81       	ld	r24, Y
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	8c 0d       	add	r24, r12
    1522:	9d 1d       	adc	r25, r13
    1524:	99 83       	std	Y+1, r25	; 0x01
    1526:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	11 c0       	rjmp	.+34     	; 0x154e <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    152c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <Endpoint_WaitUntilReady>
    1530:	88 23       	and	r24, r24
    1532:	31 f3       	breq	.-52     	; 0x1500 <Endpoint_Write_Stream_LE+0x32>
    1534:	0c c0       	rjmp	.+24     	; 0x154e <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1536:	f7 01       	movw	r30, r14
    1538:	81 91       	ld	r24, Z+
    153a:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    153c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1540:	01 50       	subi	r16, 0x01	; 1
    1542:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1544:	ff ef       	ldi	r31, 0xFF	; 255
    1546:	cf 1a       	sub	r12, r31
    1548:	df 0a       	sbc	r13, r31
    154a:	da cf       	rjmp	.-76     	; 0x1500 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    154c:	80 e0       	ldi	r24, 0x00	; 0
}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	df 90       	pop	r13
    155c:	cf 90       	pop	r12
    155e:	08 95       	ret

00001560 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1560:	20 91 08 02 	lds	r18, 0x0208
    1564:	30 91 09 02 	lds	r19, 0x0209
    1568:	26 17       	cp	r18, r22
    156a:	37 07       	cpc	r19, r23
    156c:	48 f0       	brcs	.+18     	; 0x1580 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    156e:	61 15       	cp	r22, r1
    1570:	71 05       	cpc	r23, r1
    1572:	39 f4       	brne	.+14     	; 0x1582 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1574:	20 91 e8 00 	lds	r18, 0x00E8
    1578:	2e 77       	andi	r18, 0x7E	; 126
    157a:	20 93 e8 00 	sts	0x00E8, r18
    157e:	01 c0       	rjmp	.+2      	; 0x1582 <Endpoint_Write_Control_Stream_LE+0x22>
    1580:	b9 01       	movw	r22, r18
    1582:	fc 01       	movw	r30, r24
    1584:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1586:	61 15       	cp	r22, r1
    1588:	71 05       	cpc	r23, r1
    158a:	b9 f1       	breq	.+110    	; 0x15fa <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    158c:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1590:	88 23       	and	r24, r24
    1592:	09 f4       	brne	.+2      	; 0x1596 <Endpoint_Write_Control_Stream_LE+0x36>
    1594:	40 c0       	rjmp	.+128    	; 0x1616 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1596:	85 30       	cpi	r24, 0x05	; 5
    1598:	09 f4       	brne	.+2      	; 0x159c <Endpoint_Write_Control_Stream_LE+0x3c>
    159a:	3f c0       	rjmp	.+126    	; 0x161a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    159c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15a0:	83 fd       	sbrc	r24, 3
    15a2:	3d c0       	rjmp	.+122    	; 0x161e <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    15a8:	82 ff       	sbrs	r24, 2
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <Endpoint_Write_Control_Stream_LE+0x58>
    15ac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15b0:	82 ff       	sbrs	r24, 2
    15b2:	26 c0       	rjmp	.+76     	; 0x1600 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15b8:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    15bc:	80 ff       	sbrs	r24, 0
    15be:	e3 cf       	rjmp	.-58     	; 0x1586 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    15c0:	20 91 f3 00 	lds	r18, 0x00F3
    15c4:	80 91 f2 00 	lds	r24, 0x00F2
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    15cc:	61 15       	cp	r22, r1
    15ce:	71 05       	cpc	r23, r1
    15d0:	51 f0       	breq	.+20     	; 0x15e6 <Endpoint_Write_Control_Stream_LE+0x86>
    15d2:	88 30       	cpi	r24, 0x08	; 8
    15d4:	91 05       	cpc	r25, r1
    15d6:	38 f4       	brcc	.+14     	; 0x15e6 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15d8:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15da:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    15de:	61 50       	subi	r22, 0x01	; 1
    15e0:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	f3 cf       	rjmp	.-26     	; 0x15cc <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	08 97       	sbiw	r24, 0x08	; 8
    15ea:	09 f0       	breq	.+2      	; 0x15ee <Endpoint_Write_Control_Stream_LE+0x8e>
    15ec:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15ee:	80 91 e8 00 	lds	r24, 0x00E8
    15f2:	8e 77       	andi	r24, 0x7E	; 126
    15f4:	80 93 e8 00 	sts	0x00E8, r24
    15f8:	c6 cf       	rjmp	.-116    	; 0x1586 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15fa:	21 11       	cpse	r18, r1
    15fc:	c7 cf       	rjmp	.-114    	; 0x158c <Endpoint_Write_Control_Stream_LE+0x2c>
    15fe:	d6 cf       	rjmp	.-84     	; 0x15ac <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1600:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1604:	88 23       	and	r24, r24
    1606:	39 f0       	breq	.+14     	; 0x1616 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1608:	85 30       	cpi	r24, 0x05	; 5
    160a:	39 f0       	breq	.+14     	; 0x161a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    160c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1610:	83 ff       	sbrs	r24, 3
    1612:	cc cf       	rjmp	.-104    	; 0x15ac <Endpoint_Write_Control_Stream_LE+0x4c>
    1614:	04 c0       	rjmp	.+8      	; 0x161e <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    161e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1620:	08 95       	ret

00001622 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1622:	20 91 08 02 	lds	r18, 0x0208
    1626:	30 91 09 02 	lds	r19, 0x0209
    162a:	26 17       	cp	r18, r22
    162c:	37 07       	cpc	r19, r23
    162e:	48 f0       	brcs	.+18     	; 0x1642 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1630:	61 15       	cp	r22, r1
    1632:	71 05       	cpc	r23, r1
    1634:	39 f4       	brne	.+14     	; 0x1644 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1636:	20 91 e8 00 	lds	r18, 0x00E8
    163a:	2e 77       	andi	r18, 0x7E	; 126
    163c:	20 93 e8 00 	sts	0x00E8, r18
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <Endpoint_Write_Control_PStream_LE+0x22>
    1642:	b9 01       	movw	r22, r18
    1644:	fc 01       	movw	r30, r24
    1646:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1648:	61 15       	cp	r22, r1
    164a:	71 05       	cpc	r23, r1
    164c:	c1 f1       	breq	.+112    	; 0x16be <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    164e:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1652:	88 23       	and	r24, r24
    1654:	09 f4       	brne	.+2      	; 0x1658 <Endpoint_Write_Control_PStream_LE+0x36>
    1656:	41 c0       	rjmp	.+130    	; 0x16da <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1658:	85 30       	cpi	r24, 0x05	; 5
    165a:	09 f4       	brne	.+2      	; 0x165e <Endpoint_Write_Control_PStream_LE+0x3c>
    165c:	40 c0       	rjmp	.+128    	; 0x16de <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    165e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1662:	83 fd       	sbrc	r24, 3
    1664:	3e c0       	rjmp	.+124    	; 0x16e2 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1666:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    166a:	82 ff       	sbrs	r24, 2
    166c:	06 c0       	rjmp	.+12     	; 0x167a <Endpoint_Write_Control_PStream_LE+0x58>
    166e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1672:	82 ff       	sbrs	r24, 2
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    167a:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    167e:	80 ff       	sbrs	r24, 0
    1680:	e3 cf       	rjmp	.-58     	; 0x1648 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1682:	20 91 f3 00 	lds	r18, 0x00F3
    1686:	80 91 f2 00 	lds	r24, 0x00F2
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    168e:	61 15       	cp	r22, r1
    1690:	71 05       	cpc	r23, r1
    1692:	59 f0       	breq	.+22     	; 0x16aa <Endpoint_Write_Control_PStream_LE+0x88>
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	91 05       	cpc	r25, r1
    1698:	40 f4       	brcc	.+16     	; 0x16aa <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    169a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    169c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    16a0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    16a2:	61 50       	subi	r22, 0x01	; 1
    16a4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	f2 cf       	rjmp	.-28     	; 0x168e <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    16aa:	21 e0       	ldi	r18, 0x01	; 1
    16ac:	08 97       	sbiw	r24, 0x08	; 8
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <Endpoint_Write_Control_PStream_LE+0x90>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16b2:	80 91 e8 00 	lds	r24, 0x00E8
    16b6:	8e 77       	andi	r24, 0x7E	; 126
    16b8:	80 93 e8 00 	sts	0x00E8, r24
    16bc:	c5 cf       	rjmp	.-118    	; 0x1648 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    16be:	21 11       	cpse	r18, r1
    16c0:	c6 cf       	rjmp	.-116    	; 0x164e <Endpoint_Write_Control_PStream_LE+0x2c>
    16c2:	d5 cf       	rjmp	.-86     	; 0x166e <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    16c4:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    16c8:	88 23       	and	r24, r24
    16ca:	39 f0       	breq	.+14     	; 0x16da <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    16cc:	85 30       	cpi	r24, 0x05	; 5
    16ce:	39 f0       	breq	.+14     	; 0x16de <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16d0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16d4:	83 ff       	sbrs	r24, 3
    16d6:	cb cf       	rjmp	.-106    	; 0x166e <Endpoint_Write_Control_PStream_LE+0x4c>
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16e4:	08 95       	ret

000016e6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    16e6:	98 2f       	mov	r25, r24
    16e8:	97 30       	cpi	r25, 0x07	; 7
    16ea:	58 f5       	brcc	.+86     	; 0x1742 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ec:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    16f0:	98 17       	cp	r25, r24
    16f2:	39 f0       	breq	.+14     	; 0x1702 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    16f4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    16f8:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    16fc:	50 91 f0 00 	lds	r21, 0x00F0
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1702:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1704:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1706:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1708:	21 ff       	sbrs	r18, 1
    170a:	19 c0       	rjmp	.+50     	; 0x173e <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    170c:	30 91 eb 00 	lds	r19, 0x00EB
    1710:	3e 7f       	andi	r19, 0xFE	; 254
    1712:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1716:	30 91 ed 00 	lds	r19, 0x00ED
    171a:	3d 7f       	andi	r19, 0xFD	; 253
    171c:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1720:	30 91 eb 00 	lds	r19, 0x00EB
    1724:	31 60       	ori	r19, 0x01	; 1
    1726:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    172a:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    172e:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1732:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1736:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    173a:	27 ff       	sbrs	r18, 7
    173c:	07 c0       	rjmp	.+14     	; 0x174c <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    173e:	9f 5f       	subi	r25, 0xFF	; 255
    1740:	d3 cf       	rjmp	.-90     	; 0x16e8 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1742:	8f 70       	andi	r24, 0x0F	; 15
    1744:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    174c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    174e:	08 95       	ret

00001750 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1750:	80 91 02 02 	lds	r24, 0x0202
    1754:	87 fd       	sbrc	r24, 7
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1758:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    175c:	80 ff       	sbrs	r24, 0
    175e:	0e c0       	rjmp	.+28     	; 0x177c <Endpoint_ClearStatusStage+0x2c>
    1760:	12 c0       	rjmp	.+36     	; 0x1786 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1762:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1766:	82 fd       	sbrc	r24, 2
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    176a:	80 91 01 02 	lds	r24, 0x0201
    176e:	81 11       	cpse	r24, r1
    1770:	f8 cf       	rjmp	.-16     	; 0x1762 <Endpoint_ClearStatusStage+0x12>
    1772:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1774:	80 91 e8 00 	lds	r24, 0x00E8
    1778:	8b 77       	andi	r24, 0x7B	; 123
    177a:	08 c0       	rjmp	.+16     	; 0x178c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    177c:	80 91 01 02 	lds	r24, 0x0201
    1780:	81 11       	cpse	r24, r1
    1782:	ea cf       	rjmp	.-44     	; 0x1758 <Endpoint_ClearStatusStage+0x8>
    1784:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1786:	80 91 e8 00 	lds	r24, 0x00E8
    178a:	8e 77       	andi	r24, 0x7E	; 126
    178c:	80 93 e8 00 	sts	0x00E8, r24
    1790:	08 95       	ret

00001792 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1792:	80 91 e4 00 	lds	r24, 0x00E4
    1796:	90 91 e5 00 	lds	r25, 0x00E5
    179a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    179c:	20 91 ec 00 	lds	r18, 0x00EC
    17a0:	20 ff       	sbrs	r18, 0
    17a2:	21 c0       	rjmp	.+66     	; 0x17e6 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17a4:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    17a8:	20 fd       	sbrc	r18, 0
    17aa:	21 c0       	rjmp	.+66     	; 0x17ee <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17ac:	20 91 01 02 	lds	r18, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17b0:	22 23       	and	r18, r18
    17b2:	89 f0       	breq	.+34     	; 0x17d6 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17b4:	25 30       	cpi	r18, 0x05	; 5
    17b6:	89 f0       	breq	.+34     	; 0x17da <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    17b8:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    17bc:	25 fd       	sbrc	r18, 5
    17be:	0f c0       	rjmp	.+30     	; 0x17de <Endpoint_WaitUntilReady+0x4c>
    17c0:	20 91 e4 00 	lds	r18, 0x00E4
    17c4:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    17c8:	28 17       	cp	r18, r24
    17ca:	39 07       	cpc	r19, r25
    17cc:	39 f3       	breq	.-50     	; 0x179c <Endpoint_WaitUntilReady+0xa>
    17ce:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17d0:	41 f0       	breq	.+16     	; 0x17e2 <Endpoint_WaitUntilReady+0x50>
    17d2:	c9 01       	movw	r24, r18
    17d4:	e3 cf       	rjmp	.-58     	; 0x179c <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17e6:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    17ea:	22 ff       	sbrs	r18, 2
    17ec:	df cf       	rjmp	.-66     	; 0x17ac <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	08 95       	ret

000017f2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    17f2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17f6:	0e 94 6f 0c 	call	0x18de	; 0x18de <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    17fa:	e0 ee       	ldi	r30, 0xE0	; 224
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	81 60       	ori	r24, 0x01	; 1
    1802:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1804:	e8 ed       	ldi	r30, 0xD8	; 216
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 77       	andi	r24, 0x7F	; 127
    180c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    180e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1810:	a7 ed       	ldi	r26, 0xD7	; 215
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	8c 91       	ld	r24, X
    1816:	8e 7f       	andi	r24, 0xFE	; 254
    1818:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    181a:	80 81       	ld	r24, Z
    181c:	8f 7e       	andi	r24, 0xEF	; 239
    181e:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1820:	10 92 00 02 	sts	0x0200, r1
    1824:	08 95       	ret

00001826 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    182e:	0e 94 67 0c 	call	0x18ce	; 0x18ce <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1832:	0e 94 6f 0c 	call	0x18de	; 0x18de <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1836:	c8 ed       	ldi	r28, 0xD8	; 216
    1838:	d0 e0       	ldi	r29, 0x00	; 0
    183a:	88 81       	ld	r24, Y
    183c:	8f 77       	andi	r24, 0x7F	; 127
    183e:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1840:	88 81       	ld	r24, Y
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1846:	88 81       	ld	r24, Y
    1848:	8f 7d       	andi	r24, 0xDF	; 223
    184a:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    184c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    184e:	10 92 01 02 	sts	0x0201, r1
	USB_Device_ConfigurationNumber  = 0;
    1852:	10 92 fd 01 	sts	0x01FD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1856:	10 92 ff 01 	sts	0x01FF, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    185a:	10 92 fe 01 	sts	0x01FE, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    185e:	00 ee       	ldi	r16, 0xE0	; 224
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	f8 01       	movw	r30, r16
    1864:	80 81       	ld	r24, Z
    1866:	8b 7f       	andi	r24, 0xFB	; 251
    1868:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    186a:	88 81       	ld	r24, Y
    186c:	81 60       	ori	r24, 0x01	; 1
    186e:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1870:	42 e0       	ldi	r20, 0x02	; 2
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    187a:	e1 ee       	ldi	r30, 0xE1	; 225
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8e 7f       	andi	r24, 0xFE	; 254
    1882:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1884:	e2 ee       	ldi	r30, 0xE2	; 226
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	81 60       	ori	r24, 0x01	; 1
    188c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    188e:	80 81       	ld	r24, Z
    1890:	88 60       	ori	r24, 0x08	; 8
    1892:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1894:	f8 01       	movw	r30, r16
    1896:	80 81       	ld	r24, Z
    1898:	8e 7f       	andi	r24, 0xFE	; 254
    189a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    189c:	88 81       	ld	r24, Y
    189e:	80 61       	ori	r24, 0x10	; 16
    18a0:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18ac:	e8 ed       	ldi	r30, 0xD8	; 216
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7e       	andi	r24, 0xEF	; 239
    18b4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    18b6:	e7 ed       	ldi	r30, 0xD7	; 215
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	81 60       	ori	r24, 0x01	; 1
    18be:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    18c0:	84 e0       	ldi	r24, 0x04	; 4
    18c2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	80 93 00 02 	sts	0x0200, r24

	USB_ResetInterface();
    18ca:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <USB_ResetInterface>

000018ce <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    18ce:	e8 ed       	ldi	r30, 0xD8	; 216
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8e 7f       	andi	r24, 0xFE	; 254
    18d6:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    18d8:	10 92 e2 00 	sts	0x00E2, r1
    18dc:	08 95       	ret

000018de <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    18de:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    18e2:	10 92 e1 00 	sts	0x00E1, r1
    18e6:	08 95       	ret

000018e8 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	2f 93       	push	r18
    18f4:	3f 93       	push	r19
    18f6:	4f 93       	push	r20
    18f8:	5f 93       	push	r21
    18fa:	6f 93       	push	r22
    18fc:	7f 93       	push	r23
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	af 93       	push	r26
    1904:	bf 93       	push	r27
    1906:	ef 93       	push	r30
    1908:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    190a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    190e:	82 ff       	sbrs	r24, 2
    1910:	0b c0       	rjmp	.+22     	; 0x1928 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1912:	80 91 e2 00 	lds	r24, 0x00E2
    1916:	82 ff       	sbrs	r24, 2
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    191a:	80 91 e1 00 	lds	r24, 0x00E1
    191e:	8b 7f       	andi	r24, 0xFB	; 251
    1920:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1924:	0e 94 7f 08 	call	0x10fe	; 0x10fe <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1928:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    192c:	80 ff       	sbrs	r24, 0
    192e:	1f c0       	rjmp	.+62     	; 0x196e <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1930:	80 91 d8 00 	lds	r24, 0x00D8
    1934:	80 ff       	sbrs	r24, 0
    1936:	1b c0       	rjmp	.+54     	; 0x196e <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1938:	80 91 da 00 	lds	r24, 0x00DA
    193c:	8e 7f       	andi	r24, 0xFE	; 254
    193e:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1942:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1946:	80 ff       	sbrs	r24, 0
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    194a:	80 e1       	ldi	r24, 0x10	; 16
    194c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    194e:	82 e1       	ldi	r24, 0x12	; 18
    1950:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1952:	09 b4       	in	r0, 0x29	; 41
    1954:	00 fe       	sbrs	r0, 0
    1956:	fd cf       	rjmp	.-6      	; 0x1952 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	80 93 01 02 	sts	0x0201, r24
			EVENT_USB_Device_Connect();
    195e:	0e 94 65 08 	call	0x10ca	; 0x10ca <EVENT_USB_Device_Connect>
    1962:	05 c0       	rjmp	.+10     	; 0x196e <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1964:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1966:	10 92 01 02 	sts	0x0201, r1
			EVENT_USB_Device_Disconnect();
    196a:	0e 94 77 08 	call	0x10ee	; 0x10ee <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    196e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1972:	80 ff       	sbrs	r24, 0
    1974:	19 c0       	rjmp	.+50     	; 0x19a8 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1976:	80 91 e2 00 	lds	r24, 0x00E2
    197a:	80 ff       	sbrs	r24, 0
    197c:	15 c0       	rjmp	.+42     	; 0x19a8 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    197e:	80 91 e2 00 	lds	r24, 0x00E2
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1988:	80 91 e2 00 	lds	r24, 0x00E2
    198c:	80 61       	ori	r24, 0x10	; 16
    198e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1992:	80 91 d8 00 	lds	r24, 0x00D8
    1996:	80 62       	ori	r24, 0x20	; 32
    1998:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    199c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	80 93 01 02 	sts	0x0201, r24
		EVENT_USB_Device_Suspend();
    19a4:	0e 94 99 09 	call	0x1332	; 0x1332 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    19a8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    19ac:	84 ff       	sbrs	r24, 4
    19ae:	30 c0       	rjmp	.+96     	; 0x1a10 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    19b0:	80 91 e2 00 	lds	r24, 0x00E2
    19b4:	84 ff       	sbrs	r24, 4
    19b6:	2c c0       	rjmp	.+88     	; 0x1a10 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19b8:	80 e1       	ldi	r24, 0x10	; 16
    19ba:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19bc:	82 e1       	ldi	r24, 0x12	; 18
    19be:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    19c0:	09 b4       	in	r0, 0x29	; 41
    19c2:	00 fe       	sbrs	r0, 0
    19c4:	fd cf       	rjmp	.-6      	; 0x19c0 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    19c6:	80 91 d8 00 	lds	r24, 0x00D8
    19ca:	8f 7d       	andi	r24, 0xDF	; 223
    19cc:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    19d0:	80 91 e1 00 	lds	r24, 0x00E1
    19d4:	8f 7e       	andi	r24, 0xEF	; 239
    19d6:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    19da:	80 91 e2 00 	lds	r24, 0x00E2
    19de:	8f 7e       	andi	r24, 0xEF	; 239
    19e0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    19e4:	80 91 e2 00 	lds	r24, 0x00E2
    19e8:	81 60       	ori	r24, 0x01	; 1
    19ea:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    19ee:	80 91 fd 01 	lds	r24, 0x01FD
    19f2:	88 23       	and	r24, r24
    19f4:	11 f0       	breq	.+4      	; 0x19fa <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19fa:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    19fe:	87 ff       	sbrs	r24, 7
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <__vector_10+0x11e>
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <__vector_10+0x120>
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 01 02 	sts	0x0201, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1a0c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1a10:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1a14:	83 ff       	sbrs	r24, 3
    1a16:	29 c0       	rjmp	.+82     	; 0x1a6a <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1a18:	80 91 e2 00 	lds	r24, 0x00E2
    1a1c:	83 ff       	sbrs	r24, 3
    1a1e:	25 c0       	rjmp	.+74     	; 0x1a6a <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1a20:	80 91 e1 00 	lds	r24, 0x00E1
    1a24:	87 7f       	andi	r24, 0xF7	; 247
    1a26:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	80 93 01 02 	sts	0x0201, r24
		USB_Device_ConfigurationNumber = 0;
    1a30:	10 92 fd 01 	sts	0x01FD, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a34:	80 91 e1 00 	lds	r24, 0x00E1
    1a38:	8e 7f       	andi	r24, 0xFE	; 254
    1a3a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a3e:	80 91 e2 00 	lds	r24, 0x00E2
    1a42:	8e 7f       	andi	r24, 0xFE	; 254
    1a44:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a48:	80 91 e2 00 	lds	r24, 0x00E2
    1a4c:	80 61       	ori	r24, 0x10	; 16
    1a4e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a52:	42 e0       	ldi	r20, 0x02	; 2
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1a5c:	80 91 f0 00 	lds	r24, 0x00F0
    1a60:	88 60       	ori	r24, 0x08	; 8
    1a62:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1a66:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	cf 93       	push	r28
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ab0:	c0 91 e9 00 	lds	r28, 0x00E9
    1ab4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ab6:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aba:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1abe:	80 91 f0 00 	lds	r24, 0x00F0
    1ac2:	87 7f       	andi	r24, 0xF7	; 247
    1ac4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ac8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1aca:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <USB_Device_ProcessControlRequest>
    1ace:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ad2:	80 91 f0 00 	lds	r24, 0x00F0
    1ad6:	88 60       	ori	r24, 0x08	; 8
    1ad8:	80 93 f0 00 	sts	0x00F0, r24
    1adc:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ae0:	ff 91       	pop	r31
    1ae2:	ef 91       	pop	r30
    1ae4:	cf 91       	pop	r28
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	aa 97       	sbiw	r28, 0x2a	; 42
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	e2 e0       	ldi	r30, 0x02	; 2
    1b1c:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b1e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1b22:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1b24:	22 e0       	ldi	r18, 0x02	; 2
    1b26:	ea 30       	cpi	r30, 0x0A	; 10
    1b28:	f2 07       	cpc	r31, r18
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1b2c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b30:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1b34:	83 ff       	sbrs	r24, 3
    1b36:	1c c1       	rjmp	.+568    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b38:	20 91 02 02 	lds	r18, 0x0202

		switch (USB_ControlRequest.bRequest)
    1b3c:	30 91 03 02 	lds	r19, 0x0203
    1b40:	83 2f       	mov	r24, r19
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	8a 30       	cpi	r24, 0x0A	; 10
    1b46:	91 05       	cpc	r25, r1
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <USB_Device_ProcessControlRequest+0x48>
    1b4a:	12 c1       	rjmp	.+548    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	ea 5a       	subi	r30, 0xAA	; 170
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b56:	20 38       	cpi	r18, 0x80	; 128
    1b58:	81 f0       	breq	.+32     	; 0x1b7a <USB_Device_ProcessControlRequest+0x76>
    1b5a:	22 38       	cpi	r18, 0x82	; 130
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <USB_Device_ProcessControlRequest+0x5c>
    1b5e:	08 c1       	rjmp	.+528    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b60:	80 91 06 02 	lds	r24, 0x0206
    1b64:	8f 70       	andi	r24, 0x0F	; 15
    1b66:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b6a:	80 91 eb 00 	lds	r24, 0x00EB
    1b6e:	85 fb       	bst	r24, 5
    1b70:	88 27       	eor	r24, r24
    1b72:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b74:	10 92 e9 00 	sts	0x00E9, r1
    1b78:	06 c0       	rjmp	.+12     	; 0x1b86 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1b7a:	80 91 fe 01 	lds	r24, 0x01FE
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1b7e:	90 91 ff 01 	lds	r25, 0x01FF
    1b82:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1b84:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b86:	90 91 e8 00 	lds	r25, 0x00E8
    1b8a:	97 7f       	andi	r25, 0xF7	; 247
    1b8c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1b90:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1b94:	10 92 f1 00 	sts	0x00F1, r1
    1b98:	c5 c0       	rjmp	.+394    	; 0x1d24 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b9a:	82 2f       	mov	r24, r18
    1b9c:	8d 7f       	andi	r24, 0xFD	; 253
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <USB_Device_ProcessControlRequest+0x9e>
    1ba0:	e7 c0       	rjmp	.+462    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1ba2:	22 23       	and	r18, r18
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <USB_Device_ProcessControlRequest+0xa8>
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	61 f0       	breq	.+24     	; 0x1bc2 <USB_Device_ProcessControlRequest+0xbe>
    1baa:	e2 c0       	rjmp	.+452    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1bac:	80 91 04 02 	lds	r24, 0x0204
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <USB_Device_ProcessControlRequest+0xb2>
    1bb4:	dd c0       	rjmp	.+442    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1bb6:	33 30       	cpi	r19, 0x03	; 3
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <USB_Device_ProcessControlRequest+0xb8>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	80 93 ff 01 	sts	0x01FF, r24
    1bc0:	28 c0       	rjmp	.+80     	; 0x1c12 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1bc2:	80 91 04 02 	lds	r24, 0x0204
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	24 c0       	rjmp	.+72     	; 0x1c12 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1bca:	20 91 06 02 	lds	r18, 0x0206
    1bce:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <USB_Device_ProcessControlRequest+0xd0>
    1bd2:	ce c0       	rjmp	.+412    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bd4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1bd8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1bdc:	80 ff       	sbrs	r24, 0
    1bde:	19 c0       	rjmp	.+50     	; 0x1c12 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1be0:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1be4:	33 30       	cpi	r19, 0x03	; 3
    1be6:	11 f4       	brne	.+4      	; 0x1bec <USB_Device_ProcessControlRequest+0xe8>
    1be8:	80 62       	ori	r24, 0x20	; 32
    1bea:	11 c0       	rjmp	.+34     	; 0x1c0e <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1bec:	80 61       	ori	r24, 0x10	; 16
    1bee:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	01 c0       	rjmp	.+2      	; 0x1bfc <USB_Device_ProcessControlRequest+0xf8>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	0a 94       	dec	r0
    1bfe:	ea f7       	brpl	.-6      	; 0x1bfa <USB_Device_ProcessControlRequest+0xf6>
    1c00:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1c04:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c08:	80 91 eb 00 	lds	r24, 0x00EB
    1c0c:	88 60       	ori	r24, 0x08	; 8
    1c0e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c12:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c16:	80 91 e8 00 	lds	r24, 0x00E8
    1c1a:	87 7f       	andi	r24, 0xF7	; 247
    1c1c:	86 c0       	rjmp	.+268    	; 0x1d2a <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c1e:	21 11       	cpse	r18, r1
    1c20:	a7 c0       	rjmp	.+334    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1c22:	10 91 04 02 	lds	r17, 0x0204
    1c26:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1c28:	80 91 e3 00 	lds	r24, 0x00E3
    1c2c:	80 78       	andi	r24, 0x80	; 128
    1c2e:	81 2b       	or	r24, r17
    1c30:	80 93 e3 00 	sts	0x00E3, r24
    1c34:	80 91 e8 00 	lds	r24, 0x00E8
    1c38:	87 7f       	andi	r24, 0xF7	; 247
    1c3a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c3e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c42:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1c46:	80 ff       	sbrs	r24, 0
    1c48:	fc cf       	rjmp	.-8      	; 0x1c42 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1c4a:	80 91 e3 00 	lds	r24, 0x00E3
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1c54:	11 23       	and	r17, r17
    1c56:	11 f0       	breq	.+4      	; 0x1c5c <USB_Device_ProcessControlRequest+0x158>
    1c58:	83 e0       	ldi	r24, 0x03	; 3
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <USB_Device_ProcessControlRequest+0x15a>
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	80 93 01 02 	sts	0x0201, r24
    1c62:	86 c0       	rjmp	.+268    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c64:	20 58       	subi	r18, 0x80	; 128
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <USB_Device_ProcessControlRequest+0x168>
    1c6a:	82 c0       	rjmp	.+260    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1c6c:	80 91 04 02 	lds	r24, 0x0204
    1c70:	90 91 05 02 	lds	r25, 0x0205
    1c74:	8c 3d       	cpi	r24, 0xDC	; 220
    1c76:	23 e0       	ldi	r18, 0x03	; 3
    1c78:	92 07       	cpc	r25, r18
    1c7a:	79 f5       	brne	.+94     	; 0x1cda <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1c80:	8a e2       	ldi	r24, 0x2A	; 42
    1c82:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1c84:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1c86:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1c88:	de 01       	movw	r26, r28
    1c8a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1c8e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1c90:	51 e2       	ldi	r21, 0x21	; 33
    1c92:	e3 2f       	mov	r30, r19
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	50 93 57 00 	sts	0x0057, r21
    1c9a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1c9c:	20 ff       	sbrs	r18, 0
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1ca0:	e2 95       	swap	r30
    1ca2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1ca4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1ca6:	ef 70       	andi	r30, 0x0F	; 15
    1ca8:	8e 2f       	mov	r24, r30
    1caa:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1cac:	ea 30       	cpi	r30, 0x0A	; 10
    1cae:	10 f0       	brcs	.+4      	; 0x1cb4 <USB_Device_ProcessControlRequest+0x1b0>
    1cb0:	c7 96       	adiw	r24, 0x37	; 55
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <USB_Device_ProcessControlRequest+0x1b2>
    1cb4:	c0 96       	adiw	r24, 0x30	; 48
    1cb6:	8d 93       	st	X+, r24
    1cb8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1cba:	2f 5f       	subi	r18, 0xFF	; 255
    1cbc:	24 31       	cpi	r18, 0x14	; 20
    1cbe:	49 f7       	brne	.-46     	; 0x1c92 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1cc0:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cc2:	80 91 e8 00 	lds	r24, 0x00E8
    1cc6:	87 7f       	andi	r24, 0xF7	; 247
    1cc8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ccc:	6a e2       	ldi	r22, 0x2A	; 42
    1cce:	70 e0       	ldi	r23, 0x00	; 0
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <Endpoint_Write_Control_Stream_LE>
    1cd8:	14 c0       	rjmp	.+40     	; 0x1d02 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1cda:	ae 01       	movw	r20, r28
    1cdc:	4f 5f       	subi	r20, 0xFF	; 255
    1cde:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce0:	60 91 06 02 	lds	r22, 0x0206
    1ce4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <CALLBACK_USB_GetDescriptor>
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	09 f4       	brne	.+2      	; 0x1cee <USB_Device_ProcessControlRequest+0x1ea>
    1cec:	41 c0       	rjmp	.+130    	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
    1cee:	20 91 e8 00 	lds	r18, 0x00E8
    1cf2:	27 7f       	andi	r18, 0xF7	; 247
    1cf4:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	0e 94 11 0b 	call	0x1622	; 0x1622 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d02:	80 91 e8 00 	lds	r24, 0x00E8
    1d06:	8b 77       	andi	r24, 0x7B	; 123
    1d08:	80 93 e8 00 	sts	0x00E8, r24
    1d0c:	31 c0       	rjmp	.+98     	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1d0e:	20 38       	cpi	r18, 0x80	; 128
    1d10:	79 f5       	brne	.+94     	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d12:	80 91 e8 00 	lds	r24, 0x00E8
    1d16:	87 7f       	andi	r24, 0xF7	; 247
    1d18:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1d1c:	80 91 fd 01 	lds	r24, 0x01FD
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d20:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d24:	80 91 e8 00 	lds	r24, 0x00E8
    1d28:	8e 77       	andi	r24, 0x7E	; 126
    1d2a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1d2e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Endpoint_ClearStatusStage>
    1d32:	1e c0       	rjmp	.+60     	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d34:	21 11       	cpse	r18, r1
    1d36:	1c c0       	rjmp	.+56     	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1d38:	90 91 04 02 	lds	r25, 0x0204
    1d3c:	92 30       	cpi	r25, 0x02	; 2
    1d3e:	c0 f4       	brcc	.+48     	; 0x1d70 <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d40:	80 91 e8 00 	lds	r24, 0x00E8
    1d44:	87 7f       	andi	r24, 0xF7	; 247
    1d46:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1d4a:	90 93 fd 01 	sts	0x01FD, r25

	Endpoint_ClearStatusStage();
    1d4e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1d52:	80 91 fd 01 	lds	r24, 0x01FD
    1d56:	81 11       	cpse	r24, r1
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d5a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1d5e:	87 ff       	sbrs	r24, 7
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <USB_Device_ProcessControlRequest+0x262>
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <USB_Device_ProcessControlRequest+0x264>
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	80 93 01 02 	sts	0x0201, r24

	EVENT_USB_Device_ConfigurationChanged();
    1d6c:	0e 94 bf 08 	call	0x117e	; 0x117e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d70:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1d74:	83 ff       	sbrs	r24, 3
    1d76:	0a c0       	rjmp	.+20     	; 0x1d8c <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d78:	80 91 e8 00 	lds	r24, 0x00E8
    1d7c:	87 7f       	andi	r24, 0xF7	; 247
    1d7e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d82:	80 91 eb 00 	lds	r24, 0x00EB
    1d86:	80 62       	ori	r24, 0x20	; 32
    1d88:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1d8c:	aa 96       	adiw	r28, 0x2a	; 42
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	08 95       	ret

00001da0 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1da0:	90 93 7d 01 	sts	0x017D, r25
    1da4:	80 93 7c 01 	sts	0x017C, r24
    1da8:	08 95       	ret

00001daa <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1daa:	e0 91 7c 01 	lds	r30, 0x017C
    1dae:	f0 91 7d 01 	lds	r31, 0x017D
    1db2:	30 97       	sbiw	r30, 0x00	; 0
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1db6:	01 90       	ld	r0, Z+
    1db8:	f0 81       	ld	r31, Z
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	09 94       	ijmp
}
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	08 95       	ret

00001dc2 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	8c 01       	movw	r16, r24
    if (!driver) return;
    1dce:	e0 91 7c 01 	lds	r30, 0x017C
    1dd2:	f0 91 7d 01 	lds	r31, 0x017D
    1dd6:	30 97       	sbiw	r30, 0x00	; 0
    1dd8:	99 f1       	breq	.+102    	; 0x1e40 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    1dda:	02 80       	ldd	r0, Z+2	; 0x02
    1ddc:	f3 81       	ldd	r31, Z+3	; 0x03
    1dde:	e0 2d       	mov	r30, r0
    1de0:	09 95       	icall

    if (debug_keyboard) {
    1de2:	80 91 ec 01 	lds	r24, 0x01EC
    1de6:	82 ff       	sbrs	r24, 2
    1de8:	2b c0       	rjmp	.+86     	; 0x1e40 <host_keyboard_send+0x7e>
        dprint("keyboard: ");
    1dea:	80 ff       	sbrs	r24, 0
    1dec:	04 c0       	rjmp	.+8      	; 0x1df6 <host_keyboard_send+0x34>
    1dee:	8f e9       	ldi	r24, 0x9F	; 159
    1df0:	93 e0       	ldi	r25, 0x03	; 3
    1df2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    1df6:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1df8:	80 e2       	ldi	r24, 0x20	; 32
    1dfa:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1dfc:	09 e9       	ldi	r16, 0x99	; 153
    1dfe:	13 e0       	ldi	r17, 0x03	; 3
    1e00:	80 91 ec 01 	lds	r24, 0x01EC
    1e04:	80 ff       	sbrs	r24, 0
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <host_keyboard_send+0x5c>
    1e08:	88 81       	ld	r24, Y
    1e0a:	1f 92       	push	r1
    1e0c:	8f 93       	push	r24
    1e0e:	1f 93       	push	r17
    1e10:	0f 93       	push	r16
    1e12:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	fa 94       	dec	r15
    1e20:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1e22:	f1 10       	cpse	r15, r1
    1e24:	ed cf       	rjmp	.-38     	; 0x1e00 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1e26:	80 91 ec 01 	lds	r24, 0x01EC
    1e2a:	80 ff       	sbrs	r24, 0
    1e2c:	09 c0       	rjmp	.+18     	; 0x1e40 <host_keyboard_send+0x7e>
    1e2e:	87 e9       	ldi	r24, 0x97	; 151
    1e30:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1e3c:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <xputs>
    }
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	08 95       	ret

00001e4c <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    1e4c:	e0 91 7c 01 	lds	r30, 0x017C
    1e50:	f0 91 7d 01 	lds	r31, 0x017D
    1e54:	30 97       	sbiw	r30, 0x00	; 0
    1e56:	21 f0       	breq	.+8      	; 0x1e60 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1e58:	04 80       	ldd	r0, Z+4	; 0x04
    1e5a:	f5 81       	ldd	r31, Z+5	; 0x05
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	09 94       	ijmp
    1e60:	08 95       	ret

00001e62 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    1e68:	80 91 7a 01 	lds	r24, 0x017A
    1e6c:	90 91 7b 01 	lds	r25, 0x017B
    1e70:	c8 17       	cp	r28, r24
    1e72:	d9 07       	cpc	r29, r25
    1e74:	09 f1       	breq	.+66     	; 0x1eb8 <host_system_send+0x56>
    last_system_report = report;
    1e76:	d0 93 7b 01 	sts	0x017B, r29
    1e7a:	c0 93 7a 01 	sts	0x017A, r28

    if (!driver) return;
    1e7e:	e0 91 7c 01 	lds	r30, 0x017C
    1e82:	f0 91 7d 01 	lds	r31, 0x017D
    1e86:	30 97       	sbiw	r30, 0x00	; 0
    1e88:	b9 f0       	breq	.+46     	; 0x1eb8 <host_system_send+0x56>
    (*driver->send_system)(report);
    1e8a:	06 80       	ldd	r0, Z+6	; 0x06
    1e8c:	f7 81       	ldd	r31, Z+7	; 0x07
    1e8e:	e0 2d       	mov	r30, r0
    1e90:	ce 01       	movw	r24, r28
    1e92:	09 95       	icall

    if (debug_keyboard) {
    1e94:	80 91 ec 01 	lds	r24, 0x01EC
    1e98:	82 ff       	sbrs	r24, 2
    1e9a:	0e c0       	rjmp	.+28     	; 0x1eb8 <host_system_send+0x56>
        dprintf("system: %04X\n", report);
    1e9c:	80 ff       	sbrs	r24, 0
    1e9e:	0c c0       	rjmp	.+24     	; 0x1eb8 <host_system_send+0x56>
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	89 e8       	ldi	r24, 0x89	; 137
    1ea6:	93 e0       	ldi	r25, 0x03	; 3
    1ea8:	9f 93       	push	r25
    1eaa:	8f 93       	push	r24
    1eac:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    }
}
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	08 95       	ret

00001ebe <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    1ec4:	80 91 78 01 	lds	r24, 0x0178
    1ec8:	90 91 79 01 	lds	r25, 0x0179
    1ecc:	c8 17       	cp	r28, r24
    1ece:	d9 07       	cpc	r29, r25
    1ed0:	09 f1       	breq	.+66     	; 0x1f14 <host_consumer_send+0x56>
    last_consumer_report = report;
    1ed2:	d0 93 79 01 	sts	0x0179, r29
    1ed6:	c0 93 78 01 	sts	0x0178, r28

    if (!driver) return;
    1eda:	e0 91 7c 01 	lds	r30, 0x017C
    1ede:	f0 91 7d 01 	lds	r31, 0x017D
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	b9 f0       	breq	.+46     	; 0x1f14 <host_consumer_send+0x56>
    (*driver->send_consumer)(report);
    1ee6:	00 84       	ldd	r0, Z+8	; 0x08
    1ee8:	f1 85       	ldd	r31, Z+9	; 0x09
    1eea:	e0 2d       	mov	r30, r0
    1eec:	ce 01       	movw	r24, r28
    1eee:	09 95       	icall

    if (debug_keyboard) {
    1ef0:	80 91 ec 01 	lds	r24, 0x01EC
    1ef4:	82 ff       	sbrs	r24, 2
    1ef6:	0e c0       	rjmp	.+28     	; 0x1f14 <host_consumer_send+0x56>
        dprintf("consumer: %04X\n", report);
    1ef8:	80 ff       	sbrs	r24, 0
    1efa:	0c c0       	rjmp	.+24     	; 0x1f14 <host_consumer_send+0x56>
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	89 e7       	ldi	r24, 0x79	; 121
    1f02:	93 e0       	ldi	r25, 0x03	; 3
    1f04:	9f 93       	push	r25
    1f06:	8f 93       	push	r24
    1f08:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    }
}
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1f1a:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <matrix_setup>

00001f1e <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1f1e:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <timer_init>
    matrix_init();
    1f22:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <matrix_init>

00001f26 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1f26:	cf 92       	push	r12
    1f28:	df 92       	push	r13
    1f2a:	ef 92       	push	r14
    1f2c:	ff 92       	push	r15
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <keyboard_task+0x12>
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <keyboard_task+0x14>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <keyboard_task+0x16>
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f40:	0e 94 43 06 	call	0xc86	; 0xc86 <matrix_scan>
    1f44:	3f e7       	ldi	r19, 0x7F	; 127
    1f46:	e3 2e       	mov	r14, r19
    1f48:	31 e0       	ldi	r19, 0x01	; 1
    1f4a:	f3 2e       	mov	r15, r19
    1f4c:	00 e0       	ldi	r16, 0x00	; 0
    1f4e:	10 e0       	ldi	r17, 0x00	; 0
    1f50:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1f52:	80 2f       	mov	r24, r16
    1f54:	0e 94 11 07 	call	0xe22	; 0xe22 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    1f58:	f7 01       	movw	r30, r14
    1f5a:	d1 90       	ld	r13, Z+
    1f5c:	7f 01       	movw	r14, r30
    1f5e:	d8 26       	eor	r13, r24
        if (matrix_change) {
    1f60:	b1 f4       	brne	.+44     	; 0x1f8e <keyboard_task+0x68>
    1f62:	0f 5f       	subi	r16, 0xFF	; 255
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1f66:	08 30       	cpi	r16, 0x08	; 8
    1f68:	11 05       	cpc	r17, r1
    1f6a:	91 f7       	brne	.-28     	; 0x1f50 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1f6c:	8f ef       	ldi	r24, 0xFF	; 255
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	8a 83       	std	Y+2, r24	; 0x02
    1f72:	1b 82       	std	Y+3, r1	; 0x03
    1f74:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    1f78:	81 60       	ori	r24, 0x01	; 1
    1f7a:	78 2f       	mov	r23, r24
    1f7c:	9d 83       	std	Y+5, r25	; 0x05
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
    1f80:	49 81       	ldd	r20, Y+1	; 0x01
    1f82:	5a 81       	ldd	r21, Y+2	; 0x02
    1f84:	6b 81       	ldd	r22, Y+3	; 0x03
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	0e 94 88 10 	call	0x2110	; 0x2110 <action_exec>
    1f8c:	48 c0       	rjmp	.+144    	; 0x201e <keyboard_task+0xf8>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1f8e:	90 91 ec 01 	lds	r25, 0x01EC
    1f92:	91 ff       	sbrs	r25, 1
    1f94:	04 c0       	rjmp	.+8      	; 0x1f9e <keyboard_task+0x78>
    1f96:	8e 83       	std	Y+6, r24	; 0x06
    1f98:	0e 94 54 10 	call	0x20a8	; 0x20a8 <matrix_print>
    1f9c:	8e 81       	ldd	r24, Y+6	; 0x06
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1fa2:	4d 2d       	mov	r20, r13
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	92 2f       	mov	r25, r18
    1fa8:	ba 01       	movw	r22, r20
    1faa:	02 2e       	mov	r0, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <keyboard_task+0x8c>
    1fae:	75 95       	asr	r23
    1fb0:	67 95       	ror	r22
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <keyboard_task+0x88>
    1fb6:	60 ff       	sbrs	r22, 0
    1fb8:	2c c0       	rjmp	.+88     	; 0x2012 <keyboard_task+0xec>
                    keyevent_t e = (keyevent_t){
    1fba:	29 83       	std	Y+1, r18	; 0x01
    1fbc:	ca 82       	std	Y+2, r12	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1fbe:	ee 24       	eor	r14, r14
    1fc0:	e3 94       	inc	r14
    1fc2:	f1 2c       	mov	r15, r1
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <keyboard_task+0xa4>
    1fc6:	ee 0c       	add	r14, r14
    1fc8:	ff 1c       	adc	r15, r15
    1fca:	9a 95       	dec	r25
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <keyboard_task+0xa0>
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	8e 21       	and	r24, r14
    1fd2:	9f 21       	and	r25, r15
    1fd4:	21 e0       	ldi	r18, 0x01	; 1
    1fd6:	89 2b       	or	r24, r25
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <keyboard_task+0xb6>
    1fda:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    1fdc:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1fde:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    1fe2:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    1fe4:	78 2f       	mov	r23, r24
    1fe6:	9d 83       	std	Y+5, r25	; 0x05
    1fe8:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    1fea:	49 81       	ldd	r20, Y+1	; 0x01
    1fec:	5a 81       	ldd	r21, Y+2	; 0x02
    1fee:	6b 81       	ldd	r22, Y+3	; 0x03
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	0e 94 88 10 	call	0x2110	; 0x2110 <action_exec>
                    hook_matrix_change(e);
    1ff6:	49 81       	ldd	r20, Y+1	; 0x01
    1ff8:	5a 81       	ldd	r21, Y+2	; 0x02
    1ffa:	6b 81       	ldd	r22, Y+3	; 0x03
    1ffc:	7c 81       	ldd	r23, Y+4	; 0x04
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	0e 94 6f 1b 	call	0x36de	; 0x36de <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2004:	f8 01       	movw	r30, r16
    2006:	e1 58       	subi	r30, 0x81	; 129
    2008:	fe 4f       	sbci	r31, 0xFE	; 254
    200a:	80 81       	ld	r24, Z
    200c:	8e 25       	eor	r24, r14
    200e:	80 83       	st	Z, r24
    2010:	06 c0       	rjmp	.+12     	; 0x201e <keyboard_task+0xf8>
    2012:	2f 5f       	subi	r18, 0xFF	; 255
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2016:	28 30       	cpi	r18, 0x08	; 8
    2018:	31 05       	cpc	r19, r1
    201a:	29 f6       	brne	.-118    	; 0x1fa6 <keyboard_task+0x80>
    201c:	a2 cf       	rjmp	.-188    	; 0x1f62 <keyboard_task+0x3c>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    201e:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2022:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2026:	10 91 7e 01 	lds	r17, 0x017E
    202a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <host_keyboard_leds>
    202e:	18 17       	cp	r17, r24
    2030:	41 f1       	breq	.+80     	; 0x2082 <keyboard_task+0x15c>
        led_status = host_keyboard_leds();
    2032:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <host_keyboard_leds>
    2036:	80 93 7e 01 	sts	0x017E, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    203a:	90 91 ec 01 	lds	r25, 0x01EC
    203e:	92 ff       	sbrs	r25, 2
    2040:	0e c0       	rjmp	.+28     	; 0x205e <keyboard_task+0x138>
    2042:	90 ff       	sbrs	r25, 0
    2044:	0c c0       	rjmp	.+24     	; 0x205e <keyboard_task+0x138>
    2046:	1f 92       	push	r1
    2048:	8f 93       	push	r24
    204a:	8a ea       	ldi	r24, 0xAA	; 170
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	9f 93       	push	r25
    2050:	8f 93       	push	r24
    2052:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    205e:	80 91 7e 01 	lds	r24, 0x017E
    }
}
    2062:	26 96       	adiw	r28, 0x06	; 6
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	cf 90       	pop	r12

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    207e:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <hook_keyboard_leds_change>
    }
}
    2082:	26 96       	adiw	r28, 0x06	; 6
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	df 90       	pop	r13
    209c:	cf 90       	pop	r12
    209e:	08 95       	ret

000020a0 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    20a0:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <led_set>

000020a4 <matrix_clear>:
    return MATRIX_COLS;
}

__attribute__ ((weak))
void matrix_clear(void)
{
    20a4:	08 95       	ret

000020a6 <matrix_setup>:
}

__attribute__ ((weak))
void matrix_setup(void) {}
    20a6:	08 95       	ret

000020a8 <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    20b4:	83 ec       	ldi	r24, 0xC3	; 195
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    20bc:	c0 e0       	ldi	r28, 0x00	; 0
    20be:	d0 e0       	ldi	r29, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    20c0:	8d e2       	ldi	r24, 0x2D	; 45
    20c2:	e8 2e       	mov	r14, r24
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	f8 2e       	mov	r15, r24
    20c8:	05 eb       	ldi	r16, 0xB5	; 181
    20ca:	13 e0       	ldi	r17, 0x03	; 3
    20cc:	8c 2f       	mov	r24, r28
    20ce:	0e 94 11 07 	call	0xe22	; 0xe22 <matrix_get_row>
    20d2:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <bitrev>
    20d6:	ff 92       	push	r15
    20d8:	ef 92       	push	r14
    20da:	1f 92       	push	r1
    20dc:	8f 93       	push	r24
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	1f 93       	push	r17
    20e4:	0f 93       	push	r16
    20e6:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    20ea:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    20ec:	8d b7       	in	r24, 0x3d	; 61
    20ee:	9e b7       	in	r25, 0x3e	; 62
    20f0:	08 96       	adiw	r24, 0x08	; 8
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	9e bf       	out	0x3e, r25	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	8d bf       	out	0x3d, r24	; 61
    20fc:	c8 30       	cpi	r28, 0x08	; 8
    20fe:	d1 05       	cpc	r29, r1
    2100:	29 f7       	brne	.-54     	; 0x20cc <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	0f 91       	pop	r16
    210a:	ff 90       	pop	r15
    210c:	ef 90       	pop	r14
    210e:	08 95       	ret

00002110 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	2b 97       	sbiw	r28, 0x0b	; 11
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	4f 83       	std	Y+7, r20	; 0x07
    2126:	58 87       	std	Y+8, r21	; 0x08
    2128:	69 87       	std	Y+9, r22	; 0x09
    212a:	7a 87       	std	Y+10, r23	; 0x0a
    212c:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    212e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2130:	9b 85       	ldd	r25, Y+11	; 0x0b
    2132:	89 2b       	or	r24, r25
    2134:	31 f0       	breq	.+12     	; 0x2142 <action_exec+0x32>
    2136:	5f 3f       	cpi	r21, 0xFF	; 255
    2138:	11 f0       	breq	.+4      	; 0x213e <action_exec+0x2e>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <action_exec+0x34>
    213e:	4f 3f       	cpi	r20, 0xFF	; 255
    2140:	e1 f7       	brne	.-8      	; 0x213a <action_exec+0x2a>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    2144:	81 11       	cpse	r24, r1
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2148:	4f 81       	ldd	r20, Y+7	; 0x07
    214a:	58 85       	ldd	r21, Y+8	; 0x08
    214c:	69 85       	ldd	r22, Y+9	; 0x09
    214e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2150:	8b 85       	ldd	r24, Y+11	; 0x0b
    2152:	0e 94 6f 1b 	call	0x36de	; 0x36de <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2156:	de 01       	movw	r26, r28
    2158:	11 96       	adiw	r26, 0x01	; 1
    215a:	86 e0       	ldi	r24, 0x06	; 6
    215c:	fd 01       	movw	r30, r26
    215e:	11 92       	st	Z+, r1
    2160:	8a 95       	dec	r24
    2162:	e9 f7       	brne	.-6      	; 0x215e <action_exec+0x4e>
    2164:	85 e0       	ldi	r24, 0x05	; 5
    2166:	fe 01       	movw	r30, r28
    2168:	37 96       	adiw	r30, 0x07	; 7
    216a:	01 90       	ld	r0, Z+
    216c:	0d 92       	st	X+, r0
    216e:	8a 95       	dec	r24
    2170:	e1 f7       	brne	.-8      	; 0x216a <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2172:	49 81       	ldd	r20, Y+1	; 0x01
    2174:	5a 81       	ldd	r21, Y+2	; 0x02
    2176:	6b 81       	ldd	r22, Y+3	; 0x03
    2178:	7c 81       	ldd	r23, Y+4	; 0x04
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2182:	2b 96       	adiw	r28, 0x0b	; 11
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2194:	cf 93       	push	r28
    2196:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2198:	88 23       	and	r24, r24
    219a:	09 f4       	brne	.+2      	; 0x219e <register_code+0xa>
    219c:	a3 c0       	rjmp	.+326    	; 0x22e4 <register_code+0x150>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    219e:	8c ef       	ldi	r24, 0xFC	; 252
    21a0:	8c 0f       	add	r24, r28
    21a2:	81 3a       	cpi	r24, 0xA1	; 161
    21a4:	48 f4       	brcc	.+18     	; 0x21b8 <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    21a6:	8c 2f       	mov	r24, r28
    21a8:	0e 94 a3 22 	call	0x4546	; 0x4546 <command_proc>
    21ac:	81 11       	cpse	r24, r1
    21ae:	9a c0       	rjmp	.+308    	; 0x22e4 <register_code+0x150>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    21b0:	8c 2f       	mov	r24, r28
    21b2:	0e 94 12 1a 	call	0x3424	; 0x3424 <add_key>
    21b6:	0c c0       	rjmp	.+24     	; 0x21d0 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    21b8:	80 e2       	ldi	r24, 0x20	; 32
    21ba:	8c 0f       	add	r24, r28
    21bc:	88 30       	cpi	r24, 0x08	; 8
    21be:	58 f4       	brcc	.+22     	; 0x21d6 <register_code+0x42>
        add_mods(MOD_BIT(code));
    21c0:	c7 70       	andi	r28, 0x07	; 7
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <register_code+0x34>
    21c6:	88 0f       	add	r24, r24
    21c8:	ca 95       	dec	r28
    21ca:	ea f7       	brpl	.-6      	; 0x21c6 <register_code+0x32>
    21cc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    21d0:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    21d2:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    21d6:	8b e5       	ldi	r24, 0x5B	; 91
    21d8:	8c 0f       	add	r24, r28
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	78 f4       	brcc	.+30     	; 0x21fc <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    21de:	c5 3a       	cpi	r28, 0xA5	; 165
    21e0:	29 f0       	breq	.+10     	; 0x21ec <register_code+0x58>
    21e2:	c6 3a       	cpi	r28, 0xA6	; 166
    21e4:	31 f4       	brne	.+12     	; 0x21f2 <register_code+0x5e>
    21e6:	82 e8       	ldi	r24, 0x82	; 130
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	05 c0       	rjmp	.+10     	; 0x21f6 <register_code+0x62>
    21ec:	81 e8       	ldi	r24, 0x81	; 129
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <register_code+0x62>
    21f2:	83 e8       	ldi	r24, 0x83	; 131
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    21f6:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    21f8:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    21fc:	88 e5       	ldi	r24, 0x58	; 88
    21fe:	8c 0f       	add	r24, r28
    2200:	85 31       	cpi	r24, 0x15	; 21
    2202:	08 f0       	brcs	.+2      	; 0x2206 <register_code+0x72>
    2204:	6f c0       	rjmp	.+222    	; 0x22e4 <register_code+0x150>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2206:	c8 3a       	cpi	r28, 0xA8	; 168
    2208:	61 f1       	breq	.+88     	; 0x2262 <register_code+0xce>
    220a:	c9 3a       	cpi	r28, 0xA9	; 169
    220c:	69 f1       	breq	.+90     	; 0x2268 <register_code+0xd4>
    220e:	ca 3a       	cpi	r28, 0xAA	; 170
    2210:	71 f1       	breq	.+92     	; 0x226e <register_code+0xda>
    2212:	cb 3a       	cpi	r28, 0xAB	; 171
    2214:	79 f1       	breq	.+94     	; 0x2274 <register_code+0xe0>
    2216:	cc 3a       	cpi	r28, 0xAC	; 172
    2218:	81 f1       	breq	.+96     	; 0x227a <register_code+0xe6>
    221a:	cd 3a       	cpi	r28, 0xAD	; 173
    221c:	89 f1       	breq	.+98     	; 0x2280 <register_code+0xec>
    221e:	ce 3a       	cpi	r28, 0xAE	; 174
    2220:	91 f1       	breq	.+100    	; 0x2286 <register_code+0xf2>
    2222:	cf 3a       	cpi	r28, 0xAF	; 175
    2224:	99 f1       	breq	.+102    	; 0x228c <register_code+0xf8>
    2226:	c1 3b       	cpi	r28, 0xB1	; 177
    2228:	a1 f1       	breq	.+104    	; 0x2292 <register_code+0xfe>
    222a:	c0 3b       	cpi	r28, 0xB0	; 176
    222c:	a9 f1       	breq	.+106    	; 0x2298 <register_code+0x104>
    222e:	c2 3b       	cpi	r28, 0xB2	; 178
    2230:	b1 f1       	breq	.+108    	; 0x229e <register_code+0x10a>
    2232:	c3 3b       	cpi	r28, 0xB3	; 179
    2234:	b9 f1       	breq	.+110    	; 0x22a4 <register_code+0x110>
    2236:	c4 3b       	cpi	r28, 0xB4	; 180
    2238:	c1 f1       	breq	.+112    	; 0x22aa <register_code+0x116>
    223a:	c5 3b       	cpi	r28, 0xB5	; 181
    223c:	c9 f1       	breq	.+114    	; 0x22b0 <register_code+0x11c>
    223e:	c6 3b       	cpi	r28, 0xB6	; 182
    2240:	d1 f1       	breq	.+116    	; 0x22b6 <register_code+0x122>
    2242:	c7 3b       	cpi	r28, 0xB7	; 183
    2244:	d9 f1       	breq	.+118    	; 0x22bc <register_code+0x128>
    2246:	c8 3b       	cpi	r28, 0xB8	; 184
    2248:	e1 f1       	breq	.+120    	; 0x22c2 <register_code+0x12e>
    224a:	c9 3b       	cpi	r28, 0xB9	; 185
    224c:	e9 f1       	breq	.+122    	; 0x22c8 <register_code+0x134>
    224e:	ca 3b       	cpi	r28, 0xBA	; 186
    2250:	f1 f1       	breq	.+124    	; 0x22ce <register_code+0x13a>
    2252:	cb 3b       	cpi	r28, 0xBB	; 187
    2254:	f9 f1       	breq	.+126    	; 0x22d4 <register_code+0x140>
    2256:	cc 3b       	cpi	r28, 0xBC	; 188
    2258:	09 f0       	breq	.+2      	; 0x225c <register_code+0xc8>
    225a:	3f c0       	rjmp	.+126    	; 0x22da <register_code+0x146>
    225c:	8a e2       	ldi	r24, 0x2A	; 42
    225e:	92 e0       	ldi	r25, 0x02	; 2
    2260:	3e c0       	rjmp	.+124    	; 0x22de <register_code+0x14a>
    2262:	82 ee       	ldi	r24, 0xE2	; 226
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	3b c0       	rjmp	.+118    	; 0x22de <register_code+0x14a>
    2268:	89 ee       	ldi	r24, 0xE9	; 233
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	38 c0       	rjmp	.+112    	; 0x22de <register_code+0x14a>
    226e:	8a ee       	ldi	r24, 0xEA	; 234
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	35 c0       	rjmp	.+106    	; 0x22de <register_code+0x14a>
    2274:	85 eb       	ldi	r24, 0xB5	; 181
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	32 c0       	rjmp	.+100    	; 0x22de <register_code+0x14a>
    227a:	86 eb       	ldi	r24, 0xB6	; 182
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	2f c0       	rjmp	.+94     	; 0x22de <register_code+0x14a>
    2280:	83 eb       	ldi	r24, 0xB3	; 179
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	2c c0       	rjmp	.+88     	; 0x22de <register_code+0x14a>
    2286:	84 eb       	ldi	r24, 0xB4	; 180
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	29 c0       	rjmp	.+82     	; 0x22de <register_code+0x14a>
    228c:	87 eb       	ldi	r24, 0xB7	; 183
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	26 c0       	rjmp	.+76     	; 0x22de <register_code+0x14a>
    2292:	8c ec       	ldi	r24, 0xCC	; 204
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	23 c0       	rjmp	.+70     	; 0x22de <register_code+0x14a>
    2298:	8d ec       	ldi	r24, 0xCD	; 205
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	20 c0       	rjmp	.+64     	; 0x22de <register_code+0x14a>
    229e:	83 e8       	ldi	r24, 0x83	; 131
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	1d c0       	rjmp	.+58     	; 0x22de <register_code+0x14a>
    22a4:	8a e8       	ldi	r24, 0x8A	; 138
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	1a c0       	rjmp	.+52     	; 0x22de <register_code+0x14a>
    22aa:	82 e9       	ldi	r24, 0x92	; 146
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	17 c0       	rjmp	.+46     	; 0x22de <register_code+0x14a>
    22b0:	84 e9       	ldi	r24, 0x94	; 148
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	14 c0       	rjmp	.+40     	; 0x22de <register_code+0x14a>
    22b6:	81 e2       	ldi	r24, 0x21	; 33
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	11 c0       	rjmp	.+34     	; 0x22de <register_code+0x14a>
    22bc:	83 e2       	ldi	r24, 0x23	; 35
    22be:	92 e0       	ldi	r25, 0x02	; 2
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <register_code+0x14a>
    22c2:	84 e2       	ldi	r24, 0x24	; 36
    22c4:	92 e0       	ldi	r25, 0x02	; 2
    22c6:	0b c0       	rjmp	.+22     	; 0x22de <register_code+0x14a>
    22c8:	85 e2       	ldi	r24, 0x25	; 37
    22ca:	92 e0       	ldi	r25, 0x02	; 2
    22cc:	08 c0       	rjmp	.+16     	; 0x22de <register_code+0x14a>
    22ce:	86 e2       	ldi	r24, 0x26	; 38
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <register_code+0x14a>
    22d4:	87 e2       	ldi	r24, 0x27	; 39
    22d6:	92 e0       	ldi	r25, 0x02	; 2
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <register_code+0x14a>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    22de:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    22e0:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <host_consumer_send>
    }
}
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    22e8:	88 23       	and	r24, r24
    22ea:	29 f1       	breq	.+74     	; 0x2336 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    22ec:	9c ef       	ldi	r25, 0xFC	; 252
    22ee:	98 0f       	add	r25, r24
    22f0:	91 3a       	cpi	r25, 0xA1	; 161
    22f2:	18 f4       	brcc	.+6      	; 0x22fa <unregister_code+0x12>
        del_key(code);
    22f4:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <del_key>
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    22fa:	90 e2       	ldi	r25, 0x20	; 32
    22fc:	98 0f       	add	r25, r24
    22fe:	98 30       	cpi	r25, 0x08	; 8
    2300:	58 f4       	brcc	.+22     	; 0x2318 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    2302:	87 70       	andi	r24, 0x07	; 7
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	01 c0       	rjmp	.+2      	; 0x230a <unregister_code+0x22>
    2308:	99 0f       	add	r25, r25
    230a:	8a 95       	dec	r24
    230c:	ea f7       	brpl	.-6      	; 0x2308 <unregister_code+0x20>
    230e:	89 2f       	mov	r24, r25
    2310:	0e 94 be 1a 	call	0x357c	; 0x357c <del_mods>
        send_keyboard_report();
    2314:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    2318:	9b e5       	ldi	r25, 0x5B	; 91
    231a:	98 0f       	add	r25, r24
    231c:	93 30       	cpi	r25, 0x03	; 3
    231e:	20 f4       	brcc	.+8      	; 0x2328 <unregister_code+0x40>
        host_system_send(0);
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2328:	88 5a       	subi	r24, 0xA8	; 168
    232a:	85 31       	cpi	r24, 0x15	; 21
    232c:	20 f4       	brcc	.+8      	; 0x2336 <unregister_code+0x4e>
        host_consumer_send(0);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <host_consumer_send>
    2336:	08 95       	ret

00002338 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2338:	88 23       	and	r24, r24
    233a:	21 f0       	breq	.+8      	; 0x2344 <register_mods+0xc>
        add_mods(mods);
    233c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <add_mods>
        send_keyboard_report();
    2340:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <send_keyboard_report>
    2344:	08 95       	ret

00002346 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2346:	88 23       	and	r24, r24
    2348:	21 f0       	breq	.+8      	; 0x2352 <unregister_mods+0xc>
        del_mods(mods);
    234a:	0e 94 be 1a 	call	0x357c	; 0x357c <del_mods>
        send_keyboard_report();
    234e:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <send_keyboard_report>
    2352:	08 95       	ret

00002354 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2354:	cf 92       	push	r12
    2356:	df 92       	push	r13
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	28 97       	sbiw	r28, 0x08	; 8
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2376:	85 e0       	ldi	r24, 0x05	; 5
    2378:	f8 01       	movw	r30, r16
    237a:	de 01       	movw	r26, r28
    237c:	11 96       	adiw	r26, 0x01	; 1
    237e:	01 90       	ld	r0, Z+
    2380:	0d 92       	st	X+, r0
    2382:	8a 95       	dec	r24
    2384:	e1 f7       	brne	.-8      	; 0x237e <process_action+0x2a>
    2386:	f8 01       	movw	r30, r16
    2388:	40 81       	ld	r20, Z
    238a:	31 81       	ldd	r19, Z+1	; 0x01
    238c:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    238e:	25 81       	ldd	r18, Z+5	; 0x05
    2390:	22 95       	swap	r18
    2392:	2f 70       	andi	r18, 0x0F	; 15
    2394:	83 81       	ldd	r24, Z+3	; 0x03
    2396:	94 81       	ldd	r25, Z+4	; 0x04
    2398:	89 2b       	or	r24, r25
    239a:	31 f0       	breq	.+12     	; 0x23a8 <process_action+0x54>
    239c:	3f 3f       	cpi	r19, 0xFF	; 255
    239e:	31 f4       	brne	.+12     	; 0x23ac <process_action+0x58>
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	4f 3f       	cpi	r20, 0xFF	; 255
    23a4:	19 f4       	brne	.+6      	; 0x23ac <process_action+0x58>
    23a6:	03 c0       	rjmp	.+6      	; 0x23ae <process_action+0x5a>
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	01 c0       	rjmp	.+2      	; 0x23ae <process_action+0x5a>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    23ae:	80 fd       	sbrc	r24, 0
    23b0:	cf c2       	rjmp	.+1438   	; 0x2950 <process_action+0x5fc>

    action_t action = layer_switch_get_action(event.key);
    23b2:	49 83       	std	Y+1, r20	; 0x01
    23b4:	3a 83       	std	Y+2, r19	; 0x02
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	2f 83       	std	Y+7, r18	; 0x07
    23bc:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	88 87       	std	Y+8, r24	; 0x08
    23c4:	0e 94 cf 19 	call	0x339e	; 0x339e <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    23c8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    23cc:	4e 81       	ldd	r20, Y+6	; 0x06
    23ce:	e4 2f       	mov	r30, r20
    23d0:	e2 95       	swap	r30
    23d2:	ef 70       	andi	r30, 0x0F	; 15
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	e0 5a       	subi	r30, 0xA0	; 160
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	2f 81       	ldd	r18, Y+7	; 0x07
    23dc:	68 85       	ldd	r22, Y+8	; 0x08
    23de:	0c 94 37 25 	jmp	0x4a6e	; 0x4a6e <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    23e2:	84 2f       	mov	r24, r20
    23e4:	80 7f       	andi	r24, 0xF0	; 240
    23e6:	14 2f       	mov	r17, r20
    23e8:	1f 70       	andi	r17, 0x0F	; 15
    23ea:	88 23       	and	r24, r24
    23ec:	11 f0       	breq	.+4      	; 0x23f2 <process_action+0x9e>
    23ee:	12 95       	swap	r17
    23f0:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    23f2:	ff 20       	and	r15, r15
    23f4:	59 f0       	breq	.+22     	; 0x240c <process_action+0xb8>
                    if (mods) {
    23f6:	11 23       	and	r17, r17
    23f8:	09 f4       	brne	.+2      	; 0x23fc <process_action+0xa8>
    23fa:	5f c2       	rjmp	.+1214   	; 0x28ba <process_action+0x566>
                        add_weak_mods(mods);
    23fc:	81 2f       	mov	r24, r17
    23fe:	68 87       	std	Y+8, r22	; 0x08
    2400:	0e 94 cb 1a 	call	0x3596	; 0x3596 <add_weak_mods>
                        send_keyboard_report();
    2404:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <send_keyboard_report>
    2408:	68 85       	ldd	r22, Y+8	; 0x08
    240a:	57 c2       	rjmp	.+1198   	; 0x28ba <process_action+0x566>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    240c:	86 2f       	mov	r24, r22
    240e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <unregister_code>
                    if (mods) {
    2412:	11 23       	and	r17, r17
    2414:	09 f4       	brne	.+2      	; 0x2418 <process_action+0xc4>
    2416:	9c c2       	rjmp	.+1336   	; 0x2950 <process_action+0x5fc>
                        del_weak_mods(mods);
    2418:	81 2f       	mov	r24, r17
    241a:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    241e:	28 96       	adiw	r28, 0x08	; 8
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	1f 91       	pop	r17
    2430:	0f 91       	pop	r16
    2432:	ff 90       	pop	r15
    2434:	ef 90       	pop	r14
    2436:	df 90       	pop	r13
    2438:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    243a:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    243e:	84 2f       	mov	r24, r20
    2440:	80 7f       	andi	r24, 0xF0	; 240
    2442:	94 2f       	mov	r25, r20
    2444:	9f 70       	andi	r25, 0x0F	; 15
    2446:	e9 2e       	mov	r14, r25
    2448:	80 32       	cpi	r24, 0x20	; 32
    244a:	19 f0       	breq	.+6      	; 0x2452 <process_action+0xfe>
    244c:	e2 94       	swap	r14
    244e:	80 ef       	ldi	r24, 0xF0	; 240
    2450:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2452:	66 23       	and	r22, r22
    2454:	19 f0       	breq	.+6      	; 0x245c <process_action+0x108>
    2456:	61 30       	cpi	r22, 0x01	; 1
    2458:	01 f1       	breq	.+64     	; 0x249a <process_action+0x146>
    245a:	29 c0       	rjmp	.+82     	; 0x24ae <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    245c:	ff 20       	and	r15, r15
    245e:	a9 f0       	breq	.+42     	; 0x248a <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    2460:	8e 2d       	mov	r24, r14
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2462:	22 23       	and	r18, r18
    2464:	49 f1       	breq	.+82     	; 0x24b8 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2466:	21 30       	cpi	r18, 0x01	; 1
    2468:	39 f5       	brne	.+78     	; 0x24b8 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    246a:	28 96       	adiw	r28, 0x08	; 8
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	ff 90       	pop	r15
    2480:	ef 90       	pop	r14
    2482:	df 90       	pop	r13
    2484:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2486:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    248a:	22 23       	and	r18, r18
    248c:	19 f0       	breq	.+6      	; 0x2494 <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    248e:	21 30       	cpi	r18, 0x01	; 1
    2490:	09 f4       	brne	.+2      	; 0x2494 <process_action+0x140>
    2492:	5e c2       	rjmp	.+1212   	; 0x2950 <process_action+0x5fc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2494:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <clear_oneshot_mods>
    2498:	2c c0       	rjmp	.+88     	; 0x24f2 <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    249a:	ff 20       	and	r15, r15
    249c:	e9 f0       	breq	.+58     	; 0x24d8 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    249e:	26 30       	cpi	r18, 0x06	; 6
    24a0:	08 f0       	brcs	.+2      	; 0x24a4 <process_action+0x150>
    24a2:	56 c2       	rjmp	.+1196   	; 0x2950 <process_action+0x5fc>
                                if (mods & get_mods()) {
    24a4:	0e 94 b5 1a 	call	0x356a	; 0x356a <get_mods>
    24a8:	8e 21       	and	r24, r14
    24aa:	29 f0       	breq	.+10     	; 0x24b6 <process_action+0x162>
    24ac:	22 c0       	rjmp	.+68     	; 0x24f2 <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    24ae:	ff 20       	and	r15, r15
    24b0:	f1 f0       	breq	.+60     	; 0x24ee <process_action+0x19a>
                            if (tap_count > 0) {
    24b2:	21 11       	cpse	r18, r1
    24b4:	15 c0       	rjmp	.+42     	; 0x24e0 <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    24b6:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    24b8:	28 96       	adiw	r28, 0x08	; 8
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    24d4:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    24d8:	25 30       	cpi	r18, 0x05	; 5
    24da:	08 f0       	brcs	.+2      	; 0x24de <process_action+0x18a>
    24dc:	39 c2       	rjmp	.+1138   	; 0x2950 <process_action+0x5fc>
    24de:	09 c0       	rjmp	.+18     	; 0x24f2 <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    24e0:	f8 01       	movw	r30, r16
    24e2:	85 81       	ldd	r24, Z+5	; 0x05
    24e4:	80 ff       	sbrs	r24, 0
    24e6:	e9 c1       	rjmp	.+978    	; 0x28ba <process_action+0x566>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    24e8:	8f 70       	andi	r24, 0x0F	; 15
    24ea:	85 83       	std	Z+5, r24	; 0x05
    24ec:	e4 cf       	rjmp	.-56     	; 0x24b6 <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    24ee:	21 11       	cpse	r18, r1
    24f0:	f8 c1       	rjmp	.+1008   	; 0x28e2 <process_action+0x58e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    24f2:	8e 2d       	mov	r24, r14
    24f4:	66 c1       	rjmp	.+716    	; 0x27c2 <process_action+0x46e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    24f6:	24 2f       	mov	r18, r20
    24f8:	26 95       	lsr	r18
    24fa:	26 95       	lsr	r18
    24fc:	23 70       	andi	r18, 0x03	; 3
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	21 15       	cp	r18, r1
    2502:	31 05       	cpc	r19, r1
    2504:	21 f0       	breq	.+8      	; 0x250e <process_action+0x1ba>
    2506:	21 30       	cpi	r18, 0x01	; 1
    2508:	31 05       	cpc	r19, r1
    250a:	c9 f0       	breq	.+50     	; 0x253e <process_action+0x1ea>
    250c:	21 c2       	rjmp	.+1090   	; 0x2950 <process_action+0x5fc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    250e:	ff 20       	and	r15, r15
    2510:	21 f0       	breq	.+8      	; 0x251a <process_action+0x1c6>
                        host_system_send(action.usage.code);
    2512:	86 2f       	mov	r24, r22
    2514:	94 2f       	mov	r25, r20
    2516:	93 70       	andi	r25, 0x03	; 3
    2518:	02 c0       	rjmp	.+4      	; 0x251e <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    251e:	28 96       	adiw	r28, 0x08	; 8
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    253a:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    253e:	ff 20       	and	r15, r15
    2540:	21 f0       	breq	.+8      	; 0x254a <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    2542:	86 2f       	mov	r24, r22
    2544:	94 2f       	mov	r25, r20
    2546:	93 70       	andi	r25, 0x03	; 3
    2548:	02 c0       	rjmp	.+4      	; 0x254e <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    254e:	28 96       	adiw	r28, 0x08	; 8
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	df 91       	pop	r29
    255c:	cf 91       	pop	r28
    255e:	1f 91       	pop	r17
    2560:	0f 91       	pop	r16
    2562:	ff 90       	pop	r15
    2564:	ef 90       	pop	r14
    2566:	df 90       	pop	r13
    2568:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    256a:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    256e:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2570:	ff 20       	and	r15, r15
    2572:	19 f0       	breq	.+6      	; 0x257a <process_action+0x226>
                mousekey_on(action.key.code);
    2574:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <mousekey_on>
    2578:	02 c0       	rjmp	.+4      	; 0x257e <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    257a:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    257e:	28 96       	adiw	r28, 0x08	; 8
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	ff 90       	pop	r15
    2594:	ef 90       	pop	r14
    2596:	df 90       	pop	r13
    2598:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    259a:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    259e:	84 2f       	mov	r24, r20
    25a0:	83 70       	andi	r24, 0x03	; 3
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <process_action+0x252>
    25a4:	76 c0       	rjmp	.+236    	; 0x2692 <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    25a6:	f1 10       	cpse	r15, r1
    25a8:	d3 c1       	rjmp	.+934    	; 0x2950 <process_action+0x5fc>
                    uint8_t shift = action.layer_bitop.part*4;
    25aa:	26 2f       	mov	r18, r22
    25ac:	22 95       	swap	r18
    25ae:	26 95       	lsr	r18
    25b0:	27 70       	andi	r18, 0x07	; 7
    25b2:	22 0f       	add	r18, r18
    25b4:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    25b6:	86 2f       	mov	r24, r22
    25b8:	8f 70       	andi	r24, 0x0F	; 15
    25ba:	c8 2e       	mov	r12, r24
    25bc:	d1 2c       	mov	r13, r1
    25be:	e1 2c       	mov	r14, r1
    25c0:	f1 2c       	mov	r15, r1
    25c2:	02 2e       	mov	r0, r18
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <process_action+0x27a>
    25c6:	cc 0c       	add	r12, r12
    25c8:	dd 1c       	adc	r13, r13
    25ca:	ee 1c       	adc	r14, r14
    25cc:	ff 1c       	adc	r15, r15
    25ce:	0a 94       	dec	r0
    25d0:	d2 f7       	brpl	.-12     	; 0x25c6 <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    25d2:	64 ff       	sbrs	r22, 4
    25d4:	10 c0       	rjmp	.+32     	; 0x25f6 <process_action+0x2a2>
    25d6:	6f e0       	ldi	r22, 0x0F	; 15
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	04 c0       	rjmp	.+8      	; 0x25e8 <process_action+0x294>
    25e0:	66 0f       	add	r22, r22
    25e2:	77 1f       	adc	r23, r23
    25e4:	88 1f       	adc	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	2a 95       	dec	r18
    25ea:	d2 f7       	brpl	.-12     	; 0x25e0 <process_action+0x28c>
    25ec:	60 95       	com	r22
    25ee:	70 95       	com	r23
    25f0:	80 95       	com	r24
    25f2:	90 95       	com	r25
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <process_action+0x2a8>
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    25fc:	24 2f       	mov	r18, r20
    25fe:	26 95       	lsr	r18
    2600:	26 95       	lsr	r18
    2602:	23 70       	andi	r18, 0x03	; 3
    2604:	42 2f       	mov	r20, r18
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	42 30       	cpi	r20, 0x02	; 2
    260a:	51 05       	cpc	r21, r1
    260c:	d1 f0       	breq	.+52     	; 0x2642 <process_action+0x2ee>
    260e:	43 30       	cpi	r20, 0x03	; 3
    2610:	51 05       	cpc	r21, r1
    2612:	59 f1       	breq	.+86     	; 0x266a <process_action+0x316>
    2614:	6c 29       	or	r22, r12
    2616:	7d 29       	or	r23, r13
    2618:	8e 29       	or	r24, r14
    261a:	9f 29       	or	r25, r15
    261c:	41 30       	cpi	r20, 0x01	; 1
    261e:	51 05       	cpc	r21, r1
    2620:	41 f1       	breq	.+80     	; 0x2672 <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    2622:	28 96       	adiw	r28, 0x08	; 8
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    263e:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2642:	6c 29       	or	r22, r12
    2644:	7d 29       	or	r23, r13
    2646:	8e 29       	or	r24, r14
    2648:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    264a:	28 96       	adiw	r28, 0x08	; 8
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	0f 91       	pop	r16
    265e:	ff 90       	pop	r15
    2660:	ef 90       	pop	r14
    2662:	df 90       	pop	r13
    2664:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2666:	0c 94 1e 19 	jmp	0x323c	; 0x323c <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    266a:	0e 94 0c 19 	call	0x3218	; 0x3218 <default_layer_and>
    266e:	c7 01       	movw	r24, r14
    2670:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2672:	28 96       	adiw	r28, 0x08	; 8
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	df 90       	pop	r13
    268c:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    268e:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2692:	ff 20       	and	r15, r15
    2694:	19 f0       	breq	.+6      	; 0x269c <process_action+0x348>
    2696:	84 2f       	mov	r24, r20
    2698:	81 70       	andi	r24, 0x01	; 1
    269a:	01 c0       	rjmp	.+2      	; 0x269e <process_action+0x34a>
    269c:	86 95       	lsr	r24
    269e:	88 23       	and	r24, r24
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <process_action+0x350>
    26a2:	56 c1       	rjmp	.+684    	; 0x2950 <process_action+0x5fc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    26a4:	26 2f       	mov	r18, r22
    26a6:	22 95       	swap	r18
    26a8:	26 95       	lsr	r18
    26aa:	27 70       	andi	r18, 0x07	; 7
    26ac:	22 0f       	add	r18, r18
    26ae:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    26b0:	86 2f       	mov	r24, r22
    26b2:	8f 70       	andi	r24, 0x0F	; 15
    26b4:	c8 2e       	mov	r12, r24
    26b6:	d1 2c       	mov	r13, r1
    26b8:	e1 2c       	mov	r14, r1
    26ba:	f1 2c       	mov	r15, r1
    26bc:	02 2e       	mov	r0, r18
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <process_action+0x374>
    26c0:	cc 0c       	add	r12, r12
    26c2:	dd 1c       	adc	r13, r13
    26c4:	ee 1c       	adc	r14, r14
    26c6:	ff 1c       	adc	r15, r15
    26c8:	0a 94       	dec	r0
    26ca:	d2 f7       	brpl	.-12     	; 0x26c0 <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    26cc:	64 ff       	sbrs	r22, 4
    26ce:	10 c0       	rjmp	.+32     	; 0x26f0 <process_action+0x39c>
    26d0:	6f e0       	ldi	r22, 0x0F	; 15
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <process_action+0x38e>
    26da:	66 0f       	add	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	88 1f       	adc	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	2a 95       	dec	r18
    26e4:	d2 f7       	brpl	.-12     	; 0x26da <process_action+0x386>
    26e6:	60 95       	com	r22
    26e8:	70 95       	com	r23
    26ea:	80 95       	com	r24
    26ec:	90 95       	com	r25
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <process_action+0x3a2>
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    26f6:	24 2f       	mov	r18, r20
    26f8:	26 95       	lsr	r18
    26fa:	26 95       	lsr	r18
    26fc:	23 70       	andi	r18, 0x03	; 3
    26fe:	42 2f       	mov	r20, r18
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	42 30       	cpi	r20, 0x02	; 2
    2704:	51 05       	cpc	r21, r1
    2706:	d1 f0       	breq	.+52     	; 0x273c <process_action+0x3e8>
    2708:	43 30       	cpi	r20, 0x03	; 3
    270a:	51 05       	cpc	r21, r1
    270c:	59 f1       	breq	.+86     	; 0x2764 <process_action+0x410>
    270e:	6c 29       	or	r22, r12
    2710:	7d 29       	or	r23, r13
    2712:	8e 29       	or	r24, r14
    2714:	9f 29       	or	r25, r15
    2716:	41 30       	cpi	r20, 0x01	; 1
    2718:	51 05       	cpc	r21, r1
    271a:	41 f1       	breq	.+80     	; 0x276c <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    271c:	28 96       	adiw	r28, 0x08	; 8
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	de bf       	out	0x3e, r29	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	cd bf       	out	0x3d, r28	; 61
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	ff 90       	pop	r15
    2732:	ef 90       	pop	r14
    2734:	df 90       	pop	r13
    2736:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2738:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    273c:	6c 29       	or	r22, r12
    273e:	7d 29       	or	r23, r13
    2740:	8e 29       	or	r24, r14
    2742:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2744:	28 96       	adiw	r28, 0x08	; 8
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2760:	0c 94 bd 19 	jmp	0x337a	; 0x337a <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2764:	0e 94 ab 19 	call	0x3356	; 0x3356 <layer_and>
    2768:	c7 01       	movw	r24, r14
    276a:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    276c:	28 96       	adiw	r28, 0x08	; 8
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2788:	0c 94 99 19 	jmp	0x3332	; 0x3332 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    278c:	60 3f       	cpi	r22, 0xF0	; 240
    278e:	49 f1       	breq	.+82     	; 0x27e2 <process_action+0x48e>
    2790:	18 f4       	brcc	.+6      	; 0x2798 <process_action+0x444>
    2792:	60 3e       	cpi	r22, 0xE0	; 224
    2794:	48 f4       	brcc	.+18     	; 0x27a8 <process_action+0x454>
    2796:	8c c0       	rjmp	.+280    	; 0x28b0 <process_action+0x55c>
    2798:	62 3f       	cpi	r22, 0xF2	; 242
    279a:	09 f4       	brne	.+2      	; 0x279e <process_action+0x44a>
    279c:	51 c0       	rjmp	.+162    	; 0x2840 <process_action+0x4ec>
    279e:	e0 f1       	brcs	.+120    	; 0x2818 <process_action+0x4c4>
    27a0:	63 3f       	cpi	r22, 0xF3	; 243
    27a2:	09 f4       	brne	.+2      	; 0x27a6 <process_action+0x452>
    27a4:	61 c0       	rjmp	.+194    	; 0x2868 <process_action+0x514>
    27a6:	84 c0       	rjmp	.+264    	; 0x28b0 <process_action+0x55c>
    27a8:	16 2f       	mov	r17, r22
    27aa:	1f 70       	andi	r17, 0x0F	; 15
    27ac:	84 2f       	mov	r24, r20
    27ae:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    27b0:	ff 20       	and	r15, r15
    27b2:	21 f0       	breq	.+8      	; 0x27bc <process_action+0x468>
                        layer_on(action.layer_tap.val);
    27b4:	0e 94 44 19 	call	0x3288	; 0x3288 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    27b8:	81 2f       	mov	r24, r17
    27ba:	7e ce       	rjmp	.-772    	; 0x24b8 <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    27bc:	0e 94 5f 19 	call	0x32be	; 0x32be <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    27c0:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    27c2:	28 96       	adiw	r28, 0x08	; 8
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    27de:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    27e2:	ff 20       	and	r15, r15
    27e4:	a9 f0       	breq	.+42     	; 0x2810 <process_action+0x4bc>
                        if (tap_count < TAPPING_TOGGLE) {
    27e6:	25 30       	cpi	r18, 0x05	; 5
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <process_action+0x498>
    27ea:	b2 c0       	rjmp	.+356    	; 0x2950 <process_action+0x5fc>
                            layer_invert(action.layer_tap.val);
    27ec:	84 2f       	mov	r24, r20
    27ee:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    27f0:	28 96       	adiw	r28, 0x08	; 8
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    280c:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2810:	26 30       	cpi	r18, 0x06	; 6
    2812:	08 f0       	brcs	.+2      	; 0x2816 <process_action+0x4c2>
    2814:	9d c0       	rjmp	.+314    	; 0x2950 <process_action+0x5fc>
    2816:	ea cf       	rjmp	.-44     	; 0x27ec <process_action+0x498>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2818:	ff 20       	and	r15, r15
    281a:	a1 f0       	breq	.+40     	; 0x2844 <process_action+0x4f0>
    281c:	84 2f       	mov	r24, r20
    281e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2820:	28 96       	adiw	r28, 0x08	; 8
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    283c:	0c 94 44 19 	jmp	0x3288	; 0x3288 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2840:	ff 20       	and	r15, r15
    2842:	61 f3       	breq	.-40     	; 0x281c <process_action+0x4c8>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2844:	84 2f       	mov	r24, r20
    2846:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2848:	28 96       	adiw	r28, 0x08	; 8
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2864:	0c 94 5f 19 	jmp	0x32be	; 0x32be <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2868:	ff 20       	and	r15, r15
    286a:	91 f0       	breq	.+36     	; 0x2890 <process_action+0x53c>
    286c:	84 2f       	mov	r24, r20
    286e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2870:	28 96       	adiw	r28, 0x08	; 8
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	ef 90       	pop	r14
    2888:	df 90       	pop	r13
    288a:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    288c:	0c 94 35 19 	jmp	0x326a	; 0x326a <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2890:	28 96       	adiw	r28, 0x08	; 8
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    28ac:	0c 94 30 19 	jmp	0x3260	; 0x3260 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    28b0:	ff 20       	and	r15, r15
    28b2:	a1 f0       	breq	.+40     	; 0x28dc <process_action+0x588>
                        if (tap_count > 0) {
    28b4:	22 23       	and	r18, r18
    28b6:	09 f4       	brne	.+2      	; 0x28ba <process_action+0x566>
    28b8:	b1 cf       	rjmp	.-158    	; 0x281c <process_action+0x4c8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    28ba:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    28bc:	28 96       	adiw	r28, 0x08	; 8
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	de bf       	out	0x3e, r29	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	cd bf       	out	0x3d, r28	; 61
    28c8:	df 91       	pop	r29
    28ca:	cf 91       	pop	r28
    28cc:	1f 91       	pop	r17
    28ce:	0f 91       	pop	r16
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	df 90       	pop	r13
    28d6:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    28d8:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    28dc:	22 23       	and	r18, r18
    28de:	09 f4       	brne	.+2      	; 0x28e2 <process_action+0x58e>
    28e0:	b1 cf       	rjmp	.-158    	; 0x2844 <process_action+0x4f0>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    28e2:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    28e4:	28 96       	adiw	r28, 0x08	; 8
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	df 90       	pop	r13
    28fe:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2900:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2904:	4f 70       	andi	r20, 0x0F	; 15
    2906:	c8 01       	movw	r24, r16
    2908:	0e 94 a8 1c 	call	0x3950	; 0x3950 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    290c:	28 96       	adiw	r28, 0x08	; 8
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2928:	0c 94 42 18 	jmp	0x3084	; 0x3084 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    292c:	4f 70       	andi	r20, 0x0F	; 15
    292e:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2930:	28 96       	adiw	r28, 0x08	; 8
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    294c:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2950:	28 96       	adiw	r28, 0x08	; 8
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	08 95       	ret

0000296e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    296e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <clear_weak_mods>
    clear_keys();
    2972:	0e 94 a7 1a 	call	0x354e	; 0x354e <clear_keys>
    send_keyboard_report();
    2976:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    297a:	0e 94 03 20 	call	0x4006	; 0x4006 <mousekey_clear>
    mousekey_send();
    297e:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <host_system_send>
    host_consumer_send(0);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <host_consumer_send>

00002992 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2992:	0e 94 c8 1a 	call	0x3590	; 0x3590 <clear_mods>
    clear_keyboard_but_mods();
    2996:	0c 94 b7 14 	jmp	0x296e	; 0x296e <clear_keyboard_but_mods>

0000299a <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    299a:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <layer_switch_get_action>

    switch (action.kind.id) {
    299e:	29 2f       	mov	r18, r25
    29a0:	22 95       	swap	r18
    29a2:	2f 70       	andi	r18, 0x0F	; 15
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	2c 30       	cpi	r18, 0x0C	; 12
    29a8:	31 05       	cpc	r19, r1
    29aa:	4c f4       	brge	.+18     	; 0x29be <is_tap_key+0x24>
    29ac:	2a 30       	cpi	r18, 0x0A	; 10
    29ae:	31 05       	cpc	r19, r1
    29b0:	6c f4       	brge	.+26     	; 0x29cc <is_tap_key+0x32>
    29b2:	22 50       	subi	r18, 0x02	; 2
    29b4:	31 09       	sbc	r19, r1
    29b6:	22 30       	cpi	r18, 0x02	; 2
    29b8:	31 05       	cpc	r19, r1
    29ba:	90 f4       	brcc	.+36     	; 0x29e0 <is_tap_key+0x46>
    29bc:	07 c0       	rjmp	.+14     	; 0x29cc <is_tap_key+0x32>
    29be:	2c 30       	cpi	r18, 0x0C	; 12
    29c0:	31 05       	cpc	r19, r1
    29c2:	51 f0       	breq	.+20     	; 0x29d8 <is_tap_key+0x3e>
    29c4:	2f 30       	cpi	r18, 0x0F	; 15
    29c6:	31 05       	cpc	r19, r1
    29c8:	39 f0       	breq	.+14     	; 0x29d8 <is_tap_key+0x3e>
    29ca:	0a c0       	rjmp	.+20     	; 0x29e0 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    29cc:	80 3e       	cpi	r24, 0xE0	; 224
    29ce:	10 f0       	brcs	.+4      	; 0x29d4 <is_tap_key+0x3a>
    29d0:	80 3f       	cpi	r24, 0xF0	; 240
    29d2:	31 f4       	brne	.+12     	; 0x29e0 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    29d8:	93 fb       	bst	r25, 3
    29da:	88 27       	eor	r24, r24
    29dc:	80 f9       	bld	r24, 0
    29de:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    29e0:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    29e2:	08 95       	ret

000029e4 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <debug_event+0x6>
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <debug_event+0x8>
    29ec:	1f 92       	push	r1
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	08 95       	ret

00002a02 <debug_record>:

void debug_record(keyrecord_t record)
{
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <debug_record+0x6>
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <debug_record+0x8>
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <debug_record+0xa>
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2a10:	26 96       	adiw	r28, 0x06	; 6
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	df 91       	pop	r29
    2a1e:	cf 91       	pop	r28
    2a20:	08 95       	ret

00002a22 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a28:	c0 91 87 01 	lds	r28, 0x0187
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2a2c:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a2e:	80 91 88 01 	lds	r24, 0x0188
    2a32:	c8 17       	cp	r28, r24
    2a34:	99 f0       	breq	.+38     	; 0x2a5c <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2a36:	d0 e0       	ldi	r29, 0x00	; 0
    2a38:	1c 9f       	mul	r17, r28
    2a3a:	f0 01       	movw	r30, r0
    2a3c:	1d 9f       	mul	r17, r29
    2a3e:	f0 0d       	add	r31, r0
    2a40:	11 24       	eor	r1, r1
    2a42:	e7 57       	subi	r30, 0x77	; 119
    2a44:	fe 4f       	sbci	r31, 0xFE	; 254
    2a46:	40 81       	ld	r20, Z
    2a48:	51 81       	ldd	r21, Z+1	; 0x01
    2a4a:	62 81       	ldd	r22, Z+2	; 0x02
    2a4c:	73 81       	ldd	r23, Z+3	; 0x03
    2a4e:	84 81       	ldd	r24, Z+4	; 0x04
    2a50:	95 81       	ldd	r25, Z+5	; 0x05
    2a52:	0e 94 01 15 	call	0x2a02	; 0x2a02 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a56:	21 96       	adiw	r28, 0x01	; 1
    2a58:	c7 70       	andi	r28, 0x07	; 7
    2a5a:	e9 cf       	rjmp	.-46     	; 0x2a2e <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	08 95       	ret

00002a64 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2a64:	40 91 b9 01 	lds	r20, 0x01B9
    2a68:	50 91 ba 01 	lds	r21, 0x01BA
    2a6c:	60 91 bb 01 	lds	r22, 0x01BB
    2a70:	70 91 bc 01 	lds	r23, 0x01BC
    2a74:	80 91 bd 01 	lds	r24, 0x01BD
    2a78:	90 91 be 01 	lds	r25, 0x01BE
    2a7c:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <debug_record>

00002a80 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2a80:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2a82:	80 91 be 01 	lds	r24, 0x01BE
    2a86:	82 95       	swap	r24
    2a88:	8f 70       	andi	r24, 0x0F	; 15
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <waiting_buffer_scan_tap+0xe>
    2a8c:	5f c0       	rjmp	.+190    	; 0x2b4c <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2a8e:	80 91 bb 01 	lds	r24, 0x01BB
    2a92:	88 23       	and	r24, r24
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <waiting_buffer_scan_tap+0x18>
    2a96:	5a c0       	rjmp	.+180    	; 0x2b4c <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a98:	20 91 87 01 	lds	r18, 0x0187
    2a9c:	a0 91 88 01 	lds	r26, 0x0188
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2aa0:	60 91 b9 01 	lds	r22, 0x01B9
    2aa4:	70 91 ba 01 	lds	r23, 0x01BA
    2aa8:	80 91 bc 01 	lds	r24, 0x01BC
    2aac:	90 91 bd 01 	lds	r25, 0x01BD
    2ab0:	31 e0       	ldi	r19, 0x01	; 1
    2ab2:	6f 3f       	cpi	r22, 0xFF	; 255
    2ab4:	09 f0       	breq	.+2      	; 0x2ab8 <waiting_buffer_scan_tap+0x38>
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	b3 2f       	mov	r27, r19
    2aba:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2abc:	2a 17       	cp	r18, r26
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <waiting_buffer_scan_tap+0x42>
    2ac0:	45 c0       	rjmp	.+138    	; 0x2b4c <waiting_buffer_scan_tap+0xcc>
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	21 f0       	breq	.+8      	; 0x2ace <waiting_buffer_scan_tap+0x4e>
    2ac6:	7f 3f       	cpi	r23, 0xFF	; 255
    2ac8:	21 f4       	brne	.+8      	; 0x2ad2 <waiting_buffer_scan_tap+0x52>
    2aca:	4b 2f       	mov	r20, r27
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <waiting_buffer_scan_tap+0x54>
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <waiting_buffer_scan_tap+0x54>
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2ad6:	40 fd       	sbrc	r20, 0
    2ad8:	35 c0       	rjmp	.+106    	; 0x2b44 <waiting_buffer_scan_tap+0xc4>
    2ada:	c2 9f       	mul	r28, r18
    2adc:	f0 01       	movw	r30, r0
    2ade:	c3 9f       	mul	r28, r19
    2ae0:	f0 0d       	add	r31, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	e7 57       	subi	r30, 0x77	; 119
    2ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae8:	41 81       	ldd	r20, Z+1	; 0x01
    2aea:	74 13       	cpse	r23, r20
    2aec:	2b c0       	rjmp	.+86     	; 0x2b44 <waiting_buffer_scan_tap+0xc4>
    2aee:	40 81       	ld	r20, Z
    2af0:	64 13       	cpse	r22, r20
    2af2:	28 c0       	rjmp	.+80     	; 0x2b44 <waiting_buffer_scan_tap+0xc4>
    2af4:	42 81       	ldd	r20, Z+2	; 0x02
    2af6:	41 11       	cpse	r20, r1
    2af8:	25 c0       	rjmp	.+74     	; 0x2b44 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2afa:	43 81       	ldd	r20, Z+3	; 0x03
    2afc:	54 81       	ldd	r21, Z+4	; 0x04
    2afe:	48 17       	cp	r20, r24
    2b00:	59 07       	cpc	r21, r25
    2b02:	10 f4       	brcc	.+4      	; 0x2b08 <waiting_buffer_scan_tap+0x88>
    2b04:	41 50       	subi	r20, 0x01	; 1
    2b06:	51 09       	sbc	r21, r1
    2b08:	48 1b       	sub	r20, r24
    2b0a:	59 0b       	sbc	r21, r25
    2b0c:	4c 32       	cpi	r20, 0x2C	; 44
    2b0e:	51 40       	sbci	r21, 0x01	; 1
    2b10:	c8 f4       	brcc	.+50     	; 0x2b44 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2b12:	80 91 be 01 	lds	r24, 0x01BE
    2b16:	8f 70       	andi	r24, 0x0F	; 15
    2b18:	80 61       	ori	r24, 0x10	; 16
    2b1a:	80 93 be 01 	sts	0x01BE, r24
            waiting_buffer[i].tap.count = 1;
    2b1e:	86 e0       	ldi	r24, 0x06	; 6
    2b20:	82 9f       	mul	r24, r18
    2b22:	f0 01       	movw	r30, r0
    2b24:	83 9f       	mul	r24, r19
    2b26:	f0 0d       	add	r31, r0
    2b28:	11 24       	eor	r1, r1
    2b2a:	e2 57       	subi	r30, 0x72	; 114
    2b2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2e:	80 81       	ld	r24, Z
    2b30:	8f 70       	andi	r24, 0x0F	; 15
    2b32:	80 61       	ori	r24, 0x10	; 16
    2b34:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2b36:	89 eb       	ldi	r24, 0xB9	; 185
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2b3e:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2b40:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	27 70       	andi	r18, 0x07	; 7
    2b4a:	b8 cf       	rjmp	.-144    	; 0x2abc <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2b4c:	cf 91       	pop	r28
    2b4e:	08 95       	ret

00002b50 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2b50:	cf 92       	push	r12
    2b52:	df 92       	push	r13
    2b54:	ef 92       	push	r14
    2b56:	ff 92       	push	r15
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	62 97       	sbiw	r28, 0x12	; 18
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2b72:	85 e0       	ldi	r24, 0x05	; 5
    2b74:	f8 01       	movw	r30, r16
    2b76:	de 01       	movw	r26, r28
    2b78:	1d 96       	adiw	r26, 0x0d	; 13
    2b7a:	01 90       	ld	r0, Z+
    2b7c:	0d 92       	st	X+, r0
    2b7e:	8a 95       	dec	r24
    2b80:	e1 f7       	brne	.-8      	; 0x2b7a <process_tapping+0x2a>
    2b82:	d8 01       	movw	r26, r16
    2b84:	4c 91       	ld	r20, X
    2b86:	11 96       	adiw	r26, 0x01	; 1
    2b88:	5c 91       	ld	r21, X
    2b8a:	11 97       	sbiw	r26, 0x01	; 1
    2b8c:	12 96       	adiw	r26, 0x02	; 2
    2b8e:	6c 91       	ld	r22, X
    2b90:	12 97       	sbiw	r26, 0x02	; 2
    2b92:	13 96       	adiw	r26, 0x03	; 3
    2b94:	ed 90       	ld	r14, X+
    2b96:	fc 90       	ld	r15, X
    2b98:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2b9a:	70 91 b9 01 	lds	r23, 0x01B9
    2b9e:	e0 91 ba 01 	lds	r30, 0x01BA
    2ba2:	20 91 bc 01 	lds	r18, 0x01BC
    2ba6:	30 91 bd 01 	lds	r19, 0x01BD
    2baa:	21 15       	cp	r18, r1
    2bac:	31 05       	cpc	r19, r1
    2bae:	31 f0       	breq	.+12     	; 0x2bbc <process_tapping+0x6c>
    2bb0:	ef 3f       	cpi	r30, 0xFF	; 255
    2bb2:	31 f4       	brne	.+12     	; 0x2bc0 <process_tapping+0x70>
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	7f 3f       	cpi	r23, 0xFF	; 255
    2bb8:	19 f4       	brne	.+6      	; 0x2bc0 <process_tapping+0x70>
    2bba:	03 c0       	rjmp	.+6      	; 0x2bc2 <process_tapping+0x72>
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <process_tapping+0x72>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	b8 2f       	mov	r27, r24
    2bc4:	b1 70       	andi	r27, 0x01	; 1
    2bc6:	cb 2e       	mov	r12, r27
    2bc8:	80 fd       	sbrc	r24, 0
    2bca:	6d c1       	rjmp	.+730    	; 0x2ea6 <process_tapping+0x356>
    2bcc:	d0 90 bb 01 	lds	r13, 0x01BB
    2bd0:	dd 20       	and	r13, r13
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <process_tapping+0x86>
    2bd4:	f6 c0       	rjmp	.+492    	; 0x2dc2 <process_tapping+0x272>
    2bd6:	f0 91 be 01 	lds	r31, 0x01BE
        if (WITHIN_TAPPING_TERM(event)) {
    2bda:	e2 16       	cp	r14, r18
    2bdc:	f3 06       	cpc	r15, r19
    2bde:	38 f0       	brcs	.+14     	; 0x2bee <process_tapping+0x9e>
    2be0:	c7 01       	movw	r24, r14
    2be2:	82 1b       	sub	r24, r18
    2be4:	93 0b       	sbc	r25, r19
    2be6:	8c 32       	cpi	r24, 0x2C	; 44
    2be8:	91 40       	sbci	r25, 0x01	; 1
    2bea:	48 f0       	brcs	.+18     	; 0x2bfe <process_tapping+0xae>
    2bec:	9c c0       	rjmp	.+312    	; 0x2d26 <process_tapping+0x1d6>
    2bee:	20 95       	com	r18
    2bf0:	30 95       	com	r19
    2bf2:	2e 0d       	add	r18, r14
    2bf4:	3f 1d       	adc	r19, r15
    2bf6:	2c 32       	cpi	r18, 0x2C	; 44
    2bf8:	31 40       	sbci	r19, 0x01	; 1
    2bfa:	08 f0       	brcs	.+2      	; 0x2bfe <process_tapping+0xae>
    2bfc:	94 c0       	rjmp	.+296    	; 0x2d26 <process_tapping+0x1d6>
            if (tapping_key.tap.count == 0) {
    2bfe:	8f 2f       	mov	r24, r31
    2c00:	80 7f       	andi	r24, 0xF0	; 240
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <process_tapping+0xb6>
    2c04:	53 c0       	rjmp	.+166    	; 0x2cac <process_tapping+0x15c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2c06:	e5 13       	cpse	r30, r21
    2c08:	15 c0       	rjmp	.+42     	; 0x2c34 <process_tapping+0xe4>
    2c0a:	74 13       	cpse	r23, r20
    2c0c:	13 c0       	rjmp	.+38     	; 0x2c34 <process_tapping+0xe4>
    2c0e:	d6 2e       	mov	r13, r22
    2c10:	61 11       	cpse	r22, r1
    2c12:	10 c0       	rjmp	.+32     	; 0x2c34 <process_tapping+0xe4>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2c14:	ff 70       	andi	r31, 0x0F	; 15
    2c16:	f0 61       	ori	r31, 0x10	; 16
    2c18:	f0 93 be 01 	sts	0x01BE, r31
                    debug_tapping_key();
    2c1c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <debug_tapping_key>
                    process_action(&tapping_key);
    2c20:	89 eb       	ldi	r24, 0xB9	; 185
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2c28:	80 91 be 01 	lds	r24, 0x01BE
    2c2c:	d8 01       	movw	r26, r16
    2c2e:	15 96       	adiw	r26, 0x05	; 5
    2c30:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    2c32:	6b c1       	rjmp	.+726    	; 0x2f0a <process_tapping+0x3ba>
    2c34:	ef 28       	or	r14, r15
    2c36:	31 f0       	breq	.+12     	; 0x2c44 <process_tapping+0xf4>
    2c38:	5f 3f       	cpi	r21, 0xFF	; 255
    2c3a:	31 f4       	brne	.+12     	; 0x2c48 <process_tapping+0xf8>
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	4f 3f       	cpi	r20, 0xFF	; 255
    2c40:	19 f4       	brne	.+6      	; 0x2c48 <process_tapping+0xf8>
    2c42:	03 c0       	rjmp	.+6      	; 0x2c4a <process_tapping+0xfa>
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <process_tapping+0xfa>
    2c48:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2c4a:	80 fd       	sbrc	r24, 0
    2c4c:	03 c0       	rjmp	.+6      	; 0x2c54 <process_tapping+0x104>
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	86 27       	eor	r24, r22
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <process_tapping+0x106>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2c56:	b8 2f       	mov	r27, r24
    2c58:	b1 70       	andi	r27, 0x01	; 1
    2c5a:	fb 2e       	mov	r15, r27
    2c5c:	80 ff       	sbrs	r24, 0
    2c5e:	1c c0       	rjmp	.+56     	; 0x2c98 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c60:	80 91 87 01 	lds	r24, 0x0187
    2c64:	20 91 88 01 	lds	r18, 0x0188
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2c68:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c6a:	82 17       	cp	r24, r18
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <process_tapping+0x120>
    2c6e:	28 c1       	rjmp	.+592    	; 0x2ec0 <process_tapping+0x370>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	38 9f       	mul	r19, r24
    2c74:	f0 01       	movw	r30, r0
    2c76:	39 9f       	mul	r19, r25
    2c78:	f0 0d       	add	r31, r0
    2c7a:	11 24       	eor	r1, r1
    2c7c:	e7 57       	subi	r30, 0x77	; 119
    2c7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	57 13       	cpse	r21, r23
    2c84:	06 c0       	rjmp	.+12     	; 0x2c92 <process_tapping+0x142>
    2c86:	70 81       	ld	r23, Z
    2c88:	47 13       	cpse	r20, r23
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <process_tapping+0x142>
    2c8c:	72 81       	ldd	r23, Z+2	; 0x02
    2c8e:	67 13       	cpse	r22, r23
    2c90:	03 c0       	rjmp	.+6      	; 0x2c98 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	87 70       	andi	r24, 0x07	; 7
    2c96:	e9 cf       	rjmp	.-46     	; 0x2c6a <process_tapping+0x11a>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2c98:	d6 2e       	mov	r13, r22
    2c9a:	66 23       	and	r22, r22
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <process_tapping+0x150>
    2c9e:	35 c1       	rjmp	.+618    	; 0x2f0a <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2ca0:	80 91 be 01 	lds	r24, 0x01BE
    2ca4:	81 60       	ori	r24, 0x01	; 1
    2ca6:	80 93 be 01 	sts	0x01BE, r24
    2caa:	53 c0       	rjmp	.+166    	; 0x2d52 <process_tapping+0x202>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2cac:	e5 13       	cpse	r30, r21
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <process_tapping+0x170>
    2cb0:	74 13       	cpse	r23, r20
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <process_tapping+0x170>
    2cb4:	61 11       	cpse	r22, r1
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <process_tapping+0x170>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2cb8:	d8 01       	movw	r26, r16
    2cba:	15 96       	adiw	r26, 0x05	; 5
    2cbc:	fc 93       	st	X, r31
    2cbe:	ae c0       	rjmp	.+348    	; 0x2e1c <process_tapping+0x2cc>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2cc0:	4d 87       	std	Y+13, r20	; 0x0d
    2cc2:	5e 87       	std	Y+14, r21	; 0x0e
    2cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc8:	6a 8b       	std	Y+18, r22	; 0x12
    2cca:	0e 94 cd 14 	call	0x299a	; 0x299a <is_tap_key>
    2cce:	6a 89       	ldd	r22, Y+18	; 0x12
    2cd0:	88 23       	and	r24, r24
    2cd2:	29 f1       	breq	.+74     	; 0x2d1e <process_tapping+0x1ce>
    2cd4:	d6 2e       	mov	r13, r22
    2cd6:	66 23       	and	r22, r22
    2cd8:	11 f1       	breq	.+68     	; 0x2d1e <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    2cda:	20 91 be 01 	lds	r18, 0x01BE
    2cde:	82 2f       	mov	r24, r18
    2ce0:	82 95       	swap	r24
    2ce2:	8f 70       	andi	r24, 0x0F	; 15
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	02 97       	sbiw	r24, 0x02	; 2
    2ce8:	0c f4       	brge	.+2      	; 0x2cec <process_tapping+0x19c>
    2cea:	60 c0       	rjmp	.+192    	; 0x2dac <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2cec:	80 91 b9 01 	lds	r24, 0x01B9
    2cf0:	90 91 ba 01 	lds	r25, 0x01BA
    2cf4:	98 87       	std	Y+8, r25	; 0x08
    2cf6:	8f 83       	std	Y+7, r24	; 0x07
    2cf8:	19 86       	std	Y+9, r1	; 0x09
    2cfa:	fb 86       	std	Y+11, r15	; 0x0b
    2cfc:	ea 86       	std	Y+10, r14	; 0x0a
    2cfe:	2c 87       	std	Y+12, r18	; 0x0c
    2d00:	ce 01       	movw	r24, r28
    2d02:	07 96       	adiw	r24, 0x07	; 7
    2d04:	51 c0       	rjmp	.+162    	; 0x2da8 <process_tapping+0x258>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d06:	e5 17       	cp	r30, r21
    2d08:	31 f1       	breq	.+76     	; 0x2d56 <process_tapping+0x206>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2d0a:	4d 87       	std	Y+13, r20	; 0x0d
    2d0c:	5e 87       	std	Y+14, r21	; 0x0e
    2d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d12:	6a 8b       	std	Y+18, r22	; 0x12
    2d14:	0e 94 cd 14 	call	0x299a	; 0x299a <is_tap_key>
    2d18:	6a 89       	ldd	r22, Y+18	; 0x12
    2d1a:	81 11       	cpse	r24, r1
    2d1c:	2e c0       	rjmp	.+92     	; 0x2d7a <process_tapping+0x22a>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2d1e:	c8 01       	movw	r24, r16
    2d20:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
    2d24:	a4 c0       	rjmp	.+328    	; 0x2e6e <process_tapping+0x31e>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2d26:	8f 2f       	mov	r24, r31
    2d28:	80 7f       	andi	r24, 0xF0	; 240
    2d2a:	69 f7       	brne	.-38     	; 0x2d06 <process_tapping+0x1b6>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2d2c:	7e 2d       	mov	r23, r14
    2d2e:	f9 8a       	std	Y+17, r15	; 0x11
    2d30:	e8 8a       	std	Y+16, r14	; 0x10
    2d32:	89 89       	ldd	r24, Y+17	; 0x11
    2d34:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <debug_event>
                process_action(&tapping_key);
    2d38:	89 eb       	ldi	r24, 0xB9	; 185
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
                tapping_key = (keyrecord_t){};
    2d40:	e9 eb       	ldi	r30, 0xB9	; 185
    2d42:	f1 e0       	ldi	r31, 0x01	; 1
    2d44:	86 e0       	ldi	r24, 0x06	; 6
    2d46:	df 01       	movw	r26, r30
    2d48:	1d 92       	st	X+, r1
    2d4a:	8a 95       	dec	r24
    2d4c:	e9 f7       	brne	.-6      	; 0x2d48 <process_tapping+0x1f8>
                debug_tapping_key();
    2d4e:	0e 94 32 15 	call	0x2a64	; 0x2a64 <debug_tapping_key>
                return false;
    2d52:	d1 2c       	mov	r13, r1
    2d54:	da c0       	rjmp	.+436    	; 0x2f0a <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d56:	74 13       	cpse	r23, r20
    2d58:	d8 cf       	rjmp	.-80     	; 0x2d0a <process_tapping+0x1ba>
    2d5a:	61 11       	cpse	r22, r1
    2d5c:	d6 cf       	rjmp	.-84     	; 0x2d0a <process_tapping+0x1ba>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2d5e:	d8 01       	movw	r26, r16
    2d60:	15 96       	adiw	r26, 0x05	; 5
    2d62:	fc 93       	st	X, r31
                    process_action(keyp);
    2d64:	c8 01       	movw	r24, r16
    2d66:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
                    tapping_key = (keyrecord_t){};
    2d6a:	e9 eb       	ldi	r30, 0xB9	; 185
    2d6c:	f1 e0       	ldi	r31, 0x01	; 1
    2d6e:	86 e0       	ldi	r24, 0x06	; 6
    2d70:	df 01       	movw	r26, r30
    2d72:	1d 92       	st	X+, r1
    2d74:	8a 95       	dec	r24
    2d76:	e9 f7       	brne	.-6      	; 0x2d72 <process_tapping+0x222>
                    return true;
    2d78:	c8 c0       	rjmp	.+400    	; 0x2f0a <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2d7a:	d6 2e       	mov	r13, r22
    2d7c:	66 23       	and	r22, r22
    2d7e:	79 f2       	breq	.-98     	; 0x2d1e <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    2d80:	20 91 be 01 	lds	r18, 0x01BE
    2d84:	82 2f       	mov	r24, r18
    2d86:	82 95       	swap	r24
    2d88:	8f 70       	andi	r24, 0x0F	; 15
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	02 97       	sbiw	r24, 0x02	; 2
    2d8e:	74 f0       	brlt	.+28     	; 0x2dac <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2d90:	80 91 b9 01 	lds	r24, 0x01B9
    2d94:	90 91 ba 01 	lds	r25, 0x01BA
    2d98:	9a 83       	std	Y+2, r25	; 0x02
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	1b 82       	std	Y+3, r1	; 0x03
    2d9e:	fd 82       	std	Y+5, r15	; 0x05
    2da0:	ec 82       	std	Y+4, r14	; 0x04
    2da2:	2e 83       	std	Y+6, r18	; 0x06
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    2dac:	86 e0       	ldi	r24, 0x06	; 6
    2dae:	f8 01       	movw	r30, r16
    2db0:	a9 eb       	ldi	r26, 0xB9	; 185
    2db2:	b1 e0       	ldi	r27, 0x01	; 1
    2db4:	01 90       	ld	r0, Z+
    2db6:	0d 92       	st	X+, r0
    2db8:	8a 95       	dec	r24
    2dba:	e1 f7       	brne	.-8      	; 0x2db4 <process_tapping+0x264>
                    waiting_buffer_scan_tap();
    2dbc:	0e 94 40 15 	call	0x2a80	; 0x2a80 <waiting_buffer_scan_tap>
    2dc0:	6f c0       	rjmp	.+222    	; 0x2ea0 <process_tapping+0x350>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2dc2:	e2 16       	cp	r14, r18
    2dc4:	f3 06       	cpc	r15, r19
    2dc6:	40 f0       	brcs	.+16     	; 0x2dd8 <process_tapping+0x288>
    2dc8:	c7 01       	movw	r24, r14
    2dca:	82 1b       	sub	r24, r18
    2dcc:	93 0b       	sbc	r25, r19
    2dce:	9c 01       	movw	r18, r24
    2dd0:	2c 32       	cpi	r18, 0x2C	; 44
    2dd2:	31 40       	sbci	r19, 0x01	; 1
    2dd4:	48 f0       	brcs	.+18     	; 0x2de8 <process_tapping+0x298>
    2dd6:	57 c0       	rjmp	.+174    	; 0x2e86 <process_tapping+0x336>
    2dd8:	20 95       	com	r18
    2dda:	30 95       	com	r19
    2ddc:	2e 0d       	add	r18, r14
    2dde:	3f 1d       	adc	r19, r15
    2de0:	2c 32       	cpi	r18, 0x2C	; 44
    2de2:	31 40       	sbci	r19, 0x01	; 1
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <process_tapping+0x298>
    2de6:	4f c0       	rjmp	.+158    	; 0x2e86 <process_tapping+0x336>
            if (event.pressed) {
    2de8:	d6 2e       	mov	r13, r22
    2dea:	66 23       	and	r22, r22
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <process_tapping+0x2a0>
    2dee:	97 cf       	rjmp	.-210    	; 0x2d1e <process_tapping+0x1ce>
                if (IS_TAPPING_KEY(event.key)) {
    2df0:	e5 13       	cpse	r30, r21
    2df2:	29 c0       	rjmp	.+82     	; 0x2e46 <process_tapping+0x2f6>
    2df4:	74 13       	cpse	r23, r20
    2df6:	27 c0       	rjmp	.+78     	; 0x2e46 <process_tapping+0x2f6>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2df8:	80 91 be 01 	lds	r24, 0x01BE
    2dfc:	80 fd       	sbrc	r24, 0
    2dfe:	1a c0       	rjmp	.+52     	; 0x2e34 <process_tapping+0x2e4>
    2e00:	98 2f       	mov	r25, r24
    2e02:	92 95       	swap	r25
    2e04:	9f 70       	andi	r25, 0x0F	; 15
    2e06:	b1 f0       	breq	.+44     	; 0x2e34 <process_tapping+0x2e4>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2e08:	f8 01       	movw	r30, r16
    2e0a:	85 83       	std	Z+5, r24	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2e0c:	9f 30       	cpi	r25, 0x0F	; 15
    2e0e:	31 f0       	breq	.+12     	; 0x2e1c <process_tapping+0x2cc>
    2e10:	9f 5f       	subi	r25, 0xFF	; 255
    2e12:	92 95       	swap	r25
    2e14:	90 7f       	andi	r25, 0xF0	; 240
    2e16:	8f 70       	andi	r24, 0x0F	; 15
    2e18:	89 2b       	or	r24, r25
    2e1a:	85 83       	std	Z+5, r24	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
                        tapping_key = *keyp;
    2e22:	86 e0       	ldi	r24, 0x06	; 6
    2e24:	f8 01       	movw	r30, r16
    2e26:	a9 eb       	ldi	r26, 0xB9	; 185
    2e28:	b1 e0       	ldi	r27, 0x01	; 1
    2e2a:	01 90       	ld	r0, Z+
    2e2c:	0d 92       	st	X+, r0
    2e2e:	8a 95       	dec	r24
    2e30:	e1 f7       	brne	.-8      	; 0x2e2a <process_tapping+0x2da>
    2e32:	36 c0       	rjmp	.+108    	; 0x2ea0 <process_tapping+0x350>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2e34:	86 e0       	ldi	r24, 0x06	; 6
    2e36:	f8 01       	movw	r30, r16
    2e38:	a9 eb       	ldi	r26, 0xB9	; 185
    2e3a:	b1 e0       	ldi	r27, 0x01	; 1
    2e3c:	01 90       	ld	r0, Z+
    2e3e:	0d 92       	st	X+, r0
    2e40:	8a 95       	dec	r24
    2e42:	e1 f7       	brne	.-8      	; 0x2e3c <process_tapping+0x2ec>
                        return true;
    2e44:	62 c0       	rjmp	.+196    	; 0x2f0a <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    2e46:	4d 87       	std	Y+13, r20	; 0x0d
    2e48:	5e 87       	std	Y+14, r21	; 0x0e
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	0e 94 cd 14 	call	0x299a	; 0x299a <is_tap_key>
    2e52:	88 23       	and	r24, r24
    2e54:	79 f0       	breq	.+30     	; 0x2e74 <process_tapping+0x324>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2e56:	86 e0       	ldi	r24, 0x06	; 6
    2e58:	f8 01       	movw	r30, r16
    2e5a:	a9 eb       	ldi	r26, 0xB9	; 185
    2e5c:	b1 e0       	ldi	r27, 0x01	; 1
    2e5e:	01 90       	ld	r0, Z+
    2e60:	0d 92       	st	X+, r0
    2e62:	8a 95       	dec	r24
    2e64:	e1 f7       	brne	.-8      	; 0x2e5e <process_tapping+0x30e>
                    waiting_buffer_scan_tap();
    2e66:	0e 94 40 15 	call	0x2a80	; 0x2a80 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2e6a:	0e 94 32 15 	call	0x2a64	; 0x2a64 <debug_tapping_key>
                    return true;
    2e6e:	dd 24       	eor	r13, r13
    2e70:	d3 94       	inc	r13
    2e72:	4b c0       	rjmp	.+150    	; 0x2f0a <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2e74:	80 91 be 01 	lds	r24, 0x01BE
    2e78:	81 60       	ori	r24, 0x01	; 1
    2e7a:	80 93 be 01 	sts	0x01BE, r24
                    process_action(keyp);
    2e7e:	c8 01       	movw	r24, r16
    2e80:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
                    return true;
    2e84:	42 c0       	rjmp	.+132    	; 0x2f0a <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2e86:	7e 2d       	mov	r23, r14
    2e88:	f9 8a       	std	Y+17, r15	; 0x11
    2e8a:	e8 8a       	std	Y+16, r14	; 0x10
    2e8c:	89 89       	ldd	r24, Y+17	; 0x11
    2e8e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <debug_event>
            tapping_key = (keyrecord_t){};
    2e92:	e9 eb       	ldi	r30, 0xB9	; 185
    2e94:	f1 e0       	ldi	r31, 0x01	; 1
    2e96:	86 e0       	ldi	r24, 0x06	; 6
    2e98:	df 01       	movw	r26, r30
    2e9a:	1d 92       	st	X+, r1
    2e9c:	8a 95       	dec	r24
    2e9e:	e9 f7       	brne	.-6      	; 0x2e9a <process_tapping+0x34a>
            debug_tapping_key();
    2ea0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <debug_tapping_key>
            return false;
    2ea4:	32 c0       	rjmp	.+100    	; 0x2f0a <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2ea6:	66 23       	and	r22, r22
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <process_tapping+0x35c>
    2eaa:	39 cf       	rjmp	.-398    	; 0x2d1e <process_tapping+0x1ce>
    2eac:	4d 87       	std	Y+13, r20	; 0x0d
    2eae:	5e 87       	std	Y+14, r21	; 0x0e
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	0e 94 cd 14 	call	0x299a	; 0x299a <is_tap_key>
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <process_tapping+0x36e>
    2ebc:	30 cf       	rjmp	.-416    	; 0x2d1e <process_tapping+0x1ce>
    2ebe:	cb cf       	rjmp	.-106    	; 0x2e56 <process_tapping+0x306>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2ec0:	4d 87       	std	Y+13, r20	; 0x0d
    2ec2:	5e 87       	std	Y+14, r21	; 0x0e
    2ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec8:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <layer_switch_get_action>
                    switch (action.kind.id) {
    2ecc:	29 2f       	mov	r18, r25
    2ece:	22 95       	swap	r18
    2ed0:	2f 70       	andi	r18, 0x0F	; 15
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	22 30       	cpi	r18, 0x02	; 2
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	2c f4       	brge	.+10     	; 0x2ee4 <process_tapping+0x394>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2eda:	9f 70       	andi	r25, 0x0F	; 15
    2edc:	41 f0       	breq	.+16     	; 0x2eee <process_tapping+0x39e>
    2ede:	81 11       	cpse	r24, r1
    2ee0:	06 c0       	rjmp	.+12     	; 0x2eee <process_tapping+0x39e>
    2ee2:	0c c0       	rjmp	.+24     	; 0x2efc <process_tapping+0x3ac>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    2ee4:	24 30       	cpi	r18, 0x04	; 4
    2ee6:	31 05       	cpc	r19, r1
    2ee8:	2c f4       	brge	.+10     	; 0x2ef4 <process_tapping+0x3a4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2eea:	9f 70       	andi	r25, 0x0F	; 15
    2eec:	49 f4       	brne	.+18     	; 0x2f00 <process_tapping+0x3b0>
                            if (IS_MOD(action.key.code)) return false;
    2eee:	80 5e       	subi	r24, 0xE0	; 224
    2ef0:	88 30       	cpi	r24, 0x08	; 8
    2ef2:	20 f0       	brcs	.+8      	; 0x2efc <process_tapping+0x3ac>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    2ef4:	c8 01       	movw	r24, r16
    2ef6:	0e 94 aa 11 	call	0x2354	; 0x2354 <process_action>
                    return true;
    2efa:	cf 2c       	mov	r12, r15
    2efc:	dc 2c       	mov	r13, r12
    2efe:	05 c0       	rjmp	.+10     	; 0x2f0a <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2f00:	f8 01       	movw	r30, r16
    2f02:	95 81       	ldd	r25, Z+5	; 0x05
    2f04:	90 7f       	andi	r25, 0xF0	; 240
    2f06:	99 f7       	brne	.-26     	; 0x2eee <process_tapping+0x39e>
    2f08:	f9 cf       	rjmp	.-14     	; 0x2efc <process_tapping+0x3ac>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2f0a:	8d 2d       	mov	r24, r13
    2f0c:	62 96       	adiw	r28, 0x12	; 18
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	1f 91       	pop	r17
    2f1e:	0f 91       	pop	r16
    2f20:	ff 90       	pop	r15
    2f22:	ef 90       	pop	r14
    2f24:	df 90       	pop	r13
    2f26:	cf 90       	pop	r12
    2f28:	08 95       	ret

00002f2a <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2f2a:	1f 93       	push	r17
    2f2c:	cf 93       	push	r28
    2f2e:	df 93       	push	r29
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	2c 97       	sbiw	r28, 0x0c	; 12
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	4f 83       	std	Y+7, r20	; 0x07
    2f42:	58 87       	std	Y+8, r21	; 0x08
    2f44:	69 87       	std	Y+9, r22	; 0x09
    2f46:	7a 87       	std	Y+10, r23	; 0x0a
    2f48:	8b 87       	std	Y+11, r24	; 0x0b
    2f4a:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2f4c:	ce 01       	movw	r24, r28
    2f4e:	07 96       	adiw	r24, 0x07	; 7
    2f50:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <process_tapping>
    2f54:	88 23       	and	r24, r24
    2f56:	c1 f0       	breq	.+48     	; 0x2f88 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    2f58:	2f 81       	ldd	r18, Y+7	; 0x07
    2f5a:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f60:	89 2b       	or	r24, r25
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <action_tapping_process+0x46>
    2f64:	3f 3f       	cpi	r19, 0xFF	; 255
    2f66:	11 f0       	breq	.+4      	; 0x2f6c <action_tapping_process+0x42>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	03 c0       	rjmp	.+6      	; 0x2f72 <action_tapping_process+0x48>
    2f6c:	2f 3f       	cpi	r18, 0xFF	; 255
    2f6e:	e1 f7       	brne	.-8      	; 0x2f68 <action_tapping_process+0x3e>
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	81 11       	cpse	r24, r1
    2f74:	47 c0       	rjmp	.+142    	; 0x3004 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    2f76:	4f 81       	ldd	r20, Y+7	; 0x07
    2f78:	58 85       	ldd	r21, Y+8	; 0x08
    2f7a:	69 85       	ldd	r22, Y+9	; 0x09
    2f7c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f80:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f82:	0e 94 01 15 	call	0x2a02	; 0x2a02 <debug_record>
    2f86:	3e c0       	rjmp	.+124    	; 0x3004 <action_tapping_process+0xda>
    2f88:	86 e0       	ldi	r24, 0x06	; 6
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	37 96       	adiw	r30, 0x07	; 7
    2f8e:	de 01       	movw	r26, r28
    2f90:	11 96       	adiw	r26, 0x01	; 1
    2f92:	01 90       	ld	r0, Z+
    2f94:	0d 92       	st	X+, r0
    2f96:	8a 95       	dec	r24
    2f98:	e1 f7       	brne	.-8      	; 0x2f92 <action_tapping_process+0x68>
    2f9a:	ff 81       	ldd	r31, Y+7	; 0x07
    2f9c:	e8 85       	ldd	r30, Y+8	; 0x08
    2f9e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2fa0:	5b 85       	ldd	r21, Y+11	; 0x0b
    2fa2:	41 15       	cp	r20, r1
    2fa4:	51 05       	cpc	r21, r1
    2fa6:	31 f0       	breq	.+12     	; 0x2fb4 <action_tapping_process+0x8a>
    2fa8:	ef 3f       	cpi	r30, 0xFF	; 255
    2faa:	31 f4       	brne	.+12     	; 0x2fb8 <action_tapping_process+0x8e>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	ff 3f       	cpi	r31, 0xFF	; 255
    2fb0:	19 f4       	brne	.+6      	; 0x2fb8 <action_tapping_process+0x8e>
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <action_tapping_process+0x90>
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	01 c0       	rjmp	.+2      	; 0x2fba <action_tapping_process+0x90>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    2fba:	80 fd       	sbrc	r24, 0
    2fbc:	23 c0       	rjmp	.+70     	; 0x3004 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2fbe:	20 91 88 01 	lds	r18, 0x0188
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	c9 01       	movw	r24, r18
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	87 70       	andi	r24, 0x07	; 7
    2fca:	99 27       	eor	r25, r25
    2fcc:	60 91 87 01 	lds	r22, 0x0187
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	86 17       	cp	r24, r22
    2fd4:	97 07       	cpc	r25, r23
    2fd6:	f1 f1       	breq	.+124    	; 0x3054 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2fd8:	f9 83       	std	Y+1, r31	; 0x01
    2fda:	ea 83       	std	Y+2, r30	; 0x02
    2fdc:	5d 83       	std	Y+5, r21	; 0x05
    2fde:	4c 83       	std	Y+4, r20	; 0x04
    2fe0:	96 e0       	ldi	r25, 0x06	; 6
    2fe2:	92 9f       	mul	r25, r18
    2fe4:	d0 01       	movw	r26, r0
    2fe6:	93 9f       	mul	r25, r19
    2fe8:	b0 0d       	add	r27, r0
    2fea:	11 24       	eor	r1, r1
    2fec:	a7 57       	subi	r26, 0x77	; 119
    2fee:	be 4f       	sbci	r27, 0xFE	; 254
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	31 96       	adiw	r30, 0x01	; 1
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	0d 92       	st	X+, r0
    2ff8:	9a 95       	dec	r25
    2ffa:	e1 f7       	brne	.-8      	; 0x2ff4 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2ffc:	80 93 88 01 	sts	0x0188, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3000:	0e 94 11 15 	call	0x2a22	; 0x2a22 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3004:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3006:	80 91 87 01 	lds	r24, 0x0187
    300a:	90 91 88 01 	lds	r25, 0x0188
    300e:	89 17       	cp	r24, r25
    3010:	79 f1       	breq	.+94     	; 0x3070 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3012:	18 9f       	mul	r17, r24
    3014:	c0 01       	movw	r24, r0
    3016:	11 24       	eor	r1, r1
    3018:	87 57       	subi	r24, 0x77	; 119
    301a:	9e 4f       	sbci	r25, 0xFE	; 254
    301c:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <process_tapping>
    3020:	88 23       	and	r24, r24
    3022:	31 f1       	breq	.+76     	; 0x3070 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3024:	e0 91 87 01 	lds	r30, 0x0187
    3028:	1e 9f       	mul	r17, r30
    302a:	f0 01       	movw	r30, r0
    302c:	11 24       	eor	r1, r1
    302e:	e7 57       	subi	r30, 0x77	; 119
    3030:	fe 4f       	sbci	r31, 0xFE	; 254
    3032:	40 81       	ld	r20, Z
    3034:	51 81       	ldd	r21, Z+1	; 0x01
    3036:	62 81       	ldd	r22, Z+2	; 0x02
    3038:	73 81       	ldd	r23, Z+3	; 0x03
    303a:	84 81       	ldd	r24, Z+4	; 0x04
    303c:	95 81       	ldd	r25, Z+5	; 0x05
    303e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3042:	80 91 87 01 	lds	r24, 0x0187
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	87 70       	andi	r24, 0x07	; 7
    304c:	99 27       	eor	r25, r25
    304e:	80 93 87 01 	sts	0x0187, r24
    3052:	d9 cf       	rjmp	.-78     	; 0x3006 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3054:	0e 94 c9 14 	call	0x2992	; 0x2992 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3058:	10 92 88 01 	sts	0x0188, r1
    waiting_buffer_tail = 0;
    305c:	10 92 87 01 	sts	0x0187, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3060:	e9 eb       	ldi	r30, 0xB9	; 185
    3062:	f1 e0       	ldi	r31, 0x01	; 1
    3064:	86 e0       	ldi	r24, 0x06	; 6
    3066:	df 01       	movw	r26, r30
    3068:	1d 92       	st	X+, r1
    306a:	8a 95       	dec	r24
    306c:	e9 f7       	brne	.-6      	; 0x3068 <action_tapping_process+0x13e>
    306e:	ca cf       	rjmp	.-108    	; 0x3004 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3070:	2c 96       	adiw	r28, 0x0c	; 12
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	df 91       	pop	r29
    307e:	cf 91       	pop	r28
    3080:	1f 91       	pop	r17
    3082:	08 95       	ret

00003084 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3084:	df 92       	push	r13
    3086:	ef 92       	push	r14
    3088:	ff 92       	push	r15
    308a:	0f 93       	push	r16
    308c:	1f 93       	push	r17
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	09 f4       	brne	.+2      	; 0x309a <action_macro_play+0x16>
    3098:	8a c0       	rjmp	.+276    	; 0x31ae <action_macro_play+0x12a>
    309a:	e1 2c       	mov	r14, r1
    309c:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    309e:	dd 24       	eor	r13, r13
    30a0:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    30a2:	ef 01       	movw	r28, r30
    30a4:	21 96       	adiw	r28, 0x01	; 1
    30a6:	84 91       	lpm	r24, Z
    30a8:	85 37       	cpi	r24, 0x75	; 117
    30aa:	09 f4       	brne	.+2      	; 0x30ae <action_macro_play+0x2a>
    30ac:	61 c0       	rjmp	.+194    	; 0x3170 <action_macro_play+0xec>
    30ae:	58 f4       	brcc	.+22     	; 0x30c6 <action_macro_play+0x42>
    30b0:	84 37       	cpi	r24, 0x74	; 116
    30b2:	08 f0       	brcs	.+2      	; 0x30b6 <action_macro_play+0x32>
    30b4:	4e c0       	rjmp	.+156    	; 0x3152 <action_macro_play+0xce>
    30b6:	84 30       	cpi	r24, 0x04	; 4
    30b8:	08 f0       	brcs	.+2      	; 0x30bc <action_macro_play+0x38>
    30ba:	6a c0       	rjmp	.+212    	; 0x3190 <action_macro_play+0x10c>
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	d1 f0       	breq	.+52     	; 0x30f4 <action_macro_play+0x70>
    30c0:	82 30       	cpi	r24, 0x02	; 2
    30c2:	71 f1       	breq	.+92     	; 0x3120 <action_macro_play+0x9c>
    30c4:	74 c0       	rjmp	.+232    	; 0x31ae <action_macro_play+0x12a>
    30c6:	88 37       	cpi	r24, 0x78	; 120
    30c8:	09 f4       	brne	.+2      	; 0x30cc <action_macro_play+0x48>
    30ca:	5d c0       	rjmp	.+186    	; 0x3186 <action_macro_play+0x102>
    30cc:	50 f4       	brcc	.+20     	; 0x30e2 <action_macro_play+0x5e>
    30ce:	86 37       	cpi	r24, 0x76	; 118
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <action_macro_play+0x50>
    30d2:	55 c0       	rjmp	.+170    	; 0x317e <action_macro_play+0xfa>
    30d4:	87 37       	cpi	r24, 0x77	; 119
    30d6:	09 f0       	breq	.+2      	; 0x30da <action_macro_play+0x56>
    30d8:	6a c0       	rjmp	.+212    	; 0x31ae <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    30da:	8e 2d       	mov	r24, r14
    30dc:	0e 94 c5 1a 	call	0x358a	; 0x358a <set_mods>
    30e0:	54 c0       	rjmp	.+168    	; 0x318a <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    30e2:	9c e7       	ldi	r25, 0x7C	; 124
    30e4:	98 0f       	add	r25, r24
    30e6:	90 37       	cpi	r25, 0x70	; 112
    30e8:	08 f0       	brcs	.+2      	; 0x30ec <action_macro_play+0x68>
    30ea:	61 c0       	rjmp	.+194    	; 0x31ae <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    30ec:	8f 77       	andi	r24, 0x7F	; 127
    30ee:	0e 94 74 11 	call	0x22e8	; 0x22e8 <unregister_code>
                break;
    30f2:	50 c0       	rjmp	.+160    	; 0x3194 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    30f4:	8f 01       	movw	r16, r30
    30f6:	0e 5f       	subi	r16, 0xFE	; 254
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    30fe:	90 e2       	ldi	r25, 0x20	; 32
    3100:	98 0f       	add	r25, r24
    3102:	98 30       	cpi	r25, 0x08	; 8
    3104:	50 f4       	brcc	.+20     	; 0x311a <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    3106:	87 70       	andi	r24, 0x07	; 7
    3108:	fd 2d       	mov	r31, r13
    310a:	01 c0       	rjmp	.+2      	; 0x310e <action_macro_play+0x8a>
    310c:	ff 0f       	add	r31, r31
    310e:	8a 95       	dec	r24
    3110:	ea f7       	brpl	.-6      	; 0x310c <action_macro_play+0x88>
    3112:	8f 2f       	mov	r24, r31
    3114:	0e 94 cb 1a 	call	0x3596	; 0x3596 <add_weak_mods>
    3118:	15 c0       	rjmp	.+42     	; 0x3144 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    311a:	0e 94 ca 10 	call	0x2194	; 0x2194 <register_code>
    311e:	14 c0       	rjmp	.+40     	; 0x3148 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3120:	8f 01       	movw	r16, r30
    3122:	0e 5f       	subi	r16, 0xFE	; 254
    3124:	1f 4f       	sbci	r17, 0xFF	; 255
    3126:	fe 01       	movw	r30, r28
    3128:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    312a:	90 e2       	ldi	r25, 0x20	; 32
    312c:	98 0f       	add	r25, r24
    312e:	98 30       	cpi	r25, 0x08	; 8
    3130:	68 f4       	brcc	.+26     	; 0x314c <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    3132:	87 70       	andi	r24, 0x07	; 7
    3134:	fd 2d       	mov	r31, r13
    3136:	01 c0       	rjmp	.+2      	; 0x313a <action_macro_play+0xb6>
    3138:	ff 0f       	add	r31, r31
    313a:	8a 95       	dec	r24
    313c:	ea f7       	brpl	.-6      	; 0x3138 <action_macro_play+0xb4>
    313e:	8f 2f       	mov	r24, r31
    3140:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <del_weak_mods>
                    send_keyboard_report();
    3144:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3148:	e8 01       	movw	r28, r16
    314a:	24 c0       	rjmp	.+72     	; 0x3194 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    314c:	0e 94 74 11 	call	0x22e8	; 0x22e8 <unregister_code>
    3150:	fb cf       	rjmp	.-10     	; 0x3148 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3152:	9f 01       	movw	r18, r30
    3154:	2e 5f       	subi	r18, 0xFE	; 254
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	fe 01       	movw	r30, r28
    315a:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    315c:	cc 23       	and	r28, r28
    315e:	69 f0       	breq	.+26     	; 0x317a <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3160:	8f e9       	ldi	r24, 0x9F	; 159
    3162:	9f e0       	ldi	r25, 0x0F	; 15
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <action_macro_play+0xe0>
    3168:	00 c0       	rjmp	.+0      	; 0x316a <action_macro_play+0xe6>
    316a:	00 00       	nop
    316c:	c1 50       	subi	r28, 0x01	; 1
    316e:	f6 cf       	rjmp	.-20     	; 0x315c <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3170:	9f 01       	movw	r18, r30
    3172:	2e 5f       	subi	r18, 0xFE	; 254
    3174:	3f 4f       	sbci	r19, 0xFF	; 255
    3176:	fe 01       	movw	r30, r28
    3178:	f4 90       	lpm	r15, Z
    317a:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    317c:	0b c0       	rjmp	.+22     	; 0x3194 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    317e:	0e 94 b5 1a 	call	0x356a	; 0x356a <get_mods>
    3182:	e8 2e       	mov	r14, r24
                break;
    3184:	07 c0       	rjmp	.+14     	; 0x3194 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3186:	0e 94 c8 1a 	call	0x3590	; 0x3590 <clear_mods>
                send_keyboard_report();
    318a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <send_keyboard_report>
                break;
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3190:	0e 94 ca 10 	call	0x2194	; 0x2194 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3194:	9f 2d       	mov	r25, r15
    3196:	99 23       	and	r25, r25
    3198:	41 f0       	breq	.+16     	; 0x31aa <action_macro_play+0x126>
    319a:	ef e9       	ldi	r30, 0x9F	; 159
    319c:	ff e0       	ldi	r31, 0x0F	; 15
    319e:	31 97       	sbiw	r30, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <action_macro_play+0x11a>
    31a2:	00 c0       	rjmp	.+0      	; 0x31a4 <action_macro_play+0x120>
    31a4:	00 00       	nop
    31a6:	91 50       	subi	r25, 0x01	; 1
    31a8:	f6 cf       	rjmp	.-20     	; 0x3196 <action_macro_play+0x112>
    31aa:	fe 01       	movw	r30, r28
    31ac:	7a cf       	rjmp	.-268    	; 0x30a2 <action_macro_play+0x1e>
    }
}
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	08 95       	ret

000031be <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    31be:	60 93 c3 01 	sts	0x01C3, r22
    31c2:	70 93 c4 01 	sts	0x01C4, r23
    31c6:	80 93 c5 01 	sts	0x01C5, r24
    31ca:	90 93 c6 01 	sts	0x01C6, r25
    hook_default_layer_change(default_layer_state);
    31ce:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    31d2:	0c 94 b7 14 	jmp	0x296e	; 0x296e <clear_keyboard_but_mods>

000031d6 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    31d6:	60 93 bf 01 	sts	0x01BF, r22
    31da:	70 93 c0 01 	sts	0x01C0, r23
    31de:	80 93 c1 01 	sts	0x01C1, r24
    31e2:	90 93 c2 01 	sts	0x01C2, r25
    hook_layer_change(layer_state);
    31e6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    31ea:	0c 94 b7 14 	jmp	0x296e	; 0x296e <clear_keyboard_but_mods>

000031ee <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    31ee:	08 95       	ret

000031f0 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    31f0:	0c 94 df 18 	jmp	0x31be	; 0x31be <default_layer_state_set>

000031f4 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    31f4:	0f 93       	push	r16
    31f6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    31f8:	00 91 c3 01 	lds	r16, 0x01C3
    31fc:	10 91 c4 01 	lds	r17, 0x01C4
    3200:	20 91 c5 01 	lds	r18, 0x01C5
    3204:	30 91 c6 01 	lds	r19, 0x01C6
    3208:	60 2b       	or	r22, r16
    320a:	71 2b       	or	r23, r17
    320c:	82 2b       	or	r24, r18
    320e:	93 2b       	or	r25, r19
}
    3210:	1f 91       	pop	r17
    3212:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3214:	0c 94 df 18 	jmp	0x31be	; 0x31be <default_layer_state_set>

00003218 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    321c:	00 91 c3 01 	lds	r16, 0x01C3
    3220:	10 91 c4 01 	lds	r17, 0x01C4
    3224:	20 91 c5 01 	lds	r18, 0x01C5
    3228:	30 91 c6 01 	lds	r19, 0x01C6
    322c:	60 23       	and	r22, r16
    322e:	71 23       	and	r23, r17
    3230:	82 23       	and	r24, r18
    3232:	93 23       	and	r25, r19
}
    3234:	1f 91       	pop	r17
    3236:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3238:	0c 94 df 18 	jmp	0x31be	; 0x31be <default_layer_state_set>

0000323c <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3240:	00 91 c3 01 	lds	r16, 0x01C3
    3244:	10 91 c4 01 	lds	r17, 0x01C4
    3248:	20 91 c5 01 	lds	r18, 0x01C5
    324c:	30 91 c6 01 	lds	r19, 0x01C6
    3250:	60 27       	eor	r22, r16
    3252:	71 27       	eor	r23, r17
    3254:	82 27       	eor	r24, r18
    3256:	93 27       	eor	r25, r19
}
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    325c:	0c 94 df 18 	jmp	0x31be	; 0x31be <default_layer_state_set>

00003260 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3260:	60 e0       	ldi	r22, 0x00	; 0
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	cb 01       	movw	r24, r22
    3266:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

0000326a <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    326a:	41 e0       	ldi	r20, 0x01	; 1
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	04 c0       	rjmp	.+8      	; 0x327c <layer_move+0x12>
    3274:	44 0f       	add	r20, r20
    3276:	55 1f       	adc	r21, r21
    3278:	66 1f       	adc	r22, r22
    327a:	77 1f       	adc	r23, r23
    327c:	8a 95       	dec	r24
    327e:	d2 f7       	brpl	.-12     	; 0x3274 <layer_move+0xa>
    3280:	cb 01       	movw	r24, r22
    3282:	ba 01       	movw	r22, r20
    3284:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

00003288 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3288:	41 e0       	ldi	r20, 0x01	; 1
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	70 e0       	ldi	r23, 0x00	; 0
    3290:	04 c0       	rjmp	.+8      	; 0x329a <layer_on+0x12>
    3292:	44 0f       	add	r20, r20
    3294:	55 1f       	adc	r21, r21
    3296:	66 1f       	adc	r22, r22
    3298:	77 1f       	adc	r23, r23
    329a:	8a 95       	dec	r24
    329c:	d2 f7       	brpl	.-12     	; 0x3292 <layer_on+0xa>
    329e:	80 91 bf 01 	lds	r24, 0x01BF
    32a2:	90 91 c0 01 	lds	r25, 0x01C0
    32a6:	a0 91 c1 01 	lds	r26, 0x01C1
    32aa:	b0 91 c2 01 	lds	r27, 0x01C2
    32ae:	48 2b       	or	r20, r24
    32b0:	59 2b       	or	r21, r25
    32b2:	6a 2b       	or	r22, r26
    32b4:	7b 2b       	or	r23, r27
    32b6:	cb 01       	movw	r24, r22
    32b8:	ba 01       	movw	r22, r20
    32ba:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

000032be <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    32be:	41 e0       	ldi	r20, 0x01	; 1
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	60 e0       	ldi	r22, 0x00	; 0
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	04 c0       	rjmp	.+8      	; 0x32d0 <layer_off+0x12>
    32c8:	44 0f       	add	r20, r20
    32ca:	55 1f       	adc	r21, r21
    32cc:	66 1f       	adc	r22, r22
    32ce:	77 1f       	adc	r23, r23
    32d0:	8a 95       	dec	r24
    32d2:	d2 f7       	brpl	.-12     	; 0x32c8 <layer_off+0xa>
    32d4:	40 95       	com	r20
    32d6:	50 95       	com	r21
    32d8:	60 95       	com	r22
    32da:	70 95       	com	r23
    32dc:	80 91 bf 01 	lds	r24, 0x01BF
    32e0:	90 91 c0 01 	lds	r25, 0x01C0
    32e4:	a0 91 c1 01 	lds	r26, 0x01C1
    32e8:	b0 91 c2 01 	lds	r27, 0x01C2
    32ec:	48 23       	and	r20, r24
    32ee:	59 23       	and	r21, r25
    32f0:	6a 23       	and	r22, r26
    32f2:	7b 23       	and	r23, r27
    32f4:	cb 01       	movw	r24, r22
    32f6:	ba 01       	movw	r22, r20
    32f8:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

000032fc <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    32fc:	41 e0       	ldi	r20, 0x01	; 1
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	60 e0       	ldi	r22, 0x00	; 0
    3302:	70 e0       	ldi	r23, 0x00	; 0
    3304:	04 c0       	rjmp	.+8      	; 0x330e <layer_invert+0x12>
    3306:	44 0f       	add	r20, r20
    3308:	55 1f       	adc	r21, r21
    330a:	66 1f       	adc	r22, r22
    330c:	77 1f       	adc	r23, r23
    330e:	8a 95       	dec	r24
    3310:	d2 f7       	brpl	.-12     	; 0x3306 <layer_invert+0xa>
    3312:	80 91 bf 01 	lds	r24, 0x01BF
    3316:	90 91 c0 01 	lds	r25, 0x01C0
    331a:	a0 91 c1 01 	lds	r26, 0x01C1
    331e:	b0 91 c2 01 	lds	r27, 0x01C2
    3322:	48 27       	eor	r20, r24
    3324:	59 27       	eor	r21, r25
    3326:	6a 27       	eor	r22, r26
    3328:	7b 27       	eor	r23, r27
    332a:	cb 01       	movw	r24, r22
    332c:	ba 01       	movw	r22, r20
    332e:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

00003332 <layer_or>:
}

void layer_or(uint32_t state)
{
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3336:	00 91 bf 01 	lds	r16, 0x01BF
    333a:	10 91 c0 01 	lds	r17, 0x01C0
    333e:	20 91 c1 01 	lds	r18, 0x01C1
    3342:	30 91 c2 01 	lds	r19, 0x01C2
    3346:	60 2b       	or	r22, r16
    3348:	71 2b       	or	r23, r17
    334a:	82 2b       	or	r24, r18
    334c:	93 2b       	or	r25, r19
}
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3352:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

00003356 <layer_and>:
}
void layer_and(uint32_t state)
{
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    335a:	00 91 bf 01 	lds	r16, 0x01BF
    335e:	10 91 c0 01 	lds	r17, 0x01C0
    3362:	20 91 c1 01 	lds	r18, 0x01C1
    3366:	30 91 c2 01 	lds	r19, 0x01C2
    336a:	60 23       	and	r22, r16
    336c:	71 23       	and	r23, r17
    336e:	82 23       	and	r24, r18
    3370:	93 23       	and	r25, r19
}
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3376:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

0000337a <layer_xor>:
}
void layer_xor(uint32_t state)
{
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    337e:	00 91 bf 01 	lds	r16, 0x01BF
    3382:	10 91 c0 01 	lds	r17, 0x01C0
    3386:	20 91 c1 01 	lds	r18, 0x01C1
    338a:	30 91 c2 01 	lds	r19, 0x01C2
    338e:	60 27       	eor	r22, r16
    3390:	71 27       	eor	r23, r17
    3392:	82 27       	eor	r24, r18
    3394:	93 27       	eor	r25, r19
}
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    339a:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <layer_state_set>

0000339e <layer_debug>:
}

void layer_debug(void)
{
    339e:	08 95       	ret

000033a0 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	ec 01       	movw	r28, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    33b2:	c0 90 c3 01 	lds	r12, 0x01C3
    33b6:	d0 90 c4 01 	lds	r13, 0x01C4
    33ba:	e0 90 c5 01 	lds	r14, 0x01C5
    33be:	f0 90 c6 01 	lds	r15, 0x01C6
    33c2:	80 91 bf 01 	lds	r24, 0x01BF
    33c6:	90 91 c0 01 	lds	r25, 0x01C0
    33ca:	a0 91 c1 01 	lds	r26, 0x01C1
    33ce:	b0 91 c2 01 	lds	r27, 0x01C2
    33d2:	c8 2a       	or	r12, r24
    33d4:	d9 2a       	or	r13, r25
    33d6:	ea 2a       	or	r14, r26
    33d8:	fb 2a       	or	r15, r27
    33da:	0f e1       	ldi	r16, 0x1F	; 31
    33dc:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    33de:	b7 01       	movw	r22, r14
    33e0:	a6 01       	movw	r20, r12
    33e2:	00 2e       	mov	r0, r16
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <layer_switch_get_action+0x4e>
    33e6:	76 95       	lsr	r23
    33e8:	67 95       	ror	r22
    33ea:	57 95       	ror	r21
    33ec:	47 95       	ror	r20
    33ee:	0a 94       	dec	r0
    33f0:	d2 f7       	brpl	.-12     	; 0x33e6 <layer_switch_get_action+0x46>
    33f2:	40 ff       	sbrs	r20, 0
    33f4:	07 c0       	rjmp	.+14     	; 0x3404 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    33f6:	be 01       	movw	r22, r28
    33f8:	80 2f       	mov	r24, r16
    33fa:	0e 94 c7 1c 	call	0x398e	; 0x398e <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	91 05       	cpc	r25, r1
    3402:	39 f4       	brne	.+14     	; 0x3412 <layer_switch_get_action+0x72>
    3404:	01 50       	subi	r16, 0x01	; 1
    3406:	11 09       	sbc	r17, r1
    3408:	50 f7       	brcc	.-44     	; 0x33de <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    340a:	be 01       	movw	r22, r28
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	0e 94 c7 1c 	call	0x398e	; 0x398e <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3412:	df 91       	pop	r29
    3414:	cf 91       	pop	r28
    3416:	1f 91       	pop	r17
    3418:	0f 91       	pop	r16
    341a:	ff 90       	pop	r15
    341c:	ef 90       	pop	r14
    341e:	df 90       	pop	r13
    3420:	cf 90       	pop	r12
    3422:	08 95       	ret

00003424 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3424:	90 91 0a 01 	lds	r25, 0x010A
    3428:	99 23       	and	r25, r25
    342a:	61 f1       	breq	.+88     	; 0x3484 <add_key+0x60>
    342c:	90 91 0b 01 	lds	r25, 0x010B
    3430:	99 23       	and	r25, r25
    3432:	41 f1       	breq	.+80     	; 0x3484 <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3434:	98 2f       	mov	r25, r24
    3436:	96 95       	lsr	r25
    3438:	96 95       	lsr	r25
    343a:	96 95       	lsr	r25
    343c:	9f 31       	cpi	r25, 0x1F	; 31
    343e:	88 f4       	brcc	.+34     	; 0x3462 <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3440:	e0 91 0c 01 	lds	r30, 0x010C
    3444:	f0 91 0d 01 	lds	r31, 0x010D
    3448:	e9 0f       	add	r30, r25
    344a:	f1 1d       	adc	r31, r1
    344c:	87 70       	andi	r24, 0x07	; 7
    344e:	21 e0       	ldi	r18, 0x01	; 1
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	01 c0       	rjmp	.+2      	; 0x3456 <add_key+0x32>
    3454:	22 0f       	add	r18, r18
    3456:	8a 95       	dec	r24
    3458:	ea f7       	brpl	.-6      	; 0x3454 <add_key+0x30>
    345a:	81 81       	ldd	r24, Z+1	; 0x01
    345c:	82 2b       	or	r24, r18
    345e:	81 83       	std	Z+1, r24	; 0x01
    3460:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3462:	90 91 ec 01 	lds	r25, 0x01EC
    3466:	90 ff       	sbrs	r25, 0
    3468:	2d c0       	rjmp	.+90     	; 0x34c4 <add_key+0xa0>
    346a:	1f 92       	push	r1
    346c:	8f 93       	push	r24
    346e:	8f ee       	ldi	r24, 0xEF	; 239
    3470:	93 e0       	ldi	r25, 0x03	; 3
    3472:	9f 93       	push	r25
    3474:	8f 93       	push	r24
    3476:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3484:	40 91 0c 01 	lds	r20, 0x010C
    3488:	50 91 0d 01 	lds	r21, 0x010D
    348c:	20 e0       	ldi	r18, 0x00	; 0
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	9f ef       	ldi	r25, 0xFF	; 255
    3492:	fa 01       	movw	r30, r20
    3494:	e2 0f       	add	r30, r18
    3496:	f3 1f       	adc	r31, r19
    3498:	62 81       	ldd	r22, Z+2	; 0x02
    349a:	68 17       	cp	r22, r24
    349c:	99 f0       	breq	.+38     	; 0x34c4 <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    349e:	9f 3f       	cpi	r25, 0xFF	; 255
    34a0:	19 f4       	brne	.+6      	; 0x34a8 <add_key+0x84>
    34a2:	61 11       	cpse	r22, r1
    34a4:	01 c0       	rjmp	.+2      	; 0x34a8 <add_key+0x84>
    34a6:	92 2f       	mov	r25, r18
    34a8:	2f 5f       	subi	r18, 0xFF	; 255
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    34ac:	2e 31       	cpi	r18, 0x1E	; 30
    34ae:	31 05       	cpc	r19, r1
    34b0:	81 f7       	brne	.-32     	; 0x3492 <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    34b2:	9f 3f       	cpi	r25, 0xFF	; 255
    34b4:	39 f0       	breq	.+14     	; 0x34c4 <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    34b6:	fa 01       	movw	r30, r20
    34b8:	e9 0f       	add	r30, r25
    34ba:	f1 1d       	adc	r31, r1
    34bc:	97 fd       	sbrc	r25, 7
    34be:	fa 95       	dec	r31
    34c0:	82 83       	std	Z+2, r24	; 0x02
    34c2:	08 95       	ret
    34c4:	08 95       	ret

000034c6 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    34c6:	90 91 0a 01 	lds	r25, 0x010A
    34ca:	99 23       	and	r25, r25
    34cc:	69 f1       	breq	.+90     	; 0x3528 <del_key+0x62>
    34ce:	90 91 0b 01 	lds	r25, 0x010B
    34d2:	99 23       	and	r25, r25
    34d4:	49 f1       	breq	.+82     	; 0x3528 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    34d6:	98 2f       	mov	r25, r24
    34d8:	96 95       	lsr	r25
    34da:	96 95       	lsr	r25
    34dc:	96 95       	lsr	r25
    34de:	9f 31       	cpi	r25, 0x1F	; 31
    34e0:	90 f4       	brcc	.+36     	; 0x3506 <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    34e2:	e0 91 0c 01 	lds	r30, 0x010C
    34e6:	f0 91 0d 01 	lds	r31, 0x010D
    34ea:	e9 0f       	add	r30, r25
    34ec:	f1 1d       	adc	r31, r1
    34ee:	87 70       	andi	r24, 0x07	; 7
    34f0:	21 e0       	ldi	r18, 0x01	; 1
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	01 c0       	rjmp	.+2      	; 0x34f8 <del_key+0x32>
    34f6:	22 0f       	add	r18, r18
    34f8:	8a 95       	dec	r24
    34fa:	ea f7       	brpl	.-6      	; 0x34f6 <del_key+0x30>
    34fc:	20 95       	com	r18
    34fe:	81 81       	ldd	r24, Z+1	; 0x01
    3500:	28 23       	and	r18, r24
    3502:	21 83       	std	Z+1, r18	; 0x01
    3504:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3506:	90 91 ec 01 	lds	r25, 0x01EC
    350a:	90 ff       	sbrs	r25, 0
    350c:	1f c0       	rjmp	.+62     	; 0x354c <del_key+0x86>
    350e:	1f 92       	push	r1
    3510:	8f 93       	push	r24
    3512:	81 ed       	ldi	r24, 0xD1	; 209
    3514:	93 e0       	ldi	r25, 0x03	; 3
    3516:	9f 93       	push	r25
    3518:	8f 93       	push	r24
    351a:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3528:	40 91 0c 01 	lds	r20, 0x010C
    352c:	50 91 0d 01 	lds	r21, 0x010D
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	fa 01       	movw	r30, r20
    3536:	e2 0f       	add	r30, r18
    3538:	f3 1f       	adc	r31, r19
    353a:	92 81       	ldd	r25, Z+2	; 0x02
    353c:	98 13       	cpse	r25, r24
    353e:	01 c0       	rjmp	.+2      	; 0x3542 <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    3540:	12 82       	std	Z+2, r1	; 0x02
    3542:	2f 5f       	subi	r18, 0xFF	; 255
    3544:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3546:	2e 31       	cpi	r18, 0x1E	; 30
    3548:	31 05       	cpc	r19, r1
    354a:	a1 f7       	brne	.-24     	; 0x3534 <del_key+0x6e>
    354c:	08 95       	ret

0000354e <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3552:	e0 91 0c 01 	lds	r30, 0x010C
    3556:	f0 91 0d 01 	lds	r31, 0x010D
    355a:	e8 0f       	add	r30, r24
    355c:	f9 1f       	adc	r31, r25
    355e:	10 82       	st	Z, r1
    3560:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3562:	80 32       	cpi	r24, 0x20	; 32
    3564:	91 05       	cpc	r25, r1
    3566:	a9 f7       	brne	.-22     	; 0x3552 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3568:	08 95       	ret

0000356a <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    356a:	80 91 eb 01 	lds	r24, 0x01EB
    356e:	08 95       	ret

00003570 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3570:	90 91 eb 01 	lds	r25, 0x01EB
    3574:	98 2b       	or	r25, r24
    3576:	90 93 eb 01 	sts	0x01EB, r25
    357a:	08 95       	ret

0000357c <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    357c:	80 95       	com	r24
    357e:	90 91 eb 01 	lds	r25, 0x01EB
    3582:	98 23       	and	r25, r24
    3584:	90 93 eb 01 	sts	0x01EB, r25
    3588:	08 95       	ret

0000358a <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    358a:	80 93 eb 01 	sts	0x01EB, r24
    358e:	08 95       	ret

00003590 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    3590:	10 92 eb 01 	sts	0x01EB, r1
    3594:	08 95       	ret

00003596 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3596:	90 91 ea 01 	lds	r25, 0x01EA
    359a:	98 2b       	or	r25, r24
    359c:	90 93 ea 01 	sts	0x01EA, r25
    35a0:	08 95       	ret

000035a2 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    35a2:	80 95       	com	r24
    35a4:	90 91 ea 01 	lds	r25, 0x01EA
    35a8:	98 23       	and	r25, r24
    35aa:	90 93 ea 01 	sts	0x01EA, r25
    35ae:	08 95       	ret

000035b0 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    35b0:	10 92 ea 01 	sts	0x01EA, r1
    35b4:	08 95       	ret

000035b6 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    35b6:	80 93 c9 01 	sts	0x01C9, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
    35ba:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    35be:	90 93 c8 01 	sts	0x01C8, r25
    35c2:	80 93 c7 01 	sts	0x01C7, r24
    35c6:	08 95       	ret

000035c8 <clear_oneshot_mods>:
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    35c8:	10 92 c9 01 	sts	0x01C9, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
    35cc:	10 92 c8 01 	sts	0x01C8, r1
    35d0:	10 92 c7 01 	sts	0x01C7, r1
    35d4:	08 95       	ret

000035d6 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    35d6:	40 91 0c 01 	lds	r20, 0x010C
    35da:	50 91 0d 01 	lds	r21, 0x010D
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	fa 01       	movw	r30, r20
    35e6:	e2 0f       	add	r30, r18
    35e8:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	91 11       	cpse	r25, r1
            cnt++;
    35ee:	8f 5f       	subi	r24, 0xFF	; 255
    35f0:	2f 5f       	subi	r18, 0xFF	; 255
    35f2:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    35f4:	2f 31       	cpi	r18, 0x1F	; 31
    35f6:	31 05       	cpc	r19, r1
    35f8:	a9 f7       	brne	.-22     	; 0x35e4 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    35fa:	08 95       	ret

000035fc <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    35fc:	e0 91 0c 01 	lds	r30, 0x010C
    3600:	f0 91 0d 01 	lds	r31, 0x010D
    3604:	80 91 eb 01 	lds	r24, 0x01EB
    3608:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    360a:	e0 91 0c 01 	lds	r30, 0x010C
    360e:	f0 91 0d 01 	lds	r31, 0x010D
    3612:	80 81       	ld	r24, Z
    3614:	90 91 ea 01 	lds	r25, 0x01EA
    3618:	89 2b       	or	r24, r25
    361a:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    361c:	80 91 c9 01 	lds	r24, 0x01C9
    3620:	88 23       	and	r24, r24
    3622:	09 f4       	brne	.+2      	; 0x3626 <send_keyboard_report+0x2a>
    3624:	3e c0       	rjmp	.+124    	; 0x36a2 <send_keyboard_report+0xa6>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
    3626:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    362a:	20 91 c7 01 	lds	r18, 0x01C7
    362e:	30 91 c8 01 	lds	r19, 0x01C8
    3632:	82 17       	cp	r24, r18
    3634:	93 07       	cpc	r25, r19
    3636:	60 f0       	brcs	.+24     	; 0x3650 <send_keyboard_report+0x54>
    3638:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    363c:	20 91 c7 01 	lds	r18, 0x01C7
    3640:	30 91 c8 01 	lds	r19, 0x01C8
    3644:	82 1b       	sub	r24, r18
    3646:	93 0b       	sbc	r25, r19
    3648:	8c 32       	cpi	r24, 0x2C	; 44
    364a:	91 40       	sbci	r25, 0x01	; 1
    364c:	70 f4       	brcc	.+28     	; 0x366a <send_keyboard_report+0x6e>
    364e:	1b c0       	rjmp	.+54     	; 0x3686 <send_keyboard_report+0x8a>
    3650:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    3654:	20 91 c7 01 	lds	r18, 0x01C7
    3658:	30 91 c8 01 	lds	r19, 0x01C8
    365c:	20 95       	com	r18
    365e:	30 95       	com	r19
    3660:	28 0f       	add	r18, r24
    3662:	39 1f       	adc	r19, r25
    3664:	2c 32       	cpi	r18, 0x2C	; 44
    3666:	31 40       	sbci	r19, 0x01	; 1
    3668:	70 f0       	brcs	.+28     	; 0x3686 <send_keyboard_report+0x8a>
            dprintf("Oneshot: timeout\n");
    366a:	80 91 ec 01 	lds	r24, 0x01EC
    366e:	80 ff       	sbrs	r24, 0
    3670:	08 c0       	rjmp	.+16     	; 0x3682 <send_keyboard_report+0x86>
    3672:	8d e0       	ldi	r24, 0x0D	; 13
    3674:	94 e0       	ldi	r25, 0x04	; 4
    3676:	9f 93       	push	r25
    3678:	8f 93       	push	r24
    367a:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
            clear_oneshot_mods();
    3682:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <clear_oneshot_mods>
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3686:	e0 91 0c 01 	lds	r30, 0x010C
    368a:	f0 91 0d 01 	lds	r31, 0x010D
    368e:	80 81       	ld	r24, Z
    3690:	90 91 c9 01 	lds	r25, 0x01C9
    3694:	89 2b       	or	r24, r25
    3696:	80 83       	st	Z, r24
        if (has_anykey()) {
    3698:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <has_anykey>
    369c:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    369e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    36a2:	80 91 0c 01 	lds	r24, 0x010C
    36a6:	90 91 0d 01 	lds	r25, 0x010D
    36aa:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <host_keyboard_send>

000036ae <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    36ae:	90 93 39 01 	sts	0x0139, r25
    36b2:	80 93 38 01 	sts	0x0138, r24
    36b6:	08 95       	ret

000036b8 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    36b8:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    36ba:	98 2f       	mov	r25, r24
    36bc:	9c 7c       	andi	r25, 0xCC	; 204
    36be:	96 95       	lsr	r25
    36c0:	96 95       	lsr	r25
    36c2:	83 73       	andi	r24, 0x33	; 51
    36c4:	44 e0       	ldi	r20, 0x04	; 4
    36c6:	84 9f       	mul	r24, r20
    36c8:	90 01       	movw	r18, r0
    36ca:	11 24       	eor	r1, r1
    36cc:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    36ce:	89 2f       	mov	r24, r25
    36d0:	8a 7a       	andi	r24, 0xAA	; 170
    36d2:	86 95       	lsr	r24
    36d4:	95 75       	andi	r25, 0x55	; 85
    36d6:	99 0f       	add	r25, r25
    return bits;
}
    36d8:	89 2b       	or	r24, r25
    36da:	08 95       	ret

000036dc <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    36dc:	08 95       	ret

000036de <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <hook_matrix_change+0x6>
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <hook_matrix_change+0x8>
    36e6:	1f 92       	push	r1
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	df 91       	pop	r29
    36f8:	cf 91       	pop	r28
    36fa:	08 95       	ret

000036fc <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    36fc:	08 95       	ret

000036fe <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    36fe:	08 95       	ret

00003700 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    3700:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <keyboard_set_leds>

00003704 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3704:	80 91 01 02 	lds	r24, 0x0201
    3708:	84 30       	cpi	r24, 0x04	; 4
    370a:	09 f1       	breq	.+66     	; 0x374e <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    370c:	10 92 ed 01 	sts	0x01ED, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3710:	20 e4       	ldi	r18, 0x40	; 64
    3712:	88 e1       	ldi	r24, 0x18	; 24
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	a8 95       	wdr
    371c:	80 93 60 00 	sts	0x0060, r24
    3720:	0f be       	out	0x3f, r0	; 63
    3722:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3726:	83 b7       	in	r24, 0x33	; 51
    3728:	81 7f       	andi	r24, 0xF1	; 241
    372a:	84 60       	ori	r24, 0x04	; 4
    372c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    372e:	83 b7       	in	r24, 0x33	; 51
    3730:	81 60       	ori	r24, 0x01	; 1
    3732:	83 bf       	out	0x33, r24	; 51
    sei();
    3734:	78 94       	sei
    sleep_cpu();
    3736:	88 95       	sleep
    sleep_disable();
    3738:	83 b7       	in	r24, 0x33	; 51
    373a:	8e 7f       	andi	r24, 0xFE	; 254
    373c:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    373e:	88 e1       	ldi	r24, 0x18	; 24
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	80 93 60 00 	sts	0x0060, r24
    3748:	10 92 60 00 	sts	0x0060, r1
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	08 95       	ret

00003750 <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    3750:	cf 93       	push	r28
    matrix_power_up();
    3752:	0e 94 19 07 	call	0xe32	; 0xe32 <matrix_power_up>
    matrix_scan();
    3756:	0e 94 43 06 	call	0xc86	; 0xc86 <matrix_scan>
    matrix_power_down();
    375a:	0e 94 1a 07 	call	0xe34	; 0xe34 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    375e:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3760:	8c 2f       	mov	r24, r28
    3762:	0e 94 11 07 	call	0xe22	; 0xe22 <matrix_get_row>
    3766:	81 11       	cpse	r24, r1
    3768:	05 c0       	rjmp	.+10     	; 0x3774 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    376a:	cf 5f       	subi	r28, 0xFF	; 255
    376c:	c8 30       	cpi	r28, 0x08	; 8
    376e:	c1 f7       	brne	.-16     	; 0x3760 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	01 c0       	rjmp	.+2      	; 0x3776 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3774:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3776:	cf 91       	pop	r28
    3778:	08 95       	ret

0000377a <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    377a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <matrix_clear>
    clear_keyboard();
    377e:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <clear_keyboard>

00003782 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3782:	1f 92       	push	r1
    3784:	0f 92       	push	r0
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	0f 92       	push	r0
    378a:	11 24       	eor	r1, r1
    378c:	8f 93       	push	r24
    378e:	9f 93       	push	r25
    3790:	af 93       	push	r26
    3792:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3794:	80 91 ed 01 	lds	r24, 0x01ED
    3798:	81 11       	cpse	r24, r1
    379a:	13 c0       	rjmp	.+38     	; 0x37c2 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    379c:	80 91 ee 01 	lds	r24, 0x01EE
    37a0:	90 91 ef 01 	lds	r25, 0x01EF
    37a4:	a0 91 f0 01 	lds	r26, 0x01F0
    37a8:	b0 91 f1 01 	lds	r27, 0x01F1
    37ac:	41 96       	adiw	r24, 0x11	; 17
    37ae:	a1 1d       	adc	r26, r1
    37b0:	b1 1d       	adc	r27, r1
    37b2:	80 93 ee 01 	sts	0x01EE, r24
    37b6:	90 93 ef 01 	sts	0x01EF, r25
    37ba:	a0 93 f0 01 	sts	0x01F0, r26
    37be:	b0 93 f1 01 	sts	0x01F1, r27
            break;
        default:
            ;
    }
}
    37c2:	bf 91       	pop	r27
    37c4:	af 91       	pop	r26
    37c6:	9f 91       	pop	r25
    37c8:	8f 91       	pop	r24
    37ca:	0f 90       	pop	r0
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	0f 90       	pop	r0
    37d0:	1f 90       	pop	r1
    37d2:	18 95       	reti

000037d4 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    37d8:	93 e0       	ldi	r25, 0x03	; 3
    37da:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    37dc:	9a ef       	ldi	r25, 0xFA	; 250
    37de:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    37e0:	80 93 6e 00 	sts	0x006E, r24
    37e4:	08 95       	ret

000037e6 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    37e6:	2f b7       	in	r18, 0x3f	; 63
    cli();
    37e8:	f8 94       	cli
    t = timer_count;
    37ea:	80 91 ee 01 	lds	r24, 0x01EE
    37ee:	90 91 ef 01 	lds	r25, 0x01EF
    37f2:	a0 91 f0 01 	lds	r26, 0x01F0
    37f6:	b0 91 f1 01 	lds	r27, 0x01F1
    SREG = sreg;
    37fa:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    37fc:	08 95       	ret

000037fe <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    37fe:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3800:	f8 94       	cli
    t = timer_count;
    3802:	60 91 ee 01 	lds	r22, 0x01EE
    3806:	70 91 ef 01 	lds	r23, 0x01EF
    380a:	80 91 f0 01 	lds	r24, 0x01F0
    380e:	90 91 f1 01 	lds	r25, 0x01F1
    SREG = sreg;
    3812:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    3814:	08 95       	ret

00003816 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    3816:	cf 92       	push	r12
    3818:	df 92       	push	r13
    381a:	ef 92       	push	r14
    381c:	ff 92       	push	r15
    381e:	0f 93       	push	r16
    3820:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3822:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3824:	f8 94       	cli
    t = timer_count;
    3826:	40 91 ee 01 	lds	r20, 0x01EE
    382a:	50 91 ef 01 	lds	r21, 0x01EF
    382e:	60 91 f0 01 	lds	r22, 0x01F0
    3832:	70 91 f1 01 	lds	r23, 0x01F1
    SREG = sreg;
    3836:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3838:	6a 01       	movw	r12, r20
    383a:	7b 01       	movw	r14, r22
    383c:	ee 24       	eor	r14, r14
    383e:	ff 24       	eor	r15, r15
    3840:	8c 01       	movw	r16, r24
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	c0 16       	cp	r12, r16
    3848:	d1 06       	cpc	r13, r17
    384a:	e2 06       	cpc	r14, r18
    384c:	f3 06       	cpc	r15, r19
    384e:	10 f4       	brcc	.+4      	; 0x3854 <timer_elapsed+0x3e>
    3850:	41 50       	subi	r20, 0x01	; 1
    3852:	51 09       	sbc	r21, r1
    3854:	48 1b       	sub	r20, r24
    3856:	59 0b       	sbc	r21, r25
}
    3858:	ca 01       	movw	r24, r20
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	df 90       	pop	r13
    3864:	cf 90       	pop	r12
    3866:	08 95       	ret

00003868 <timer_elapsed32>:

inline
uint32_t timer_elapsed32(uint32_t last)
{
    3868:	cf 92       	push	r12
    386a:	df 92       	push	r13
    386c:	ef 92       	push	r14
    386e:	ff 92       	push	r15
    3870:	0f 93       	push	r16
    3872:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3874:	4f b7       	in	r20, 0x3f	; 63
    cli();
    3876:	f8 94       	cli
    t = timer_count;
    3878:	00 91 ee 01 	lds	r16, 0x01EE
    387c:	10 91 ef 01 	lds	r17, 0x01EF
    3880:	20 91 f0 01 	lds	r18, 0x01F0
    3884:	30 91 f1 01 	lds	r19, 0x01F1
    SREG = sreg;
    3888:	4f bf       	out	0x3f, r20	; 63
    388a:	68 01       	movw	r12, r16
    388c:	79 01       	movw	r14, r18
    388e:	c6 1a       	sub	r12, r22
    3890:	d7 0a       	sbc	r13, r23
    3892:	e8 0a       	sbc	r14, r24
    3894:	f9 0a       	sbc	r15, r25

    return TIMER_DIFF_32(t, last);
    3896:	06 17       	cp	r16, r22
    3898:	17 07       	cpc	r17, r23
    389a:	28 07       	cpc	r18, r24
    389c:	39 07       	cpc	r19, r25
    389e:	18 f0       	brcs	.+6      	; 0x38a6 <timer_elapsed32+0x3e>
    38a0:	c7 01       	movw	r24, r14
    38a2:	b6 01       	movw	r22, r12
    38a4:	06 c0       	rjmp	.+12     	; 0x38b2 <timer_elapsed32+0x4a>
    38a6:	c7 01       	movw	r24, r14
    38a8:	b6 01       	movw	r22, r12
    38aa:	61 50       	subi	r22, 0x01	; 1
    38ac:	71 09       	sbc	r23, r1
    38ae:	81 09       	sbc	r24, r1
    38b0:	91 09       	sbc	r25, r1
}
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	ff 90       	pop	r15
    38b8:	ef 90       	pop	r14
    38ba:	df 90       	pop	r13
    38bc:	cf 90       	pop	r12
    38be:	08 95       	ret

000038c0 <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    38c0:	1f 92       	push	r1
    38c2:	0f 92       	push	r0
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	0f 92       	push	r0
    38c8:	11 24       	eor	r1, r1
    38ca:	8f 93       	push	r24
    38cc:	9f 93       	push	r25
    38ce:	af 93       	push	r26
    38d0:	bf 93       	push	r27
    timer_count++;
    38d2:	80 91 ee 01 	lds	r24, 0x01EE
    38d6:	90 91 ef 01 	lds	r25, 0x01EF
    38da:	a0 91 f0 01 	lds	r26, 0x01F0
    38de:	b0 91 f1 01 	lds	r27, 0x01F1
    38e2:	01 96       	adiw	r24, 0x01	; 1
    38e4:	a1 1d       	adc	r26, r1
    38e6:	b1 1d       	adc	r27, r1
    38e8:	80 93 ee 01 	sts	0x01EE, r24
    38ec:	90 93 ef 01 	sts	0x01EF, r25
    38f0:	a0 93 f0 01 	sts	0x01F0, r26
    38f4:	b0 93 f1 01 	sts	0x01F1, r27
}
    38f8:	bf 91       	pop	r27
    38fa:	af 91       	pop	r26
    38fc:	9f 91       	pop	r25
    38fe:	8f 91       	pop	r24
    3900:	0f 90       	pop	r0
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	0f 90       	pop	r0
    3906:	1f 90       	pop	r1
    3908:	18 95       	reti

0000390a <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    390a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <USB_Disable>
    cli();
    390e:	f8 94       	cli
    3910:	2f ef       	ldi	r18, 0xFF	; 255
    3912:	87 ea       	ldi	r24, 0xA7	; 167
    3914:	91 e6       	ldi	r25, 0x61	; 97
    3916:	21 50       	subi	r18, 0x01	; 1
    3918:	80 40       	sbci	r24, 0x00	; 0
    391a:	90 40       	sbci	r25, 0x00	; 0
    391c:	e1 f7       	brne	.-8      	; 0x3916 <bootloader_jump+0xc>
    391e:	00 c0       	rjmp	.+0      	; 0x3920 <bootloader_jump+0x16>
    3920:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3922:	87 e0       	ldi	r24, 0x07	; 7
    3924:	90 eb       	ldi	r25, 0xB0	; 176
    3926:	dc 01       	movw	r26, r24
    3928:	80 93 0a 02 	sts	0x020A, r24
    392c:	90 93 0b 02 	sts	0x020B, r25
    3930:	a0 93 0c 02 	sts	0x020C, r26
    3934:	b0 93 0d 02 	sts	0x020D, r27
    wdt_enable(WDTO_250MS);
    3938:	2c e0       	ldi	r18, 0x0C	; 12
    393a:	88 e1       	ldi	r24, 0x18	; 24
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	a8 95       	wdr
    3944:	80 93 60 00 	sts	0x0060, r24
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	20 93 60 00 	sts	0x0060, r18
    394e:	ff cf       	rjmp	.-2      	; 0x394e <bootloader_jump+0x44>

00003950 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	08 95       	ret

00003956 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3956:	08 95       	ret

00003958 <keymap_key_to_keycode>:

__attribute__ ((weak))
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#if defined(__AVR__)
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    3958:	e7 2f       	mov	r30, r23
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	98 e0       	ldi	r25, 0x08	; 8
    395e:	89 9f       	mul	r24, r25
    3960:	e0 0d       	add	r30, r0
    3962:	f1 1d       	adc	r31, r1
    3964:	11 24       	eor	r1, r1
    3966:	83 e0       	ldi	r24, 0x03	; 3
    3968:	ee 0f       	add	r30, r30
    396a:	ff 1f       	adc	r31, r31
    396c:	8a 95       	dec	r24
    396e:	e1 f7       	brne	.-8      	; 0x3968 <keymap_key_to_keycode+0x10>
    3970:	e6 0f       	add	r30, r22
    3972:	f1 1d       	adc	r31, r1
    3974:	ee 51       	subi	r30, 0x1E	; 30
    3976:	ff 4f       	sbci	r31, 0xFF	; 255
    3978:	84 91       	lpm	r24, Z
#else
    return keymaps[(layer)][(key.row)][(key.col)];
#endif
}
    397a:	08 95       	ret

0000397c <keymap_fn_to_action>:

__attribute__ ((weak))
action_t keymap_fn_to_action(uint8_t keycode)
{
#if defined(__AVR__)
    return (action_t)pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
    397c:	e8 2f       	mov	r30, r24
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	ee 0f       	add	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	e0 5a       	subi	r30, 0xA0	; 160
    3986:	f0 40       	sbci	r31, 0x00	; 0
#else
    return fn_actions[FN_INDEX(keycode)];
#endif
}
    3988:	85 91       	lpm	r24, Z+
    398a:	94 91       	lpm	r25, Z
    398c:	08 95       	ret

0000398e <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    398e:	0e 94 ac 1c 	call	0x3958	; 0x3958 <keymap_key_to_keycode>
    switch (keycode) {
    3992:	90 e4       	ldi	r25, 0x40	; 64
    3994:	98 0f       	add	r25, r24
    3996:	90 32       	cpi	r25, 0x20	; 32
    3998:	18 f4       	brcc	.+6      	; 0x39a0 <action_for_key+0x12>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    399a:	0e 94 be 1c 	call	0x397c	; 0x397c <keymap_fn_to_action>
    399e:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    39a0:	8d 3b       	cpi	r24, 0xBD	; 189
    39a2:	60 f4       	brcc	.+24     	; 0x39bc <action_for_key+0x2e>
    39a4:	88 3a       	cpi	r24, 0xA8	; 168
    39a6:	a0 f5       	brcc	.+104    	; 0x3a10 <action_for_key+0x82>
    39a8:	85 3a       	cpi	r24, 0xA5	; 165
    39aa:	38 f5       	brcc	.+78     	; 0x39fa <action_for_key+0x6c>
    39ac:	84 30       	cpi	r24, 0x04	; 4
    39ae:	10 f5       	brcc	.+68     	; 0x39f4 <action_for_key+0x66>
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	09 f0       	breq	.+2      	; 0x39b6 <action_for_key+0x28>
    39b4:	88 c0       	rjmp	.+272    	; 0x3ac6 <action_for_key+0x138>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
    39b6:	21 e0       	ldi	r18, 0x01	; 1
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	87 c0       	rjmp	.+270    	; 0x3aca <action_for_key+0x13c>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    39bc:	88 3e       	cpi	r24, 0xE8	; 232
    39be:	98 f4       	brcc	.+38     	; 0x39e6 <action_for_key+0x58>
    39c0:	80 3e       	cpi	r24, 0xE0	; 224
    39c2:	c0 f4       	brcc	.+48     	; 0x39f4 <action_for_key+0x66>
    39c4:	8f 3b       	cpi	r24, 0xBF	; 191
    39c6:	09 f0       	breq	.+2      	; 0x39ca <action_for_key+0x3c>
    39c8:	7e c0       	rjmp	.+252    	; 0x3ac6 <action_for_key+0x138>
            break;
        case KC_TRNS:
            return (action_t)ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    39ca:	0e 94 c9 14 	call	0x2992	; 0x2992 <clear_keyboard>
    39ce:	2f ef       	ldi	r18, 0xFF	; 255
    39d0:	80 e7       	ldi	r24, 0x70	; 112
    39d2:	92 e0       	ldi	r25, 0x02	; 2
    39d4:	21 50       	subi	r18, 0x01	; 1
    39d6:	80 40       	sbci	r24, 0x00	; 0
    39d8:	90 40       	sbci	r25, 0x00	; 0
    39da:	e1 f7       	brne	.-8      	; 0x39d4 <action_for_key+0x46>
    39dc:	00 c0       	rjmp	.+0      	; 0x39de <action_for_key+0x50>
    39de:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    39e0:	0e 94 85 1c 	call	0x390a	; 0x390a <bootloader_jump>
    39e4:	70 c0       	rjmp	.+224    	; 0x3ac6 <action_for_key+0x138>


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
    39e6:	80 3f       	cpi	r24, 0xF0	; 240
    39e8:	08 f4       	brcc	.+2      	; 0x39ec <action_for_key+0x5e>
    39ea:	6d c0       	rjmp	.+218    	; 0x3ac6 <action_for_key+0x138>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            return (action_t)ACTION_MOUSEKEY(keycode);
    39ec:	28 2f       	mov	r18, r24
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	30 65       	ori	r19, 0x50	; 80
    39f2:	6b c0       	rjmp	.+214    	; 0x3aca <action_for_key+0x13c>
static action_t keycode_to_action(uint8_t keycode)
{
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            return (action_t)ACTION_KEY(keycode);
    39f4:	28 2f       	mov	r18, r24
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	68 c0       	rjmp	.+208    	; 0x3aca <action_for_key+0x13c>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            return (action_t)ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    39fa:	85 3a       	cpi	r24, 0xA5	; 165
    39fc:	21 f0       	breq	.+8      	; 0x3a06 <action_for_key+0x78>
    39fe:	86 3a       	cpi	r24, 0xA6	; 166
    3a00:	21 f4       	brne	.+8      	; 0x3a0a <action_for_key+0x7c>
    3a02:	92 e8       	ldi	r25, 0x82	; 130
    3a04:	03 c0       	rjmp	.+6      	; 0x3a0c <action_for_key+0x7e>
    3a06:	91 e8       	ldi	r25, 0x81	; 129
    3a08:	01 c0       	rjmp	.+2      	; 0x3a0c <action_for_key+0x7e>
    3a0a:	93 e8       	ldi	r25, 0x83	; 131
    3a0c:	80 e4       	ldi	r24, 0x40	; 64
    3a0e:	58 c0       	rjmp	.+176    	; 0x3ac0 <action_for_key+0x132>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            return (action_t)ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3a10:	88 3a       	cpi	r24, 0xA8	; 168
    3a12:	51 f1       	breq	.+84     	; 0x3a68 <action_for_key+0xda>
    3a14:	89 3a       	cpi	r24, 0xA9	; 169
    3a16:	51 f1       	breq	.+84     	; 0x3a6c <action_for_key+0xde>
    3a18:	8a 3a       	cpi	r24, 0xAA	; 170
    3a1a:	51 f1       	breq	.+84     	; 0x3a70 <action_for_key+0xe2>
    3a1c:	8b 3a       	cpi	r24, 0xAB	; 171
    3a1e:	51 f1       	breq	.+84     	; 0x3a74 <action_for_key+0xe6>
    3a20:	8c 3a       	cpi	r24, 0xAC	; 172
    3a22:	51 f1       	breq	.+84     	; 0x3a78 <action_for_key+0xea>
    3a24:	8d 3a       	cpi	r24, 0xAD	; 173
    3a26:	51 f1       	breq	.+84     	; 0x3a7c <action_for_key+0xee>
    3a28:	8e 3a       	cpi	r24, 0xAE	; 174
    3a2a:	51 f1       	breq	.+84     	; 0x3a80 <action_for_key+0xf2>
    3a2c:	8f 3a       	cpi	r24, 0xAF	; 175
    3a2e:	51 f1       	breq	.+84     	; 0x3a84 <action_for_key+0xf6>
    3a30:	81 3b       	cpi	r24, 0xB1	; 177
    3a32:	51 f1       	breq	.+84     	; 0x3a88 <action_for_key+0xfa>
    3a34:	80 3b       	cpi	r24, 0xB0	; 176
    3a36:	51 f1       	breq	.+84     	; 0x3a8c <action_for_key+0xfe>
    3a38:	82 3b       	cpi	r24, 0xB2	; 178
    3a3a:	51 f1       	breq	.+84     	; 0x3a90 <action_for_key+0x102>
    3a3c:	83 3b       	cpi	r24, 0xB3	; 179
    3a3e:	51 f1       	breq	.+84     	; 0x3a94 <action_for_key+0x106>
    3a40:	84 3b       	cpi	r24, 0xB4	; 180
    3a42:	51 f1       	breq	.+84     	; 0x3a98 <action_for_key+0x10a>
    3a44:	85 3b       	cpi	r24, 0xB5	; 181
    3a46:	51 f1       	breq	.+84     	; 0x3a9c <action_for_key+0x10e>
    3a48:	86 3b       	cpi	r24, 0xB6	; 182
    3a4a:	59 f1       	breq	.+86     	; 0x3aa2 <action_for_key+0x114>
    3a4c:	87 3b       	cpi	r24, 0xB7	; 183
    3a4e:	59 f1       	breq	.+86     	; 0x3aa6 <action_for_key+0x118>
    3a50:	88 3b       	cpi	r24, 0xB8	; 184
    3a52:	59 f1       	breq	.+86     	; 0x3aaa <action_for_key+0x11c>
    3a54:	89 3b       	cpi	r24, 0xB9	; 185
    3a56:	59 f1       	breq	.+86     	; 0x3aae <action_for_key+0x120>
    3a58:	8a 3b       	cpi	r24, 0xBA	; 186
    3a5a:	59 f1       	breq	.+86     	; 0x3ab2 <action_for_key+0x124>
    3a5c:	8b 3b       	cpi	r24, 0xBB	; 187
    3a5e:	59 f1       	breq	.+86     	; 0x3ab6 <action_for_key+0x128>
    3a60:	8c 3b       	cpi	r24, 0xBC	; 188
    3a62:	61 f5       	brne	.+88     	; 0x3abc <action_for_key+0x12e>
    3a64:	9a e2       	ldi	r25, 0x2A	; 42
    3a66:	28 c0       	rjmp	.+80     	; 0x3ab8 <action_for_key+0x12a>
    3a68:	92 ee       	ldi	r25, 0xE2	; 226
    3a6a:	29 c0       	rjmp	.+82     	; 0x3abe <action_for_key+0x130>
    3a6c:	99 ee       	ldi	r25, 0xE9	; 233
    3a6e:	27 c0       	rjmp	.+78     	; 0x3abe <action_for_key+0x130>
    3a70:	9a ee       	ldi	r25, 0xEA	; 234
    3a72:	25 c0       	rjmp	.+74     	; 0x3abe <action_for_key+0x130>
    3a74:	95 eb       	ldi	r25, 0xB5	; 181
    3a76:	23 c0       	rjmp	.+70     	; 0x3abe <action_for_key+0x130>
    3a78:	96 eb       	ldi	r25, 0xB6	; 182
    3a7a:	21 c0       	rjmp	.+66     	; 0x3abe <action_for_key+0x130>
    3a7c:	93 eb       	ldi	r25, 0xB3	; 179
    3a7e:	1f c0       	rjmp	.+62     	; 0x3abe <action_for_key+0x130>
    3a80:	94 eb       	ldi	r25, 0xB4	; 180
    3a82:	1d c0       	rjmp	.+58     	; 0x3abe <action_for_key+0x130>
    3a84:	97 eb       	ldi	r25, 0xB7	; 183
    3a86:	1b c0       	rjmp	.+54     	; 0x3abe <action_for_key+0x130>
    3a88:	9c ec       	ldi	r25, 0xCC	; 204
    3a8a:	19 c0       	rjmp	.+50     	; 0x3abe <action_for_key+0x130>
    3a8c:	9d ec       	ldi	r25, 0xCD	; 205
    3a8e:	17 c0       	rjmp	.+46     	; 0x3abe <action_for_key+0x130>
    3a90:	93 e8       	ldi	r25, 0x83	; 131
    3a92:	05 c0       	rjmp	.+10     	; 0x3a9e <action_for_key+0x110>
    3a94:	9a e8       	ldi	r25, 0x8A	; 138
    3a96:	03 c0       	rjmp	.+6      	; 0x3a9e <action_for_key+0x110>
    3a98:	92 e9       	ldi	r25, 0x92	; 146
    3a9a:	01 c0       	rjmp	.+2      	; 0x3a9e <action_for_key+0x110>
    3a9c:	94 e9       	ldi	r25, 0x94	; 148
    3a9e:	85 e4       	ldi	r24, 0x45	; 69
    3aa0:	0f c0       	rjmp	.+30     	; 0x3ac0 <action_for_key+0x132>
    3aa2:	91 e2       	ldi	r25, 0x21	; 33
    3aa4:	09 c0       	rjmp	.+18     	; 0x3ab8 <action_for_key+0x12a>
    3aa6:	93 e2       	ldi	r25, 0x23	; 35
    3aa8:	07 c0       	rjmp	.+14     	; 0x3ab8 <action_for_key+0x12a>
    3aaa:	94 e2       	ldi	r25, 0x24	; 36
    3aac:	05 c0       	rjmp	.+10     	; 0x3ab8 <action_for_key+0x12a>
    3aae:	95 e2       	ldi	r25, 0x25	; 37
    3ab0:	03 c0       	rjmp	.+6      	; 0x3ab8 <action_for_key+0x12a>
    3ab2:	96 e2       	ldi	r25, 0x26	; 38
    3ab4:	01 c0       	rjmp	.+2      	; 0x3ab8 <action_for_key+0x12a>
    3ab6:	97 e2       	ldi	r25, 0x27	; 39
    3ab8:	86 e4       	ldi	r24, 0x46	; 70
    3aba:	02 c0       	rjmp	.+4      	; 0x3ac0 <action_for_key+0x132>
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	84 e4       	ldi	r24, 0x44	; 68
    3ac0:	29 2f       	mov	r18, r25
    3ac2:	38 2f       	mov	r19, r24
    3ac4:	02 c0       	rjmp	.+4      	; 0x3aca <action_for_key+0x13c>
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
        default:
            return (action_t)ACTION_NO;
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	c9 01       	movw	r24, r18
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    3acc:	08 95       	ret

00003ace <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3ace:	80 91 f4 01 	lds	r24, 0x01F4
    3ad2:	80 ff       	sbrs	r24, 0
    3ad4:	0b c0       	rjmp	.+22     	; 0x3aec <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    3ad6:	60 91 11 01 	lds	r22, 0x0111
    3ada:	85 e0       	ldi	r24, 0x05	; 5
    3adc:	68 9f       	mul	r22, r24
    3ade:	b0 01       	movw	r22, r0
    3ae0:	11 24       	eor	r1, r1
    3ae2:	75 95       	asr	r23
    3ae4:	67 95       	ror	r22
    3ae6:	75 95       	asr	r23
    3ae8:	67 95       	ror	r22
    3aea:	2a c0       	rjmp	.+84     	; 0x3b40 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    3aec:	81 ff       	sbrs	r24, 1
    3aee:	09 c0       	rjmp	.+18     	; 0x3b02 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    3af0:	60 91 11 01 	lds	r22, 0x0111
    3af4:	85 e0       	ldi	r24, 0x05	; 5
    3af6:	68 9f       	mul	r22, r24
    3af8:	b0 01       	movw	r22, r0
    3afa:	11 24       	eor	r1, r1
    3afc:	75 95       	asr	r23
    3afe:	67 95       	ror	r22
    3b00:	1f c0       	rjmp	.+62     	; 0x3b40 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    3b02:	82 ff       	sbrs	r24, 2
    3b04:	07 c0       	rjmp	.+14     	; 0x3b14 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    3b06:	60 91 11 01 	lds	r22, 0x0111
    3b0a:	85 e0       	ldi	r24, 0x05	; 5
    3b0c:	68 9f       	mul	r22, r24
    3b0e:	b0 01       	movw	r22, r0
    3b10:	11 24       	eor	r1, r1
    3b12:	16 c0       	rjmp	.+44     	; 0x3b40 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    3b14:	40 91 f5 01 	lds	r20, 0x01F5
    3b18:	44 23       	and	r20, r20
    3b1a:	c9 f0       	breq	.+50     	; 0x3b4e <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    3b1c:	60 91 10 01 	lds	r22, 0x0110
    3b20:	46 17       	cp	r20, r22
    3b22:	88 f7       	brcc	.-30     	; 0x3b06 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    3b24:	20 91 11 01 	lds	r18, 0x0111
    3b28:	85 e0       	ldi	r24, 0x05	; 5
    3b2a:	28 9f       	mul	r18, r24
    3b2c:	90 01       	movw	r18, r0
    3b2e:	11 24       	eor	r1, r1
    3b30:	42 9f       	mul	r20, r18
    3b32:	c0 01       	movw	r24, r0
    3b34:	43 9f       	mul	r20, r19
    3b36:	90 0d       	add	r25, r0
    3b38:	11 24       	eor	r1, r1
    3b3a:	70 e0       	ldi	r23, 0x00	; 0
    3b3c:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3b40:	60 38       	cpi	r22, 0x80	; 128
    3b42:	71 05       	cpc	r23, r1
    3b44:	40 f4       	brcc	.+16     	; 0x3b56 <move_unit+0x88>
    3b46:	61 15       	cp	r22, r1
    3b48:	71 05       	cpc	r23, r1
    3b4a:	39 f0       	breq	.+14     	; 0x3b5a <move_unit+0x8c>
    3b4c:	02 c0       	rjmp	.+4      	; 0x3b52 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    3b4e:	65 e0       	ldi	r22, 0x05	; 5
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3b52:	86 2f       	mov	r24, r22
    3b54:	08 95       	ret
    3b56:	8f e7       	ldi	r24, 0x7F	; 127
    3b58:	08 95       	ret
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
}
    3b5c:	08 95       	ret

00003b5e <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3b5e:	80 91 f4 01 	lds	r24, 0x01F4
    3b62:	80 ff       	sbrs	r24, 0
    3b64:	08 c0       	rjmp	.+16     	; 0x3b76 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3b66:	60 91 0f 01 	lds	r22, 0x010F
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	75 95       	asr	r23
    3b6e:	67 95       	ror	r22
    3b70:	75 95       	asr	r23
    3b72:	67 95       	ror	r22
    3b74:	21 c0       	rjmp	.+66     	; 0x3bb8 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    3b76:	81 ff       	sbrs	r24, 1
    3b78:	06 c0       	rjmp	.+12     	; 0x3b86 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3b7a:	60 91 0f 01 	lds	r22, 0x010F
    3b7e:	70 e0       	ldi	r23, 0x00	; 0
    3b80:	75 95       	asr	r23
    3b82:	67 95       	ror	r22
    3b84:	19 c0       	rjmp	.+50     	; 0x3bb8 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    3b86:	82 ff       	sbrs	r24, 2
    3b88:	04 c0       	rjmp	.+8      	; 0x3b92 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    3b8a:	60 91 0f 01 	lds	r22, 0x010F
    3b8e:	70 e0       	ldi	r23, 0x00	; 0
    3b90:	10 c0       	rjmp	.+32     	; 0x3bb2 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    3b92:	80 91 f5 01 	lds	r24, 0x01F5
    3b96:	88 23       	and	r24, r24
    3b98:	c1 f0       	breq	.+48     	; 0x3bca <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    3b9a:	60 91 0e 01 	lds	r22, 0x010E
    3b9e:	86 17       	cp	r24, r22
    3ba0:	a0 f7       	brcc	.-24     	; 0x3b8a <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    3ba2:	90 91 0f 01 	lds	r25, 0x010F
    3ba6:	98 9f       	mul	r25, r24
    3ba8:	c0 01       	movw	r24, r0
    3baa:	11 24       	eor	r1, r1
    3bac:	70 e0       	ldi	r23, 0x00	; 0
    3bae:	0e 94 23 25 	call	0x4a46	; 0x4a46 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3bb2:	60 38       	cpi	r22, 0x80	; 128
    3bb4:	71 05       	cpc	r23, r1
    3bb6:	28 f4       	brcc	.+10     	; 0x3bc2 <wheel_unit+0x64>
    3bb8:	61 15       	cp	r22, r1
    3bba:	71 05       	cpc	r23, r1
    3bbc:	21 f0       	breq	.+8      	; 0x3bc6 <wheel_unit+0x68>
    3bbe:	86 2f       	mov	r24, r22
    3bc0:	08 95       	ret
    3bc2:	8f e7       	ldi	r24, 0x7F	; 127
    3bc4:	08 95       	ret
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    3bca:	61 e0       	ldi	r22, 0x01	; 1
    3bcc:	70 e0       	ldi	r23, 0x00	; 0
    3bce:	f4 cf       	rjmp	.-24     	; 0x3bb8 <wheel_unit+0x5a>

00003bd0 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    3bd0:	80 3f       	cpi	r24, 0xF0	; 240
    3bd2:	21 f4       	brne	.+8      	; 0x3bdc <mousekey_on+0xc>
    3bd4:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3bd8:	81 95       	neg	r24
    3bda:	04 c0       	rjmp	.+8      	; 0x3be4 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    3bdc:	81 3f       	cpi	r24, 0xF1	; 241
    3bde:	29 f4       	brne	.+10     	; 0x3bea <mousekey_on+0x1a>
    3be0:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3be4:	80 93 f8 01 	sts	0x01F8, r24
    3be8:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    3bea:	82 3f       	cpi	r24, 0xF2	; 242
    3bec:	21 f4       	brne	.+8      	; 0x3bf6 <mousekey_on+0x26>
    3bee:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3bf2:	81 95       	neg	r24
    3bf4:	04 c0       	rjmp	.+8      	; 0x3bfe <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    3bf6:	83 3f       	cpi	r24, 0xF3	; 243
    3bf8:	29 f4       	brne	.+10     	; 0x3c04 <mousekey_on+0x34>
    3bfa:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3bfe:	80 93 f7 01 	sts	0x01F7, r24
    3c02:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    3c04:	89 3f       	cpi	r24, 0xF9	; 249
    3c06:	19 f4       	brne	.+6      	; 0x3c0e <mousekey_on+0x3e>
    3c08:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3c0c:	05 c0       	rjmp	.+10     	; 0x3c18 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    3c0e:	8a 3f       	cpi	r24, 0xFA	; 250
    3c10:	31 f4       	brne	.+12     	; 0x3c1e <mousekey_on+0x4e>
    3c12:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3c16:	81 95       	neg	r24
    3c18:	80 93 f9 01 	sts	0x01F9, r24
    3c1c:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    3c1e:	8b 3f       	cpi	r24, 0xFB	; 251
    3c20:	21 f4       	brne	.+8      	; 0x3c2a <mousekey_on+0x5a>
    3c22:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3c26:	81 95       	neg	r24
    3c28:	04 c0       	rjmp	.+8      	; 0x3c32 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    3c2a:	8c 3f       	cpi	r24, 0xFC	; 252
    3c2c:	29 f4       	brne	.+10     	; 0x3c38 <mousekey_on+0x68>
    3c2e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3c32:	80 93 fa 01 	sts	0x01FA, r24
    3c36:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    3c38:	84 3f       	cpi	r24, 0xF4	; 244
    3c3a:	21 f4       	brne	.+8      	; 0x3c44 <mousekey_on+0x74>
    3c3c:	80 91 f6 01 	lds	r24, 0x01F6
    3c40:	81 60       	ori	r24, 0x01	; 1
    3c42:	17 c0       	rjmp	.+46     	; 0x3c72 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    3c44:	85 3f       	cpi	r24, 0xF5	; 245
    3c46:	21 f4       	brne	.+8      	; 0x3c50 <mousekey_on+0x80>
    3c48:	80 91 f6 01 	lds	r24, 0x01F6
    3c4c:	82 60       	ori	r24, 0x02	; 2
    3c4e:	11 c0       	rjmp	.+34     	; 0x3c72 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    3c50:	86 3f       	cpi	r24, 0xF6	; 246
    3c52:	21 f4       	brne	.+8      	; 0x3c5c <mousekey_on+0x8c>
    3c54:	80 91 f6 01 	lds	r24, 0x01F6
    3c58:	84 60       	ori	r24, 0x04	; 4
    3c5a:	0b c0       	rjmp	.+22     	; 0x3c72 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    3c5c:	87 3f       	cpi	r24, 0xF7	; 247
    3c5e:	21 f4       	brne	.+8      	; 0x3c68 <mousekey_on+0x98>
    3c60:	80 91 f6 01 	lds	r24, 0x01F6
    3c64:	88 60       	ori	r24, 0x08	; 8
    3c66:	05 c0       	rjmp	.+10     	; 0x3c72 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3c68:	88 3f       	cpi	r24, 0xF8	; 248
    3c6a:	31 f4       	brne	.+12     	; 0x3c78 <mousekey_on+0xa8>
    3c6c:	80 91 f6 01 	lds	r24, 0x01F6
    3c70:	80 61       	ori	r24, 0x10	; 16
    3c72:	80 93 f6 01 	sts	0x01F6, r24
    3c76:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    3c78:	8d 3f       	cpi	r24, 0xFD	; 253
    3c7a:	21 f4       	brne	.+8      	; 0x3c84 <mousekey_on+0xb4>
    3c7c:	80 91 f4 01 	lds	r24, 0x01F4
    3c80:	81 60       	ori	r24, 0x01	; 1
    3c82:	0b c0       	rjmp	.+22     	; 0x3c9a <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    3c84:	8e 3f       	cpi	r24, 0xFE	; 254
    3c86:	21 f4       	brne	.+8      	; 0x3c90 <mousekey_on+0xc0>
    3c88:	80 91 f4 01 	lds	r24, 0x01F4
    3c8c:	82 60       	ori	r24, 0x02	; 2
    3c8e:	05 c0       	rjmp	.+10     	; 0x3c9a <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3c90:	8f 3f       	cpi	r24, 0xFF	; 255
    3c92:	29 f4       	brne	.+10     	; 0x3c9e <mousekey_on+0xce>
    3c94:	80 91 f4 01 	lds	r24, 0x01F4
    3c98:	84 60       	ori	r24, 0x04	; 4
    3c9a:	80 93 f4 01 	sts	0x01F4, r24
    3c9e:	08 95       	ret

00003ca0 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    3ca0:	80 3f       	cpi	r24, 0xF0	; 240
    3ca2:	39 f4       	brne	.+14     	; 0x3cb2 <mousekey_off+0x12>
    3ca4:	80 91 f8 01 	lds	r24, 0x01F8
    3ca8:	87 ff       	sbrs	r24, 7
    3caa:	6c c0       	rjmp	.+216    	; 0x3d84 <mousekey_off+0xe4>
    3cac:	10 92 f8 01 	sts	0x01F8, r1
    3cb0:	69 c0       	rjmp	.+210    	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    3cb2:	81 3f       	cpi	r24, 0xF1	; 241
    3cb4:	29 f4       	brne	.+10     	; 0x3cc0 <mousekey_off+0x20>
    3cb6:	80 91 f8 01 	lds	r24, 0x01F8
    3cba:	18 16       	cp	r1, r24
    3cbc:	bc f3       	brlt	.-18     	; 0x3cac <mousekey_off+0xc>
    3cbe:	62 c0       	rjmp	.+196    	; 0x3d84 <mousekey_off+0xe4>
    3cc0:	90 91 f7 01 	lds	r25, 0x01F7
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    3cc4:	82 3f       	cpi	r24, 0xF2	; 242
    3cc6:	29 f4       	brne	.+10     	; 0x3cd2 <mousekey_off+0x32>
    3cc8:	97 ff       	sbrs	r25, 7
    3cca:	5c c0       	rjmp	.+184    	; 0x3d84 <mousekey_off+0xe4>
    3ccc:	10 92 f7 01 	sts	0x01F7, r1
    3cd0:	59 c0       	rjmp	.+178    	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    3cd2:	83 3f       	cpi	r24, 0xF3	; 243
    3cd4:	19 f4       	brne	.+6      	; 0x3cdc <mousekey_off+0x3c>
    3cd6:	19 16       	cp	r1, r25
    3cd8:	cc f3       	brlt	.-14     	; 0x3ccc <mousekey_off+0x2c>
    3cda:	54 c0       	rjmp	.+168    	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    3cdc:	89 3f       	cpi	r24, 0xF9	; 249
    3cde:	41 f4       	brne	.+16     	; 0x3cf0 <mousekey_off+0x50>
    3ce0:	80 91 f9 01 	lds	r24, 0x01F9
    3ce4:	18 16       	cp	r1, r24
    3ce6:	0c f0       	brlt	.+2      	; 0x3cea <mousekey_off+0x4a>
    3ce8:	4d c0       	rjmp	.+154    	; 0x3d84 <mousekey_off+0xe4>
    3cea:	10 92 f9 01 	sts	0x01F9, r1
    3cee:	4a c0       	rjmp	.+148    	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    3cf0:	8a 3f       	cpi	r24, 0xFA	; 250
    3cf2:	29 f4       	brne	.+10     	; 0x3cfe <mousekey_off+0x5e>
    3cf4:	80 91 f9 01 	lds	r24, 0x01F9
    3cf8:	87 ff       	sbrs	r24, 7
    3cfa:	44 c0       	rjmp	.+136    	; 0x3d84 <mousekey_off+0xe4>
    3cfc:	f6 cf       	rjmp	.-20     	; 0x3cea <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    3cfe:	8b 3f       	cpi	r24, 0xFB	; 251
    3d00:	39 f4       	brne	.+14     	; 0x3d10 <mousekey_off+0x70>
    3d02:	80 91 fa 01 	lds	r24, 0x01FA
    3d06:	87 ff       	sbrs	r24, 7
    3d08:	3d c0       	rjmp	.+122    	; 0x3d84 <mousekey_off+0xe4>
    3d0a:	10 92 fa 01 	sts	0x01FA, r1
    3d0e:	3a c0       	rjmp	.+116    	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    3d10:	8c 3f       	cpi	r24, 0xFC	; 252
    3d12:	29 f4       	brne	.+10     	; 0x3d1e <mousekey_off+0x7e>
    3d14:	80 91 fa 01 	lds	r24, 0x01FA
    3d18:	18 16       	cp	r1, r24
    3d1a:	bc f3       	brlt	.-18     	; 0x3d0a <mousekey_off+0x6a>
    3d1c:	33 c0       	rjmp	.+102    	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    3d1e:	84 3f       	cpi	r24, 0xF4	; 244
    3d20:	21 f4       	brne	.+8      	; 0x3d2a <mousekey_off+0x8a>
    3d22:	80 91 f6 01 	lds	r24, 0x01F6
    3d26:	8e 7f       	andi	r24, 0xFE	; 254
    3d28:	17 c0       	rjmp	.+46     	; 0x3d58 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    3d2a:	85 3f       	cpi	r24, 0xF5	; 245
    3d2c:	21 f4       	brne	.+8      	; 0x3d36 <mousekey_off+0x96>
    3d2e:	80 91 f6 01 	lds	r24, 0x01F6
    3d32:	8d 7f       	andi	r24, 0xFD	; 253
    3d34:	11 c0       	rjmp	.+34     	; 0x3d58 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    3d36:	86 3f       	cpi	r24, 0xF6	; 246
    3d38:	21 f4       	brne	.+8      	; 0x3d42 <mousekey_off+0xa2>
    3d3a:	80 91 f6 01 	lds	r24, 0x01F6
    3d3e:	8b 7f       	andi	r24, 0xFB	; 251
    3d40:	0b c0       	rjmp	.+22     	; 0x3d58 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    3d42:	87 3f       	cpi	r24, 0xF7	; 247
    3d44:	21 f4       	brne	.+8      	; 0x3d4e <mousekey_off+0xae>
    3d46:	80 91 f6 01 	lds	r24, 0x01F6
    3d4a:	87 7f       	andi	r24, 0xF7	; 247
    3d4c:	05 c0       	rjmp	.+10     	; 0x3d58 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    3d4e:	88 3f       	cpi	r24, 0xF8	; 248
    3d50:	31 f4       	brne	.+12     	; 0x3d5e <mousekey_off+0xbe>
    3d52:	80 91 f6 01 	lds	r24, 0x01F6
    3d56:	8f 7e       	andi	r24, 0xEF	; 239
    3d58:	80 93 f6 01 	sts	0x01F6, r24
    3d5c:	13 c0       	rjmp	.+38     	; 0x3d84 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    3d5e:	8d 3f       	cpi	r24, 0xFD	; 253
    3d60:	21 f4       	brne	.+8      	; 0x3d6a <mousekey_off+0xca>
    3d62:	80 91 f4 01 	lds	r24, 0x01F4
    3d66:	8e 7f       	andi	r24, 0xFE	; 254
    3d68:	0b c0       	rjmp	.+22     	; 0x3d80 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    3d6a:	8e 3f       	cpi	r24, 0xFE	; 254
    3d6c:	21 f4       	brne	.+8      	; 0x3d76 <mousekey_off+0xd6>
    3d6e:	80 91 f4 01 	lds	r24, 0x01F4
    3d72:	8d 7f       	andi	r24, 0xFD	; 253
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    3d76:	8f 3f       	cpi	r24, 0xFF	; 255
    3d78:	29 f4       	brne	.+10     	; 0x3d84 <mousekey_off+0xe4>
    3d7a:	80 91 f4 01 	lds	r24, 0x01F4
    3d7e:	8b 7f       	andi	r24, 0xFB	; 251
    3d80:	80 93 f4 01 	sts	0x01F4, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3d84:	80 91 f7 01 	lds	r24, 0x01F7
    3d88:	81 11       	cpse	r24, r1
    3d8a:	0e c0       	rjmp	.+28     	; 0x3da8 <mousekey_off+0x108>
    3d8c:	80 91 f8 01 	lds	r24, 0x01F8
    3d90:	81 11       	cpse	r24, r1
    3d92:	0a c0       	rjmp	.+20     	; 0x3da8 <mousekey_off+0x108>
    3d94:	80 91 f9 01 	lds	r24, 0x01F9
    3d98:	81 11       	cpse	r24, r1
    3d9a:	06 c0       	rjmp	.+12     	; 0x3da8 <mousekey_off+0x108>
    3d9c:	80 91 fa 01 	lds	r24, 0x01FA
    3da0:	81 11       	cpse	r24, r1
    3da2:	02 c0       	rjmp	.+4      	; 0x3da8 <mousekey_off+0x108>
        mousekey_repeat = 0;
    3da4:	10 92 f5 01 	sts	0x01F5, r1
    3da8:	08 95       	ret

00003daa <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    3daa:	80 91 ec 01 	lds	r24, 0x01EC
    3dae:	83 ff       	sbrs	r24, 3
    3db0:	7e c0       	rjmp	.+252    	; 0x3eae <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    3db2:	86 e4       	ldi	r24, 0x46	; 70
    3db4:	94 e0       	ldi	r25, 0x04	; 4
    3db6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    phex(mouse_report.buttons); print("|");
    3dba:	80 91 f6 01 	lds	r24, 0x01F6
    3dbe:	1f 92       	push	r1
    3dc0:	8f 93       	push	r24
    3dc2:	81 e4       	ldi	r24, 0x41	; 65
    3dc4:	94 e0       	ldi	r25, 0x04	; 4
    3dc6:	9f 93       	push	r25
    3dc8:	8f 93       	push	r24
    3dca:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3dce:	8f e3       	ldi	r24, 0x3F	; 63
    3dd0:	94 e0       	ldi	r25, 0x04	; 4
    3dd2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print_decs(mouse_report.x); print(" ");
    3dd6:	20 91 f7 01 	lds	r18, 0x01F7
    3dda:	82 2f       	mov	r24, r18
    3ddc:	99 27       	eor	r25, r25
    3dde:	87 fd       	sbrc	r24, 7
    3de0:	90 95       	com	r25
    3de2:	9f 93       	push	r25
    3de4:	2f 93       	push	r18
    3de6:	8c e3       	ldi	r24, 0x3C	; 60
    3de8:	94 e0       	ldi	r25, 0x04	; 4
    3dea:	9f 93       	push	r25
    3dec:	8f 93       	push	r24
    3dee:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3df2:	8a e3       	ldi	r24, 0x3A	; 58
    3df4:	94 e0       	ldi	r25, 0x04	; 4
    3df6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print_decs(mouse_report.y); print(" ");
    3dfa:	20 91 f8 01 	lds	r18, 0x01F8
    3dfe:	82 2f       	mov	r24, r18
    3e00:	99 27       	eor	r25, r25
    3e02:	87 fd       	sbrc	r24, 7
    3e04:	90 95       	com	r25
    3e06:	9f 93       	push	r25
    3e08:	2f 93       	push	r18
    3e0a:	87 e3       	ldi	r24, 0x37	; 55
    3e0c:	94 e0       	ldi	r25, 0x04	; 4
    3e0e:	9f 93       	push	r25
    3e10:	8f 93       	push	r24
    3e12:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3e16:	85 e3       	ldi	r24, 0x35	; 53
    3e18:	94 e0       	ldi	r25, 0x04	; 4
    3e1a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print_decs(mouse_report.v); print(" ");
    3e1e:	20 91 f9 01 	lds	r18, 0x01F9
    3e22:	82 2f       	mov	r24, r18
    3e24:	99 27       	eor	r25, r25
    3e26:	87 fd       	sbrc	r24, 7
    3e28:	90 95       	com	r25
    3e2a:	9f 93       	push	r25
    3e2c:	2f 93       	push	r18
    3e2e:	82 e3       	ldi	r24, 0x32	; 50
    3e30:	94 e0       	ldi	r25, 0x04	; 4
    3e32:	9f 93       	push	r25
    3e34:	8f 93       	push	r24
    3e36:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3e3a:	80 e3       	ldi	r24, 0x30	; 48
    3e3c:	94 e0       	ldi	r25, 0x04	; 4
    3e3e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print_decs(mouse_report.h); print("](");
    3e42:	20 91 fa 01 	lds	r18, 0x01FA
    3e46:	82 2f       	mov	r24, r18
    3e48:	99 27       	eor	r25, r25
    3e4a:	87 fd       	sbrc	r24, 7
    3e4c:	90 95       	com	r25
    3e4e:	9f 93       	push	r25
    3e50:	2f 93       	push	r18
    3e52:	8d e2       	ldi	r24, 0x2D	; 45
    3e54:	94 e0       	ldi	r25, 0x04	; 4
    3e56:	9f 93       	push	r25
    3e58:	8f 93       	push	r24
    3e5a:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3e5e:	8a e2       	ldi	r24, 0x2A	; 42
    3e60:	94 e0       	ldi	r25, 0x04	; 4
    3e62:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print_dec(mousekey_repeat); print("/");
    3e66:	80 91 f5 01 	lds	r24, 0x01F5
    3e6a:	1f 92       	push	r1
    3e6c:	8f 93       	push	r24
    3e6e:	87 e2       	ldi	r24, 0x27	; 39
    3e70:	94 e0       	ldi	r25, 0x04	; 4
    3e72:	9f 93       	push	r25
    3e74:	8f 93       	push	r24
    3e76:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3e7a:	85 e2       	ldi	r24, 0x25	; 37
    3e7c:	94 e0       	ldi	r25, 0x04	; 4
    3e7e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print_dec(mousekey_accel); print(")\n");
    3e82:	80 91 f4 01 	lds	r24, 0x01F4
    3e86:	1f 92       	push	r1
    3e88:	8f 93       	push	r24
    3e8a:	82 e2       	ldi	r24, 0x22	; 34
    3e8c:	94 e0       	ldi	r25, 0x04	; 4
    3e8e:	9f 93       	push	r25
    3e90:	8f 93       	push	r24
    3e92:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    3e96:	8f e1       	ldi	r24, 0x1F	; 31
    3e98:	94 e0       	ldi	r25, 0x04	; 4
    3e9a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    3e9e:	8d b7       	in	r24, 0x3d	; 61
    3ea0:	9e b7       	in	r25, 0x3e	; 62
    3ea2:	4c 96       	adiw	r24, 0x1c	; 28
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	9e bf       	out	0x3e, r25	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    3eae:	86 ef       	ldi	r24, 0xF6	; 246
    3eb0:	91 e0       	ldi	r25, 0x01	; 1
    3eb2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <host_mouse_send>
    last_timer = timer_read();
    3eb6:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <timer_read>
    3eba:	90 93 f3 01 	sts	0x01F3, r25
    3ebe:	80 93 f2 01 	sts	0x01F2, r24
    3ec2:	08 95       	ret

00003ec4 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    3eca:	80 91 f2 01 	lds	r24, 0x01F2
    3ece:	90 91 f3 01 	lds	r25, 0x01F3
    3ed2:	0e 94 0b 1c 	call	0x3816	; 0x3816 <timer_elapsed>
    3ed6:	40 91 f5 01 	lds	r20, 0x01F5
    3eda:	44 23       	and	r20, r20
    3edc:	21 f0       	breq	.+8      	; 0x3ee6 <mousekey_task+0x22>
    3ede:	20 91 12 01 	lds	r18, 0x0112
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	06 c0       	rjmp	.+12     	; 0x3ef2 <mousekey_task+0x2e>
    3ee6:	20 91 13 01 	lds	r18, 0x0113
    3eea:	5a e0       	ldi	r21, 0x0A	; 10
    3eec:	25 9f       	mul	r18, r21
    3eee:	90 01       	movw	r18, r0
    3ef0:	11 24       	eor	r1, r1
    3ef2:	82 17       	cp	r24, r18
    3ef4:	93 07       	cpc	r25, r19
    3ef6:	08 f4       	brcc	.+2      	; 0x3efa <mousekey_task+0x36>
    3ef8:	82 c0       	rjmp	.+260    	; 0x3ffe <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3efa:	80 91 f7 01 	lds	r24, 0x01F7
    3efe:	10 91 f8 01 	lds	r17, 0x01F8
    3f02:	d0 91 f9 01 	lds	r29, 0x01F9
    3f06:	c0 91 fa 01 	lds	r28, 0x01FA
    3f0a:	81 11       	cpse	r24, r1
    3f0c:	07 c0       	rjmp	.+14     	; 0x3f1c <mousekey_task+0x58>
    3f0e:	11 11       	cpse	r17, r1
    3f10:	05 c0       	rjmp	.+10     	; 0x3f1c <mousekey_task+0x58>
    3f12:	d1 11       	cpse	r29, r1
    3f14:	03 c0       	rjmp	.+6      	; 0x3f1c <mousekey_task+0x58>
    3f16:	cc 23       	and	r28, r28
    3f18:	09 f4       	brne	.+2      	; 0x3f1c <mousekey_task+0x58>
    3f1a:	71 c0       	rjmp	.+226    	; 0x3ffe <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    3f1c:	4f 3f       	cpi	r20, 0xFF	; 255
    3f1e:	19 f0       	breq	.+6      	; 0x3f26 <mousekey_task+0x62>
        mousekey_repeat++;
    3f20:	4f 5f       	subi	r20, 0xFF	; 255
    3f22:	40 93 f5 01 	sts	0x01F5, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    3f26:	18 16       	cp	r1, r24
    3f28:	24 f4       	brge	.+8      	; 0x3f32 <mousekey_task+0x6e>
    3f2a:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3f2e:	80 93 f7 01 	sts	0x01F7, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    3f32:	80 91 f7 01 	lds	r24, 0x01F7
    3f36:	87 ff       	sbrs	r24, 7
    3f38:	05 c0       	rjmp	.+10     	; 0x3f44 <mousekey_task+0x80>
    3f3a:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3f3e:	81 95       	neg	r24
    3f40:	80 93 f7 01 	sts	0x01F7, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    3f44:	11 16       	cp	r1, r17
    3f46:	24 f4       	brge	.+8      	; 0x3f50 <mousekey_task+0x8c>
    3f48:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3f4c:	80 93 f8 01 	sts	0x01F8, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    3f50:	80 91 f8 01 	lds	r24, 0x01F8
    3f54:	87 ff       	sbrs	r24, 7
    3f56:	05 c0       	rjmp	.+10     	; 0x3f62 <mousekey_task+0x9e>
    3f58:	0e 94 67 1d 	call	0x3ace	; 0x3ace <move_unit>
    3f5c:	81 95       	neg	r24
    3f5e:	80 93 f8 01 	sts	0x01F8, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    3f62:	60 91 f7 01 	lds	r22, 0x01F7
    3f66:	66 23       	and	r22, r22
    3f68:	39 f1       	breq	.+78     	; 0x3fb8 <mousekey_task+0xf4>
    3f6a:	10 91 f8 01 	lds	r17, 0x01F8
    3f6e:	11 23       	and	r17, r17
    3f70:	19 f1       	breq	.+70     	; 0x3fb8 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    3f72:	77 27       	eor	r23, r23
    3f74:	67 fd       	sbrc	r22, 7
    3f76:	70 95       	com	r23
    3f78:	87 2f       	mov	r24, r23
    3f7a:	97 2f       	mov	r25, r23
    3f7c:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatsisf>
    3f80:	23 e3       	ldi	r18, 0x33	; 51
    3f82:	33 e3       	ldi	r19, 0x33	; 51
    3f84:	43 e3       	ldi	r20, 0x33	; 51
    3f86:	5f e3       	ldi	r21, 0x3F	; 63
    3f88:	0e 94 8c 24 	call	0x4918	; 0x4918 <__mulsf3>
    3f8c:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fixsfsi>
    3f90:	60 93 f7 01 	sts	0x01F7, r22
        mouse_report.y *= 0.7;
    3f94:	61 2f       	mov	r22, r17
    3f96:	77 27       	eor	r23, r23
    3f98:	67 fd       	sbrc	r22, 7
    3f9a:	70 95       	com	r23
    3f9c:	87 2f       	mov	r24, r23
    3f9e:	97 2f       	mov	r25, r23
    3fa0:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatsisf>
    3fa4:	23 e3       	ldi	r18, 0x33	; 51
    3fa6:	33 e3       	ldi	r19, 0x33	; 51
    3fa8:	43 e3       	ldi	r20, 0x33	; 51
    3faa:	5f e3       	ldi	r21, 0x3F	; 63
    3fac:	0e 94 8c 24 	call	0x4918	; 0x4918 <__mulsf3>
    3fb0:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fixsfsi>
    3fb4:	60 93 f8 01 	sts	0x01F8, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    3fb8:	1d 16       	cp	r1, r29
    3fba:	24 f4       	brge	.+8      	; 0x3fc4 <mousekey_task+0x100>
    3fbc:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3fc0:	80 93 f9 01 	sts	0x01F9, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    3fc4:	80 91 f9 01 	lds	r24, 0x01F9
    3fc8:	87 ff       	sbrs	r24, 7
    3fca:	05 c0       	rjmp	.+10     	; 0x3fd6 <mousekey_task+0x112>
    3fcc:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3fd0:	81 95       	neg	r24
    3fd2:	80 93 f9 01 	sts	0x01F9, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    3fd6:	1c 16       	cp	r1, r28
    3fd8:	24 f4       	brge	.+8      	; 0x3fe2 <mousekey_task+0x11e>
    3fda:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3fde:	80 93 fa 01 	sts	0x01FA, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    3fe2:	80 91 fa 01 	lds	r24, 0x01FA
    3fe6:	87 ff       	sbrs	r24, 7
    3fe8:	05 c0       	rjmp	.+10     	; 0x3ff4 <mousekey_task+0x130>
    3fea:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <wheel_unit>
    3fee:	81 95       	neg	r24
    3ff0:	80 93 fa 01 	sts	0x01FA, r24

    mousekey_send();
}
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    3ffa:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <mousekey_send>
}
    3ffe:	df 91       	pop	r29
    4000:	cf 91       	pop	r28
    4002:	1f 91       	pop	r17
    4004:	08 95       	ret

00004006 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4006:	e6 ef       	ldi	r30, 0xF6	; 246
    4008:	f1 e0       	ldi	r31, 0x01	; 1
    400a:	85 e0       	ldi	r24, 0x05	; 5
    400c:	df 01       	movw	r26, r30
    400e:	1d 92       	st	X+, r1
    4010:	8a 95       	dec	r24
    4012:	e9 f7       	brne	.-6      	; 0x400e <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4014:	10 92 f5 01 	sts	0x01F5, r1
    mousekey_accel = 0;
    4018:	10 92 f4 01 	sts	0x01F4, r1
    401c:	08 95       	ret

0000401e <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    401e:	89 e6       	ldi	r24, 0x69	; 105
    4020:	96 e0       	ldi	r25, 0x06	; 6
    4022:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4026:	1f 92       	push	r1
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	8f 93       	push	r24
    402c:	1f 92       	push	r1
    402e:	85 e0       	ldi	r24, 0x05	; 5
    4030:	8f 93       	push	r24
    4032:	8b e1       	ldi	r24, 0x1B	; 27
    4034:	96 e0       	ldi	r25, 0x06	; 6
    4036:	9f 93       	push	r25
    4038:	8f 93       	push	r24
    403a:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    403e:	0f 90       	pop	r0
    4040:	0f 90       	pop	r0
    4042:	0f 90       	pop	r0
    4044:	0f 90       	pop	r0
    4046:	0f 90       	pop	r0
    4048:	0f 90       	pop	r0
    404a:	08 95       	ret

0000404c <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    404c:	83 30       	cpi	r24, 0x03	; 3
    404e:	e9 f1       	breq	.+122    	; 0x40ca <mousekey_param_inc+0x7e>
    4050:	28 f4       	brcc	.+10     	; 0x405c <mousekey_param_inc+0x10>
    4052:	81 30       	cpi	r24, 0x01	; 1
    4054:	61 f0       	breq	.+24     	; 0x406e <mousekey_param_inc+0x22>
    4056:	82 30       	cpi	r24, 0x02	; 2
    4058:	09 f1       	breq	.+66     	; 0x409c <mousekey_param_inc+0x50>
    405a:	08 95       	ret
    405c:	85 30       	cpi	r24, 0x05	; 5
    405e:	09 f4       	brne	.+2      	; 0x4062 <mousekey_param_inc+0x16>
    4060:	62 c0       	rjmp	.+196    	; 0x4126 <mousekey_param_inc+0xda>
    4062:	08 f4       	brcc	.+2      	; 0x4066 <mousekey_param_inc+0x1a>
    4064:	49 c0       	rjmp	.+146    	; 0x40f8 <mousekey_param_inc+0xac>
    4066:	86 30       	cpi	r24, 0x06	; 6
    4068:	09 f4       	brne	.+2      	; 0x406c <mousekey_param_inc+0x20>
    406a:	74 c0       	rjmp	.+232    	; 0x4154 <mousekey_param_inc+0x108>
    406c:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    406e:	20 91 13 01 	lds	r18, 0x0113
    4072:	86 2f       	mov	r24, r22
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	82 0f       	add	r24, r18
    4078:	91 1d       	adc	r25, r1
    407a:	8f 3f       	cpi	r24, 0xFF	; 255
    407c:	91 05       	cpc	r25, r1
    407e:	20 f4       	brcc	.+8      	; 0x4088 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    4080:	62 0f       	add	r22, r18
    4082:	60 93 13 01 	sts	0x0113, r22
    4086:	03 c0       	rjmp	.+6      	; 0x408e <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4088:	8f ef       	ldi	r24, 0xFF	; 255
    408a:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    408e:	80 91 13 01 	lds	r24, 0x0113
    4092:	1f 92       	push	r1
    4094:	8f 93       	push	r24
    4096:	84 e5       	ldi	r24, 0x54	; 84
    4098:	95 e0       	ldi	r25, 0x05	; 5
    409a:	72 c0       	rjmp	.+228    	; 0x4180 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    409c:	20 91 12 01 	lds	r18, 0x0112
    40a0:	86 2f       	mov	r24, r22
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	82 0f       	add	r24, r18
    40a6:	91 1d       	adc	r25, r1
    40a8:	8f 3f       	cpi	r24, 0xFF	; 255
    40aa:	91 05       	cpc	r25, r1
    40ac:	20 f4       	brcc	.+8      	; 0x40b6 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    40ae:	62 0f       	add	r22, r18
    40b0:	60 93 12 01 	sts	0x0112, r22
    40b4:	03 c0       	rjmp	.+6      	; 0x40bc <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    40bc:	80 91 12 01 	lds	r24, 0x0112
    40c0:	1f 92       	push	r1
    40c2:	8f 93       	push	r24
    40c4:	82 e4       	ldi	r24, 0x42	; 66
    40c6:	95 e0       	ldi	r25, 0x05	; 5
    40c8:	5b c0       	rjmp	.+182    	; 0x4180 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    40ca:	20 91 11 01 	lds	r18, 0x0111
    40ce:	86 2f       	mov	r24, r22
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	82 0f       	add	r24, r18
    40d4:	91 1d       	adc	r25, r1
    40d6:	8f 3f       	cpi	r24, 0xFF	; 255
    40d8:	91 05       	cpc	r25, r1
    40da:	20 f4       	brcc	.+8      	; 0x40e4 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    40dc:	62 0f       	add	r22, r18
    40de:	60 93 11 01 	sts	0x0111, r22
    40e2:	03 c0       	rjmp	.+6      	; 0x40ea <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    40e4:	8f ef       	ldi	r24, 0xFF	; 255
    40e6:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    40ea:	80 91 11 01 	lds	r24, 0x0111
    40ee:	1f 92       	push	r1
    40f0:	8f 93       	push	r24
    40f2:	8f e2       	ldi	r24, 0x2F	; 47
    40f4:	95 e0       	ldi	r25, 0x05	; 5
    40f6:	44 c0       	rjmp	.+136    	; 0x4180 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    40f8:	20 91 10 01 	lds	r18, 0x0110
    40fc:	86 2f       	mov	r24, r22
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	82 0f       	add	r24, r18
    4102:	91 1d       	adc	r25, r1
    4104:	8f 3f       	cpi	r24, 0xFF	; 255
    4106:	91 05       	cpc	r25, r1
    4108:	20 f4       	brcc	.+8      	; 0x4112 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    410a:	62 0f       	add	r22, r18
    410c:	60 93 10 01 	sts	0x0110, r22
    4110:	03 c0       	rjmp	.+6      	; 0x4118 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4112:	8f ef       	ldi	r24, 0xFF	; 255
    4114:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    4118:	80 91 10 01 	lds	r24, 0x0110
    411c:	1f 92       	push	r1
    411e:	8f 93       	push	r24
    4120:	8a e1       	ldi	r24, 0x1A	; 26
    4122:	95 e0       	ldi	r25, 0x05	; 5
    4124:	2d c0       	rjmp	.+90     	; 0x4180 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4126:	20 91 0f 01 	lds	r18, 0x010F
    412a:	86 2f       	mov	r24, r22
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	82 0f       	add	r24, r18
    4130:	91 1d       	adc	r25, r1
    4132:	8f 3f       	cpi	r24, 0xFF	; 255
    4134:	91 05       	cpc	r25, r1
    4136:	20 f4       	brcc	.+8      	; 0x4140 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4138:	62 0f       	add	r22, r18
    413a:	60 93 0f 01 	sts	0x010F, r22
    413e:	03 c0       	rjmp	.+6      	; 0x4146 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4140:	8f ef       	ldi	r24, 0xFF	; 255
    4142:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4146:	80 91 0f 01 	lds	r24, 0x010F
    414a:	1f 92       	push	r1
    414c:	8f 93       	push	r24
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	95 e0       	ldi	r25, 0x05	; 5
    4152:	16 c0       	rjmp	.+44     	; 0x4180 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4154:	20 91 0e 01 	lds	r18, 0x010E
    4158:	86 2f       	mov	r24, r22
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	82 0f       	add	r24, r18
    415e:	91 1d       	adc	r25, r1
    4160:	8f 3f       	cpi	r24, 0xFF	; 255
    4162:	91 05       	cpc	r25, r1
    4164:	20 f4       	brcc	.+8      	; 0x416e <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4166:	62 0f       	add	r22, r18
    4168:	60 93 0e 01 	sts	0x010E, r22
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    416e:	8f ef       	ldi	r24, 0xFF	; 255
    4170:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4174:	80 91 0e 01 	lds	r24, 0x010E
    4178:	1f 92       	push	r1
    417a:	8f 93       	push	r24
    417c:	86 ee       	ldi	r24, 0xE6	; 230
    417e:	94 e0       	ldi	r25, 0x04	; 4
    4180:	9f 93       	push	r25
    4182:	8f 93       	push	r24
    4184:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
            break;
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	08 95       	ret

00004192 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4192:	83 30       	cpi	r24, 0x03	; 3
    4194:	81 f1       	breq	.+96     	; 0x41f6 <mousekey_param_dec+0x64>
    4196:	28 f4       	brcc	.+10     	; 0x41a2 <mousekey_param_dec+0x10>
    4198:	81 30       	cpi	r24, 0x01	; 1
    419a:	59 f0       	breq	.+22     	; 0x41b2 <mousekey_param_dec+0x20>
    419c:	82 30       	cpi	r24, 0x02	; 2
    419e:	d1 f0       	breq	.+52     	; 0x41d4 <mousekey_param_dec+0x42>
    41a0:	08 95       	ret
    41a2:	85 30       	cpi	r24, 0x05	; 5
    41a4:	09 f4       	brne	.+2      	; 0x41a8 <mousekey_param_dec+0x16>
    41a6:	49 c0       	rjmp	.+146    	; 0x423a <mousekey_param_dec+0xa8>
    41a8:	b8 f1       	brcs	.+110    	; 0x4218 <mousekey_param_dec+0x86>
    41aa:	86 30       	cpi	r24, 0x06	; 6
    41ac:	09 f4       	brne	.+2      	; 0x41b0 <mousekey_param_dec+0x1e>
    41ae:	56 c0       	rjmp	.+172    	; 0x425c <mousekey_param_dec+0xca>
    41b0:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    41b2:	80 91 13 01 	lds	r24, 0x0113
    41b6:	68 17       	cp	r22, r24
    41b8:	20 f4       	brcc	.+8      	; 0x41c2 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    41ba:	86 1b       	sub	r24, r22
    41bc:	80 93 13 01 	sts	0x0113, r24
    41c0:	02 c0       	rjmp	.+4      	; 0x41c6 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    41c2:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    41c6:	80 91 13 01 	lds	r24, 0x0113
    41ca:	1f 92       	push	r1
    41cc:	8f 93       	push	r24
    41ce:	87 ed       	ldi	r24, 0xD7	; 215
    41d0:	94 e0       	ldi	r25, 0x04	; 4
    41d2:	54 c0       	rjmp	.+168    	; 0x427c <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    41d4:	80 91 12 01 	lds	r24, 0x0112
    41d8:	68 17       	cp	r22, r24
    41da:	20 f4       	brcc	.+8      	; 0x41e4 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    41dc:	86 1b       	sub	r24, r22
    41de:	80 93 12 01 	sts	0x0112, r24
    41e2:	02 c0       	rjmp	.+4      	; 0x41e8 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    41e4:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    41e8:	80 91 12 01 	lds	r24, 0x0112
    41ec:	1f 92       	push	r1
    41ee:	8f 93       	push	r24
    41f0:	85 ec       	ldi	r24, 0xC5	; 197
    41f2:	94 e0       	ldi	r25, 0x04	; 4
    41f4:	43 c0       	rjmp	.+134    	; 0x427c <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    41f6:	80 91 11 01 	lds	r24, 0x0111
    41fa:	68 17       	cp	r22, r24
    41fc:	20 f4       	brcc	.+8      	; 0x4206 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    41fe:	86 1b       	sub	r24, r22
    4200:	80 93 11 01 	sts	0x0111, r24
    4204:	02 c0       	rjmp	.+4      	; 0x420a <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4206:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    420a:	80 91 11 01 	lds	r24, 0x0111
    420e:	1f 92       	push	r1
    4210:	8f 93       	push	r24
    4212:	82 eb       	ldi	r24, 0xB2	; 178
    4214:	94 e0       	ldi	r25, 0x04	; 4
    4216:	32 c0       	rjmp	.+100    	; 0x427c <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4218:	80 91 10 01 	lds	r24, 0x0110
    421c:	68 17       	cp	r22, r24
    421e:	20 f4       	brcc	.+8      	; 0x4228 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4220:	86 1b       	sub	r24, r22
    4222:	80 93 10 01 	sts	0x0110, r24
    4226:	02 c0       	rjmp	.+4      	; 0x422c <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    4228:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    422c:	80 91 10 01 	lds	r24, 0x0110
    4230:	1f 92       	push	r1
    4232:	8f 93       	push	r24
    4234:	8d e9       	ldi	r24, 0x9D	; 157
    4236:	94 e0       	ldi	r25, 0x04	; 4
    4238:	21 c0       	rjmp	.+66     	; 0x427c <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    423a:	80 91 0f 01 	lds	r24, 0x010F
    423e:	68 17       	cp	r22, r24
    4240:	20 f4       	brcc	.+8      	; 0x424a <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4242:	86 1b       	sub	r24, r22
    4244:	80 93 0f 01 	sts	0x010F, r24
    4248:	02 c0       	rjmp	.+4      	; 0x424e <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    424a:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    424e:	80 91 0f 01 	lds	r24, 0x010F
    4252:	1f 92       	push	r1
    4254:	8f 93       	push	r24
    4256:	84 e8       	ldi	r24, 0x84	; 132
    4258:	94 e0       	ldi	r25, 0x04	; 4
    425a:	10 c0       	rjmp	.+32     	; 0x427c <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    425c:	80 91 0e 01 	lds	r24, 0x010E
    4260:	68 17       	cp	r22, r24
    4262:	20 f4       	brcc	.+8      	; 0x426c <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4264:	86 1b       	sub	r24, r22
    4266:	80 93 0e 01 	sts	0x010E, r24
    426a:	02 c0       	rjmp	.+4      	; 0x4270 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    426c:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4270:	80 91 0e 01 	lds	r24, 0x010E
    4274:	1f 92       	push	r1
    4276:	8f 93       	push	r24
    4278:	89 e6       	ldi	r24, 0x69	; 105
    427a:	94 e0       	ldi	r25, 0x04	; 4
    427c:	9f 93       	push	r25
    427e:	8f 93       	push	r24
    4280:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
            break;
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	0f 90       	pop	r0
    428c:	08 95       	ret

0000428e <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    428e:	cf 93       	push	r28
    4290:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4292:	1f 92       	push	r1
    4294:	8f 93       	push	r24
    4296:	2e e6       	ldi	r18, 0x6E	; 110
    4298:	37 e0       	ldi	r19, 0x07	; 7
    429a:	3f 93       	push	r19
    429c:	2f 93       	push	r18
    429e:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    default_layer_set(1UL<<layer);
    42a2:	61 e0       	ldi	r22, 0x01	; 1
    42a4:	70 e0       	ldi	r23, 0x00	; 0
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	04 c0       	rjmp	.+8      	; 0x42b4 <switch_default_layer+0x26>
    42ac:	66 0f       	add	r22, r22
    42ae:	77 1f       	adc	r23, r23
    42b0:	88 1f       	adc	r24, r24
    42b2:	99 1f       	adc	r25, r25
    42b4:	ca 95       	dec	r28
    42b6:	d2 f7       	brpl	.-12     	; 0x42ac <switch_default_layer+0x1e>
    42b8:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <default_layer_set>
    clear_keyboard();
    42bc:	0f 90       	pop	r0
    42be:	0f 90       	pop	r0
    42c0:	0f 90       	pop	r0
    42c2:	0f 90       	pop	r0
}
    42c4:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    42c6:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <clear_keyboard>

000042ca <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    42ca:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    42cc:	87 32       	cpi	r24, 0x27	; 39
    42ce:	a8 f5       	brcc	.+106    	; 0x433a <command_common+0x70>
    42d0:	8e 31       	cpi	r24, 0x1E	; 30
    42d2:	08 f0       	brcs	.+2      	; 0x42d6 <command_common+0xc>
    42d4:	28 c1       	rjmp	.+592    	; 0x4526 <command_common+0x25c>
    42d6:	80 31       	cpi	r24, 0x10	; 16
    42d8:	09 f4       	brne	.+2      	; 0x42dc <command_common+0x12>
    42da:	9d c0       	rjmp	.+314    	; 0x4416 <command_common+0x14c>
    42dc:	f8 f4       	brcc	.+62     	; 0x431c <command_common+0x52>
    42de:	87 30       	cpi	r24, 0x07	; 7
    42e0:	09 f4       	brne	.+2      	; 0x42e4 <command_common+0x1a>
    42e2:	64 c0       	rjmp	.+200    	; 0x43ac <command_common+0xe2>
    42e4:	a8 f4       	brcc	.+42     	; 0x4310 <command_common+0x46>
    42e6:	86 30       	cpi	r24, 0x06	; 6
    42e8:	09 f0       	breq	.+2      	; 0x42ec <command_common+0x22>
    42ea:	21 c1       	rjmp	.+578    	; 0x452e <command_common+0x264>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    42ec:	80 91 ec 01 	lds	r24, 0x01EC
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    42f0:	81 7f       	andi	r24, 0xF1	; 241
    42f2:	8e 7f       	andi	r24, 0xFE	; 254
    42f4:	80 93 ec 01 	sts	0x01EC, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    42f8:	83 e7       	ldi	r24, 0x73	; 115
    42fa:	97 e0       	ldi	r25, 0x07	; 7
    42fc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4300:	88 e4       	ldi	r24, 0x48	; 72
    4302:	9a e0       	ldi	r25, 0x0A	; 10
    4304:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            command_state = CONSOLE;
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	80 93 fc 01 	sts	0x01FC, r24
    430e:	4c c0       	rjmp	.+152    	; 0x43a8 <command_common+0xde>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4310:	8b 30       	cpi	r24, 0x0B	; 11
    4312:	f1 f1       	breq	.+124    	; 0x4390 <command_common+0xc6>
    4314:	8e 30       	cpi	r24, 0x0E	; 14
    4316:	09 f4       	brne	.+2      	; 0x431a <command_common+0x50>
    4318:	6b c0       	rjmp	.+214    	; 0x43f0 <command_common+0x126>
    431a:	09 c1       	rjmp	.+530    	; 0x452e <command_common+0x264>
    431c:	86 31       	cpi	r24, 0x16	; 22
    431e:	09 f4       	brne	.+2      	; 0x4322 <command_common+0x58>
    4320:	ad c0       	rjmp	.+346    	; 0x447c <command_common+0x1b2>
    4322:	20 f4       	brcc	.+8      	; 0x432c <command_common+0x62>
    4324:	81 31       	cpi	r24, 0x11	; 17
    4326:	09 f4       	brne	.+2      	; 0x432a <command_common+0x60>
    4328:	ea c0       	rjmp	.+468    	; 0x44fe <command_common+0x234>
    432a:	01 c1       	rjmp	.+514    	; 0x452e <command_common+0x264>
    432c:	89 31       	cpi	r24, 0x19	; 25
    432e:	09 f4       	brne	.+2      	; 0x4332 <command_common+0x68>
    4330:	8e c0       	rjmp	.+284    	; 0x444e <command_common+0x184>
    4332:	8b 31       	cpi	r24, 0x1B	; 27
    4334:	09 f4       	brne	.+2      	; 0x4338 <command_common+0x6e>
    4336:	49 c0       	rjmp	.+146    	; 0x43ca <command_common+0x100>
    4338:	fa c0       	rjmp	.+500    	; 0x452e <command_common+0x264>
    433a:	88 33       	cpi	r24, 0x38	; 56
    433c:	49 f1       	breq	.+82     	; 0x4390 <command_common+0xc6>
    433e:	50 f4       	brcc	.+20     	; 0x4354 <command_common+0x8a>
    4340:	89 32       	cpi	r24, 0x29	; 41
    4342:	09 f4       	brne	.+2      	; 0x4346 <command_common+0x7c>
    4344:	ee c0       	rjmp	.+476    	; 0x4522 <command_common+0x258>
    4346:	85 33       	cpi	r24, 0x35	; 53
    4348:	09 f4       	brne	.+2      	; 0x434c <command_common+0x82>
    434a:	eb c0       	rjmp	.+470    	; 0x4522 <command_common+0x258>
    434c:	87 32       	cpi	r24, 0x27	; 39
    434e:	09 f0       	breq	.+2      	; 0x4352 <command_common+0x88>
    4350:	ee c0       	rjmp	.+476    	; 0x452e <command_common+0x264>
    4352:	e7 c0       	rjmp	.+462    	; 0x4522 <command_common+0x258>
    4354:	83 34       	cpi	r24, 0x43	; 67
    4356:	09 f4       	brne	.+2      	; 0x435a <command_common+0x90>
    4358:	e4 c0       	rjmp	.+456    	; 0x4522 <command_common+0x258>
    435a:	28 f4       	brcc	.+10     	; 0x4366 <command_common+0x9c>
    435c:	8a 33       	cpi	r24, 0x3A	; 58
    435e:	08 f4       	brcc	.+2      	; 0x4362 <command_common+0x98>
    4360:	e6 c0       	rjmp	.+460    	; 0x452e <command_common+0x264>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4362:	89 53       	subi	r24, 0x39	; 57
    4364:	e1 c0       	rjmp	.+450    	; 0x4528 <command_common+0x25e>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4366:	88 34       	cpi	r24, 0x48	; 72
    4368:	09 f0       	breq	.+2      	; 0x436c <command_common+0xa2>
    436a:	e1 c0       	rjmp	.+450    	; 0x452e <command_common+0x264>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    436c:	0e 94 c9 14 	call	0x2992	; 0x2992 <clear_keyboard>
            print("\n\nbootloader... ");
    4370:	87 e3       	ldi	r24, 0x37	; 55
    4372:	9a e0       	ldi	r25, 0x0A	; 10
    4374:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    4378:	2f ef       	ldi	r18, 0xFF	; 255
    437a:	83 ed       	ldi	r24, 0xD3	; 211
    437c:	90 e3       	ldi	r25, 0x30	; 48
    437e:	21 50       	subi	r18, 0x01	; 1
    4380:	80 40       	sbci	r24, 0x00	; 0
    4382:	90 40       	sbci	r25, 0x00	; 0
    4384:	e1 f7       	brne	.-8      	; 0x437e <command_common+0xb4>
    4386:	00 c0       	rjmp	.+0      	; 0x4388 <command_common+0xbe>
    4388:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    438a:	0e 94 85 1c 	call	0x390a	; 0x390a <bootloader_jump>
    438e:	0c c0       	rjmp	.+24     	; 0x43a8 <command_common+0xde>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4390:	8a e9       	ldi	r24, 0x9A	; 154
    4392:	97 e0       	ldi	r25, 0x07	; 7
    4394:	59 c0       	rjmp	.+178    	; 0x4448 <command_common+0x17e>
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
    4396:	8e e1       	ldi	r24, 0x1E	; 30
    4398:	9a e0       	ldi	r25, 0x0A	; 10
    439a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
                debug_enable   = true;
    439e:	80 91 ec 01 	lds	r24, 0x01EC
    43a2:	81 60       	ori	r24, 0x01	; 1
    43a4:	80 93 ec 01 	sts	0x01EC, r24
            break;
        default:
            print("?");
            return false;
    }
    return true;
    43a8:	c1 e0       	ldi	r28, 0x01	; 1
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
    43aa:	c6 c0       	rjmp	.+396    	; 0x4538 <command_common+0x26e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    43ac:	80 91 ec 01 	lds	r24, 0x01EC
    43b0:	c8 2f       	mov	r28, r24
    43b2:	c1 70       	andi	r28, 0x01	; 1
    43b4:	80 ff       	sbrs	r24, 0
    43b6:	ef cf       	rjmp	.-34     	; 0x4396 <command_common+0xcc>
                print("\ndebug: off\n");
    43b8:	8a e2       	ldi	r24, 0x2A	; 42
    43ba:	9a e0       	ldi	r25, 0x0A	; 10
    43bc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
                debug_matrix   = false;
    43c0:	80 91 ec 01 	lds	r24, 0x01EC
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    43c4:	81 7f       	andi	r24, 0xF1	; 241
    43c6:	8e 7f       	andi	r24, 0xFE	; 254
    43c8:	3a c0       	rjmp	.+116    	; 0x443e <command_common+0x174>
                print("\ndebug: on\n");
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    43ca:	80 91 ec 01 	lds	r24, 0x01EC
    43ce:	81 fb       	bst	r24, 1
    43d0:	cc 27       	eor	r28, r28
    43d2:	c0 f9       	bld	r28, 0
    43d4:	91 e0       	ldi	r25, 0x01	; 1
    43d6:	c9 27       	eor	r28, r25
    43d8:	c0 fb       	bst	r28, 0
    43da:	81 f9       	bld	r24, 1
    43dc:	80 93 ec 01 	sts	0x01EC, r24
            if (debug_matrix) {
    43e0:	cc 23       	and	r28, r28
    43e2:	19 f0       	breq	.+6      	; 0x43ea <command_common+0x120>
                print("\nmatrix: on\n");
    43e4:	81 e1       	ldi	r24, 0x11	; 17
    43e6:	9a e0       	ldi	r25, 0x0A	; 10
    43e8:	25 c0       	rjmp	.+74     	; 0x4434 <command_common+0x16a>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    43ea:	83 e0       	ldi	r24, 0x03	; 3
    43ec:	9a e0       	ldi	r25, 0x0A	; 10
    43ee:	2c c0       	rjmp	.+88     	; 0x4448 <command_common+0x17e>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    43f0:	80 91 ec 01 	lds	r24, 0x01EC
    43f4:	82 fb       	bst	r24, 2
    43f6:	cc 27       	eor	r28, r28
    43f8:	c0 f9       	bld	r28, 0
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	c9 27       	eor	r28, r25
    43fe:	c0 fb       	bst	r28, 0
    4400:	82 f9       	bld	r24, 2
    4402:	80 93 ec 01 	sts	0x01EC, r24
            if (debug_keyboard) {
    4406:	cc 23       	and	r28, r28
    4408:	19 f0       	breq	.+6      	; 0x4410 <command_common+0x146>
                print("\nkeyboard: on\n");
    440a:	84 ef       	ldi	r24, 0xF4	; 244
    440c:	99 e0       	ldi	r25, 0x09	; 9
    440e:	12 c0       	rjmp	.+36     	; 0x4434 <command_common+0x16a>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4410:	84 ee       	ldi	r24, 0xE4	; 228
    4412:	99 e0       	ldi	r25, 0x09	; 9
    4414:	19 c0       	rjmp	.+50     	; 0x4448 <command_common+0x17e>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4416:	80 91 ec 01 	lds	r24, 0x01EC
    441a:	83 fb       	bst	r24, 3
    441c:	cc 27       	eor	r28, r28
    441e:	c0 f9       	bld	r28, 0
    4420:	91 e0       	ldi	r25, 0x01	; 1
    4422:	c9 27       	eor	r28, r25
    4424:	c0 fb       	bst	r28, 0
    4426:	83 f9       	bld	r24, 3
    4428:	80 93 ec 01 	sts	0x01EC, r24
            if (debug_mouse) {
    442c:	cc 23       	and	r28, r28
    442e:	51 f0       	breq	.+20     	; 0x4444 <command_common+0x17a>
                print("\nmouse: on\n");
    4430:	88 ed       	ldi	r24, 0xD8	; 216
    4432:	99 e0       	ldi	r25, 0x09	; 9
    4434:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
                debug_enable = true;
    4438:	80 91 ec 01 	lds	r24, 0x01EC
    443c:	81 60       	ori	r24, 0x01	; 1
    443e:	80 93 ec 01 	sts	0x01EC, r24
    4442:	7a c0       	rjmp	.+244    	; 0x4538 <command_common+0x26e>
            } else {
                print("\nmouse: off\n");
    4444:	8b ec       	ldi	r24, 0xCB	; 203
    4446:	99 e0       	ldi	r25, 0x09	; 9
    4448:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    444c:	ad cf       	rjmp	.-166    	; 0x43a8 <command_common+0xde>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    444e:	8c eb       	ldi	r24, 0xBC	; 188
    4450:	99 e0       	ldi	r25, 0x09	; 9
    4452:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4456:	8f e8       	ldi	r24, 0x8F	; 143
    4458:	99 e0       	ldi	r25, 0x09	; 9
    445a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    445e:	88 e5       	ldi	r24, 0x58	; 88
    4460:	99 e0       	ldi	r25, 0x09	; 9
    4462:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4466:	81 e3       	ldi	r24, 0x31	; 49
    4468:	99 e0       	ldi	r25, 0x09	; 9
    446a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            /* build options */
            print("OPTIONS:"
    446e:	86 ef       	ldi	r24, 0xF6	; 246
    4470:	98 e0       	ldi	r25, 0x08	; 8
    4472:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4476:	88 ec       	ldi	r24, 0xC8	; 200
    4478:	98 e0       	ldi	r25, 0x08	; 8
    447a:	e6 cf       	rjmp	.-52     	; 0x4448 <command_common+0x17e>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    447c:	8a eb       	ldi	r24, 0xBA	; 186
    447e:	98 e0       	ldi	r25, 0x08	; 8
    4480:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            print_val_hex8(host_keyboard_leds());
    4484:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <host_keyboard_leds>
    4488:	1f 92       	push	r1
    448a:	8f 93       	push	r24
    448c:	80 ea       	ldi	r24, 0xA0	; 160
    448e:	98 e0       	ldi	r25, 0x08	; 8
    4490:	9f 93       	push	r25
    4492:	8f 93       	push	r24
    4494:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4498:	80 91 0a 01 	lds	r24, 0x010A
    449c:	1f 92       	push	r1
    449e:	8f 93       	push	r24
    44a0:	89 e8       	ldi	r24, 0x89	; 137
    44a2:	98 e0       	ldi	r25, 0x08	; 8
    44a4:	9f 93       	push	r25
    44a6:	8f 93       	push	r24
    44a8:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
            print_val_hex8(keyboard_idle);
    44ac:	80 91 77 01 	lds	r24, 0x0177
    44b0:	1f 92       	push	r1
    44b2:	8f 93       	push	r24
    44b4:	86 e7       	ldi	r24, 0x76	; 118
    44b6:	98 e0       	ldi	r25, 0x08	; 8
    44b8:	9f 93       	push	r25
    44ba:	8f 93       	push	r24
    44bc:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    44c0:	80 91 0b 01 	lds	r24, 0x010B
    44c4:	1f 92       	push	r1
    44c6:	8f 93       	push	r24
    44c8:	83 e6       	ldi	r24, 0x63	; 99
    44ca:	98 e0       	ldi	r25, 0x08	; 8
    44cc:	9f 93       	push	r25
    44ce:	8f 93       	push	r24
    44d0:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    44d4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <timer_read32>
    44d8:	9f 93       	push	r25
    44da:	8f 93       	push	r24
    44dc:	7f 93       	push	r23
    44de:	6f 93       	push	r22
    44e0:	8c e4       	ldi	r24, 0x4C	; 76
    44e2:	98 e0       	ldi	r25, 0x08	; 8
    44e4:	9f 93       	push	r25
    44e6:	8f 93       	push	r24
    44e8:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    44ec:	8d b7       	in	r24, 0x3d	; 61
    44ee:	9e b7       	in	r25, 0x3e	; 62
    44f0:	46 96       	adiw	r24, 0x16	; 22
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	f8 94       	cli
    44f6:	9e bf       	out	0x3e, r25	; 62
    44f8:	0f be       	out	0x3f, r0	; 63
    44fa:	8d bf       	out	0x3d, r24	; 61
    44fc:	55 cf       	rjmp	.-342    	; 0x43a8 <command_common+0xde>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    44fe:	0e 94 c9 14 	call	0x2992	; 0x2992 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4502:	c0 91 0b 01 	lds	r28, 0x010B
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	c8 27       	eor	r28, r24
    450a:	c0 93 0b 01 	sts	0x010B, r28
            if (keyboard_nkro) {
    450e:	cc 23       	and	r28, r28
    4510:	29 f0       	breq	.+10     	; 0x451c <command_common+0x252>
                print("NKRO: on\n");
    4512:	82 e4       	ldi	r24, 0x42	; 66
    4514:	98 e0       	ldi	r25, 0x08	; 8
    4516:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    451a:	0e c0       	rjmp	.+28     	; 0x4538 <command_common+0x26e>
            } else {
                print("NKRO: off\n");
    451c:	87 e3       	ldi	r24, 0x37	; 55
    451e:	98 e0       	ldi	r25, 0x08	; 8
    4520:	93 cf       	rjmp	.-218    	; 0x4448 <command_common+0x17e>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4522:	80 e0       	ldi	r24, 0x00	; 0
    4524:	01 c0       	rjmp	.+2      	; 0x4528 <command_common+0x25e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4526:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4528:	0e 94 47 21 	call	0x428e	; 0x428e <switch_default_layer>
    452c:	3d cf       	rjmp	.-390    	; 0x43a8 <command_common+0xde>
            break;
        default:
            print("?");
    452e:	85 e3       	ldi	r24, 0x35	; 53
    4530:	98 e0       	ldi	r25, 0x08	; 8
    4532:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            return false;
    4536:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4538:	8c 2f       	mov	r24, r28
    453a:	cf 91       	pop	r28
    453c:	08 95       	ret

0000453e <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	08 95       	ret

00004542 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	08 95       	ret

00004546 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4546:	cf 93       	push	r28
    4548:	c8 2f       	mov	r28, r24
    switch (command_state) {
    454a:	80 91 fc 01 	lds	r24, 0x01FC
    454e:	81 30       	cpi	r24, 0x01	; 1
    4550:	71 f0       	breq	.+28     	; 0x456e <command_proc+0x28>
    4552:	20 f0       	brcs	.+8      	; 0x455c <command_proc+0x16>
    4554:	82 30       	cpi	r24, 0x02	; 2
    4556:	09 f4       	brne	.+2      	; 0x455a <command_proc+0x14>
    4558:	48 c0       	rjmp	.+144    	; 0x45ea <command_proc+0xa4>
    455a:	3f c1       	rjmp	.+638    	; 0x47da <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    455c:	a0 91 0c 01 	lds	r26, 0x010C
    4560:	b0 91 0d 01 	lds	r27, 0x010D
    4564:	8c 91       	ld	r24, X
    4566:	82 32       	cpi	r24, 0x22	; 34
    4568:	09 f0       	breq	.+2      	; 0x456c <command_proc+0x26>
    456a:	39 c1       	rjmp	.+626    	; 0x47de <command_proc+0x298>
    456c:	07 c0       	rjmp	.+14     	; 0x457c <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    456e:	a0 91 0c 01 	lds	r26, 0x010C
    4572:	b0 91 0d 01 	lds	r27, 0x010D
    4576:	8c 91       	ld	r24, X
    4578:	82 32       	cpi	r24, 0x22	; 34
    457a:	49 f4       	brne	.+18     	; 0x458e <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    457c:	8c 2f       	mov	r24, r28
    457e:	0e 94 9f 22 	call	0x453e	; 0x453e <command_extra>
    4582:	81 11       	cpse	r24, r1
    4584:	2f c0       	rjmp	.+94     	; 0x45e4 <command_proc+0x9e>
    4586:	8c 2f       	mov	r24, r28
    4588:	0e 94 65 21 	call	0x42ca	; 0x42ca <command_common>
    458c:	2c c0       	rjmp	.+88     	; 0x45e6 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    458e:	8c 2f       	mov	r24, r28
    4590:	0e 94 a1 22 	call	0x4542	; 0x4542 <command_console_extra>
    4594:	81 11       	cpse	r24, r1
    4596:	26 c0       	rjmp	.+76     	; 0x45e4 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4598:	c4 31       	cpi	r28, 0x14	; 20
    459a:	e1 f0       	breq	.+56     	; 0x45d4 <command_proc+0x8e>
    459c:	70 f4       	brcc	.+28     	; 0x45ba <command_proc+0x74>
    459e:	cb 30       	cpi	r28, 0x0B	; 11
    45a0:	81 f0       	breq	.+32     	; 0x45c2 <command_proc+0x7c>
    45a2:	c0 31       	cpi	r28, 0x10	; 16
    45a4:	d1 f4       	brne	.+52     	; 0x45da <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    45a6:	0e 94 0f 20 	call	0x401e	; 0x401e <mousekey_console_help>
            print("M> ");
    45aa:	86 e6       	ldi	r24, 0x66	; 102
    45ac:	97 e0       	ldi	r25, 0x07	; 7
    45ae:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
            command_state = MOUSEKEY;
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	80 93 fc 01 	sts	0x01FC, r24
    45b8:	15 c0       	rjmp	.+42     	; 0x45e4 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    45ba:	c9 32       	cpi	r28, 0x29	; 41
    45bc:	59 f0       	breq	.+22     	; 0x45d4 <command_proc+0x8e>
    45be:	c8 33       	cpi	r28, 0x38	; 56
    45c0:	61 f4       	brne	.+24     	; 0x45da <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    45c2:	83 e7       	ldi	r24, 0x73	; 115
    45c4:	97 e0       	ldi	r25, 0x07	; 7
    45c6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    45ca:	8a e6       	ldi	r24, 0x6A	; 106
    45cc:	97 e0       	ldi	r25, 0x07	; 7
    45ce:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    45d2:	08 c0       	rjmp	.+16     	; 0x45e4 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    45d4:	10 92 fc 01 	sts	0x01FC, r1
    45d8:	04 c1       	rjmp	.+520    	; 0x47e2 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    45da:	84 e6       	ldi	r24, 0x64	; 100
    45dc:	97 e0       	ldi	r25, 0x07	; 7
    45de:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    45e2:	ff c0       	rjmp	.+510    	; 0x47e2 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	81 70       	andi	r24, 0x01	; 1
    45e8:	fe c0       	rjmp	.+508    	; 0x47e6 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    45ea:	c4 32       	cpi	r28, 0x24	; 36
    45ec:	28 f5       	brcc	.+74     	; 0x4638 <command_proc+0xf2>
    45ee:	ce 31       	cpi	r28, 0x1E	; 30
    45f0:	08 f0       	brcs	.+2      	; 0x45f4 <command_proc+0xae>
    45f2:	c1 c0       	rjmp	.+386    	; 0x4776 <command_proc+0x230>
    45f4:	cb 30       	cpi	r28, 0x0B	; 11
    45f6:	a1 f1       	breq	.+104    	; 0x4660 <command_proc+0x11a>
    45f8:	d0 f4       	brcc	.+52     	; 0x462e <command_proc+0xe8>
    45fa:	c7 30       	cpi	r28, 0x07	; 7
    45fc:	09 f0       	breq	.+2      	; 0x4600 <command_proc+0xba>
    45fe:	d3 c0       	rjmp	.+422    	; 0x47a6 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4600:	8e e1       	ldi	r24, 0x1E	; 30
    4602:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4606:	82 e3       	ldi	r24, 0x32	; 50
    4608:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    460c:	8a e0       	ldi	r24, 0x0A	; 10
    460e:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4612:	84 e1       	ldi	r24, 0x14	; 20
    4614:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4618:	88 e0       	ldi	r24, 0x08	; 8
    461a:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    461e:	88 e2       	ldi	r24, 0x28	; 40
    4620:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4624:	8a e0       	ldi	r24, 0x0A	; 10
    4626:	96 e0       	ldi	r25, 0x06	; 6
    4628:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    462c:	bf c0       	rjmp	.+382    	; 0x47ac <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    462e:	c3 31       	cpi	r28, 0x13	; 19
    4630:	49 f1       	breq	.+82     	; 0x4684 <command_proc+0x13e>
    4632:	c4 31       	cpi	r28, 0x14	; 20
    4634:	c1 f0       	breq	.+48     	; 0x4666 <command_proc+0x120>
    4636:	b7 c0       	rjmp	.+366    	; 0x47a6 <command_proc+0x260>
    4638:	cb 34       	cpi	r28, 0x4B	; 75
    463a:	09 f4       	brne	.+2      	; 0x463e <command_proc+0xf8>
    463c:	a9 c0       	rjmp	.+338    	; 0x4790 <command_proc+0x24a>
    463e:	28 f4       	brcc	.+10     	; 0x464a <command_proc+0x104>
    4640:	c9 32       	cpi	r28, 0x29	; 41
    4642:	89 f0       	breq	.+34     	; 0x4666 <command_proc+0x120>
    4644:	c8 33       	cpi	r28, 0x38	; 56
    4646:	61 f0       	breq	.+24     	; 0x4660 <command_proc+0x11a>
    4648:	ae c0       	rjmp	.+348    	; 0x47a6 <command_proc+0x260>
    464a:	c1 35       	cpi	r28, 0x51	; 81
    464c:	09 f4       	brne	.+2      	; 0x4650 <command_proc+0x10a>
    464e:	9e c0       	rjmp	.+316    	; 0x478c <command_proc+0x246>
    4650:	c2 35       	cpi	r28, 0x52	; 82
    4652:	09 f4       	brne	.+2      	; 0x4656 <command_proc+0x110>
    4654:	99 c0       	rjmp	.+306    	; 0x4788 <command_proc+0x242>
    4656:	ce 34       	cpi	r28, 0x4E	; 78
    4658:	09 f0       	breq	.+2      	; 0x465c <command_proc+0x116>
    465a:	a5 c0       	rjmp	.+330    	; 0x47a6 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    465c:	6a e0       	ldi	r22, 0x0A	; 10
    465e:	9e c0       	rjmp	.+316    	; 0x479c <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4660:	0e 94 0f 20 	call	0x401e	; 0x401e <mousekey_console_help>
    4664:	a3 c0       	rjmp	.+326    	; 0x47ac <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4666:	80 91 fb 01 	lds	r24, 0x01FB
    466a:	88 23       	and	r24, r24
    466c:	19 f0       	breq	.+6      	; 0x4674 <command_proc+0x12e>
                mousekey_param = 0;
    466e:	10 92 fb 01 	sts	0x01FB, r1
    4672:	9c c0       	rjmp	.+312    	; 0x47ac <command_proc+0x266>
            } else {
                print("C> ");
    4674:	87 e1       	ldi	r24, 0x17	; 23
    4676:	96 e0       	ldi	r25, 0x06	; 6
    4678:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
                command_state = CONSOLE;
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	80 93 fc 01 	sts	0x01FC, r24
    4682:	b1 c0       	rjmp	.+354    	; 0x47e6 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4684:	81 ef       	ldi	r24, 0xF1	; 241
    4686:	95 e0       	ldi	r25, 0x05	; 5
    4688:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    468c:	8f ed       	ldi	r24, 0xDF	; 223
    468e:	95 e0       	ldi	r25, 0x05	; 5
    4690:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    4694:	80 91 13 01 	lds	r24, 0x0113
    4698:	1f 92       	push	r1
    469a:	8f 93       	push	r24
    469c:	8c ed       	ldi	r24, 0xDC	; 220
    469e:	95 e0       	ldi	r25, 0x05	; 5
    46a0:	9f 93       	push	r25
    46a2:	8f 93       	push	r24
    46a4:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    46a8:	8a ed       	ldi	r24, 0xDA	; 218
    46aa:	95 e0       	ldi	r25, 0x05	; 5
    46ac:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    46b0:	88 ec       	ldi	r24, 0xC8	; 200
    46b2:	95 e0       	ldi	r25, 0x05	; 5
    46b4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    46b8:	80 91 12 01 	lds	r24, 0x0112
    46bc:	1f 92       	push	r1
    46be:	8f 93       	push	r24
    46c0:	85 ec       	ldi	r24, 0xC5	; 197
    46c2:	95 e0       	ldi	r25, 0x05	; 5
    46c4:	9f 93       	push	r25
    46c6:	8f 93       	push	r24
    46c8:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    46cc:	83 ec       	ldi	r24, 0xC3	; 195
    46ce:	95 e0       	ldi	r25, 0x05	; 5
    46d0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    46d4:	84 eb       	ldi	r24, 0xB4	; 180
    46d6:	95 e0       	ldi	r25, 0x05	; 5
    46d8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    46dc:	80 91 11 01 	lds	r24, 0x0111
    46e0:	1f 92       	push	r1
    46e2:	8f 93       	push	r24
    46e4:	81 eb       	ldi	r24, 0xB1	; 177
    46e6:	95 e0       	ldi	r25, 0x05	; 5
    46e8:	9f 93       	push	r25
    46ea:	8f 93       	push	r24
    46ec:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    46f0:	8f ea       	ldi	r24, 0xAF	; 175
    46f2:	95 e0       	ldi	r25, 0x05	; 5
    46f4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    46f8:	8e e9       	ldi	r24, 0x9E	; 158
    46fa:	95 e0       	ldi	r25, 0x05	; 5
    46fc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    4700:	80 91 10 01 	lds	r24, 0x0110
    4704:	1f 92       	push	r1
    4706:	8f 93       	push	r24
    4708:	8b e9       	ldi	r24, 0x9B	; 155
    470a:	95 e0       	ldi	r25, 0x05	; 5
    470c:	9f 93       	push	r25
    470e:	8f 93       	push	r24
    4710:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    4714:	89 e9       	ldi	r24, 0x99	; 153
    4716:	95 e0       	ldi	r25, 0x05	; 5
    4718:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    471c:	84 e8       	ldi	r24, 0x84	; 132
    471e:	95 e0       	ldi	r25, 0x05	; 5
    4720:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    4724:	80 91 0f 01 	lds	r24, 0x010F
    4728:	1f 92       	push	r1
    472a:	8f 93       	push	r24
    472c:	81 e8       	ldi	r24, 0x81	; 129
    472e:	95 e0       	ldi	r25, 0x05	; 5
    4730:	9f 93       	push	r25
    4732:	8f 93       	push	r24
    4734:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    4738:	8f e7       	ldi	r24, 0x7F	; 127
    473a:	95 e0       	ldi	r25, 0x05	; 5
    473c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4740:	88 e6       	ldi	r24, 0x68	; 104
    4742:	95 e0       	ldi	r25, 0x05	; 5
    4744:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    4748:	80 91 0e 01 	lds	r24, 0x010E
    474c:	1f 92       	push	r1
    474e:	8f 93       	push	r24
    4750:	85 e6       	ldi	r24, 0x65	; 101
    4752:	95 e0       	ldi	r25, 0x05	; 5
    4754:	9f 93       	push	r25
    4756:	8f 93       	push	r24
    4758:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    475c:	83 e6       	ldi	r24, 0x63	; 99
    475e:	95 e0       	ldi	r25, 0x05	; 5
    4760:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
    4764:	8d b7       	in	r24, 0x3d	; 61
    4766:	9e b7       	in	r25, 0x3e	; 62
    4768:	48 96       	adiw	r24, 0x18	; 24
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	9e bf       	out	0x3e, r25	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	8d bf       	out	0x3d, r24	; 61
    4774:	1b c0       	rjmp	.+54     	; 0x47ac <command_proc+0x266>
    4776:	ce 51       	subi	r28, 0x1E	; 30
    4778:	ec 2f       	mov	r30, r28
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	e2 5d       	subi	r30, 0xD2	; 210
    477e:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4780:	80 81       	ld	r24, Z
    4782:	80 93 fb 01 	sts	0x01FB, r24
    4786:	12 c0       	rjmp	.+36     	; 0x47ac <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4788:	61 e0       	ldi	r22, 0x01	; 1
    478a:	03 c0       	rjmp	.+6      	; 0x4792 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    478c:	61 e0       	ldi	r22, 0x01	; 1
    478e:	06 c0       	rjmp	.+12     	; 0x479c <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4790:	6a e0       	ldi	r22, 0x0A	; 10
    4792:	80 91 fb 01 	lds	r24, 0x01FB
    4796:	0e 94 26 20 	call	0x404c	; 0x404c <mousekey_param_inc>
    479a:	08 c0       	rjmp	.+16     	; 0x47ac <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    479c:	80 91 fb 01 	lds	r24, 0x01FB
    47a0:	0e 94 c9 20 	call	0x4192	; 0x4192 <mousekey_param_dec>
    47a4:	03 c0       	rjmp	.+6      	; 0x47ac <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    47a6:	88 e0       	ldi	r24, 0x08	; 8
    47a8:	96 e0       	ldi	r25, 0x06	; 6
    47aa:	13 c0       	rjmp	.+38     	; 0x47d2 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    47ac:	80 91 fb 01 	lds	r24, 0x01FB
    47b0:	88 23       	and	r24, r24
    47b2:	69 f0       	breq	.+26     	; 0x47ce <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    47b4:	1f 92       	push	r1
    47b6:	8f 93       	push	r24
    47b8:	82 e0       	ldi	r24, 0x02	; 2
    47ba:	96 e0       	ldi	r25, 0x06	; 6
    47bc:	9f 93       	push	r25
    47be:	8f 93       	push	r24
    47c0:	0e 94 11 06 	call	0xc22	; 0xc22 <__xprintf>
    47c4:	0f 90       	pop	r0
    47c6:	0f 90       	pop	r0
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	04 c0       	rjmp	.+8      	; 0x47d6 <command_proc+0x290>
    } else {
        print("M>" );
    47ce:	8f ef       	ldi	r24, 0xFF	; 255
    47d0:	95 e0       	ldi	r25, 0x05	; 5
    47d2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	06 c0       	rjmp	.+12     	; 0x47e6 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    47da:	10 92 fc 01 	sts	0x01FC, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	02 c0       	rjmp	.+4      	; 0x47e6 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	00 cf       	rjmp	.-512    	; 0x45e6 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    47e6:	cf 91       	pop	r28
    47e8:	08 95       	ret

000047ea <__fixsfsi>:
    47ea:	04 d0       	rcall	.+8      	; 0x47f4 <__fixunssfsi>
    47ec:	68 94       	set
    47ee:	b1 11       	cpse	r27, r1
    47f0:	8d c0       	rjmp	.+282    	; 0x490c <__fp_szero>
    47f2:	08 95       	ret

000047f4 <__fixunssfsi>:
    47f4:	70 d0       	rcall	.+224    	; 0x48d6 <__fp_splitA>
    47f6:	88 f0       	brcs	.+34     	; 0x481a <__fixunssfsi+0x26>
    47f8:	9f 57       	subi	r25, 0x7F	; 127
    47fa:	90 f0       	brcs	.+36     	; 0x4820 <__fixunssfsi+0x2c>
    47fc:	b9 2f       	mov	r27, r25
    47fe:	99 27       	eor	r25, r25
    4800:	b7 51       	subi	r27, 0x17	; 23
    4802:	a0 f0       	brcs	.+40     	; 0x482c <__fixunssfsi+0x38>
    4804:	d1 f0       	breq	.+52     	; 0x483a <__fixunssfsi+0x46>
    4806:	66 0f       	add	r22, r22
    4808:	77 1f       	adc	r23, r23
    480a:	88 1f       	adc	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	1a f0       	brmi	.+6      	; 0x4816 <__fixunssfsi+0x22>
    4810:	ba 95       	dec	r27
    4812:	c9 f7       	brne	.-14     	; 0x4806 <__fixunssfsi+0x12>
    4814:	12 c0       	rjmp	.+36     	; 0x483a <__fixunssfsi+0x46>
    4816:	b1 30       	cpi	r27, 0x01	; 1
    4818:	81 f0       	breq	.+32     	; 0x483a <__fixunssfsi+0x46>
    481a:	77 d0       	rcall	.+238    	; 0x490a <__fp_zero>
    481c:	b1 e0       	ldi	r27, 0x01	; 1
    481e:	08 95       	ret
    4820:	74 c0       	rjmp	.+232    	; 0x490a <__fp_zero>
    4822:	67 2f       	mov	r22, r23
    4824:	78 2f       	mov	r23, r24
    4826:	88 27       	eor	r24, r24
    4828:	b8 5f       	subi	r27, 0xF8	; 248
    482a:	39 f0       	breq	.+14     	; 0x483a <__fixunssfsi+0x46>
    482c:	b9 3f       	cpi	r27, 0xF9	; 249
    482e:	cc f3       	brlt	.-14     	; 0x4822 <__fixunssfsi+0x2e>
    4830:	86 95       	lsr	r24
    4832:	77 95       	ror	r23
    4834:	67 95       	ror	r22
    4836:	b3 95       	inc	r27
    4838:	d9 f7       	brne	.-10     	; 0x4830 <__fixunssfsi+0x3c>
    483a:	3e f4       	brtc	.+14     	; 0x484a <__fixunssfsi+0x56>
    483c:	90 95       	com	r25
    483e:	80 95       	com	r24
    4840:	70 95       	com	r23
    4842:	61 95       	neg	r22
    4844:	7f 4f       	sbci	r23, 0xFF	; 255
    4846:	8f 4f       	sbci	r24, 0xFF	; 255
    4848:	9f 4f       	sbci	r25, 0xFF	; 255
    484a:	08 95       	ret

0000484c <__floatunsisf>:
    484c:	e8 94       	clt
    484e:	09 c0       	rjmp	.+18     	; 0x4862 <__floatsisf+0x12>

00004850 <__floatsisf>:
    4850:	97 fb       	bst	r25, 7
    4852:	3e f4       	brtc	.+14     	; 0x4862 <__floatsisf+0x12>
    4854:	90 95       	com	r25
    4856:	80 95       	com	r24
    4858:	70 95       	com	r23
    485a:	61 95       	neg	r22
    485c:	7f 4f       	sbci	r23, 0xFF	; 255
    485e:	8f 4f       	sbci	r24, 0xFF	; 255
    4860:	9f 4f       	sbci	r25, 0xFF	; 255
    4862:	99 23       	and	r25, r25
    4864:	a9 f0       	breq	.+42     	; 0x4890 <__floatsisf+0x40>
    4866:	f9 2f       	mov	r31, r25
    4868:	96 e9       	ldi	r25, 0x96	; 150
    486a:	bb 27       	eor	r27, r27
    486c:	93 95       	inc	r25
    486e:	f6 95       	lsr	r31
    4870:	87 95       	ror	r24
    4872:	77 95       	ror	r23
    4874:	67 95       	ror	r22
    4876:	b7 95       	ror	r27
    4878:	f1 11       	cpse	r31, r1
    487a:	f8 cf       	rjmp	.-16     	; 0x486c <__floatsisf+0x1c>
    487c:	fa f4       	brpl	.+62     	; 0x48bc <__floatsisf+0x6c>
    487e:	bb 0f       	add	r27, r27
    4880:	11 f4       	brne	.+4      	; 0x4886 <__floatsisf+0x36>
    4882:	60 ff       	sbrs	r22, 0
    4884:	1b c0       	rjmp	.+54     	; 0x48bc <__floatsisf+0x6c>
    4886:	6f 5f       	subi	r22, 0xFF	; 255
    4888:	7f 4f       	sbci	r23, 0xFF	; 255
    488a:	8f 4f       	sbci	r24, 0xFF	; 255
    488c:	9f 4f       	sbci	r25, 0xFF	; 255
    488e:	16 c0       	rjmp	.+44     	; 0x48bc <__floatsisf+0x6c>
    4890:	88 23       	and	r24, r24
    4892:	11 f0       	breq	.+4      	; 0x4898 <__floatsisf+0x48>
    4894:	96 e9       	ldi	r25, 0x96	; 150
    4896:	11 c0       	rjmp	.+34     	; 0x48ba <__floatsisf+0x6a>
    4898:	77 23       	and	r23, r23
    489a:	21 f0       	breq	.+8      	; 0x48a4 <__floatsisf+0x54>
    489c:	9e e8       	ldi	r25, 0x8E	; 142
    489e:	87 2f       	mov	r24, r23
    48a0:	76 2f       	mov	r23, r22
    48a2:	05 c0       	rjmp	.+10     	; 0x48ae <__floatsisf+0x5e>
    48a4:	66 23       	and	r22, r22
    48a6:	71 f0       	breq	.+28     	; 0x48c4 <__floatsisf+0x74>
    48a8:	96 e8       	ldi	r25, 0x86	; 134
    48aa:	86 2f       	mov	r24, r22
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	60 e0       	ldi	r22, 0x00	; 0
    48b0:	2a f0       	brmi	.+10     	; 0x48bc <__floatsisf+0x6c>
    48b2:	9a 95       	dec	r25
    48b4:	66 0f       	add	r22, r22
    48b6:	77 1f       	adc	r23, r23
    48b8:	88 1f       	adc	r24, r24
    48ba:	da f7       	brpl	.-10     	; 0x48b2 <__floatsisf+0x62>
    48bc:	88 0f       	add	r24, r24
    48be:	96 95       	lsr	r25
    48c0:	87 95       	ror	r24
    48c2:	97 f9       	bld	r25, 7
    48c4:	08 95       	ret

000048c6 <__fp_split3>:
    48c6:	57 fd       	sbrc	r21, 7
    48c8:	90 58       	subi	r25, 0x80	; 128
    48ca:	44 0f       	add	r20, r20
    48cc:	55 1f       	adc	r21, r21
    48ce:	59 f0       	breq	.+22     	; 0x48e6 <__fp_splitA+0x10>
    48d0:	5f 3f       	cpi	r21, 0xFF	; 255
    48d2:	71 f0       	breq	.+28     	; 0x48f0 <__fp_splitA+0x1a>
    48d4:	47 95       	ror	r20

000048d6 <__fp_splitA>:
    48d6:	88 0f       	add	r24, r24
    48d8:	97 fb       	bst	r25, 7
    48da:	99 1f       	adc	r25, r25
    48dc:	61 f0       	breq	.+24     	; 0x48f6 <__fp_splitA+0x20>
    48de:	9f 3f       	cpi	r25, 0xFF	; 255
    48e0:	79 f0       	breq	.+30     	; 0x4900 <__fp_splitA+0x2a>
    48e2:	87 95       	ror	r24
    48e4:	08 95       	ret
    48e6:	12 16       	cp	r1, r18
    48e8:	13 06       	cpc	r1, r19
    48ea:	14 06       	cpc	r1, r20
    48ec:	55 1f       	adc	r21, r21
    48ee:	f2 cf       	rjmp	.-28     	; 0x48d4 <__fp_split3+0xe>
    48f0:	46 95       	lsr	r20
    48f2:	f1 df       	rcall	.-30     	; 0x48d6 <__fp_splitA>
    48f4:	08 c0       	rjmp	.+16     	; 0x4906 <__fp_splitA+0x30>
    48f6:	16 16       	cp	r1, r22
    48f8:	17 06       	cpc	r1, r23
    48fa:	18 06       	cpc	r1, r24
    48fc:	99 1f       	adc	r25, r25
    48fe:	f1 cf       	rjmp	.-30     	; 0x48e2 <__fp_splitA+0xc>
    4900:	86 95       	lsr	r24
    4902:	71 05       	cpc	r23, r1
    4904:	61 05       	cpc	r22, r1
    4906:	08 94       	sec
    4908:	08 95       	ret

0000490a <__fp_zero>:
    490a:	e8 94       	clt

0000490c <__fp_szero>:
    490c:	bb 27       	eor	r27, r27
    490e:	66 27       	eor	r22, r22
    4910:	77 27       	eor	r23, r23
    4912:	cb 01       	movw	r24, r22
    4914:	97 f9       	bld	r25, 7
    4916:	08 95       	ret

00004918 <__mulsf3>:
    4918:	0b d0       	rcall	.+22     	; 0x4930 <__mulsf3x>
    491a:	78 c0       	rjmp	.+240    	; 0x4a0c <__fp_round>
    491c:	69 d0       	rcall	.+210    	; 0x49f0 <__fp_pscA>
    491e:	28 f0       	brcs	.+10     	; 0x492a <__mulsf3+0x12>
    4920:	6e d0       	rcall	.+220    	; 0x49fe <__fp_pscB>
    4922:	18 f0       	brcs	.+6      	; 0x492a <__mulsf3+0x12>
    4924:	95 23       	and	r25, r21
    4926:	09 f0       	breq	.+2      	; 0x492a <__mulsf3+0x12>
    4928:	5a c0       	rjmp	.+180    	; 0x49de <__fp_inf>
    492a:	5f c0       	rjmp	.+190    	; 0x49ea <__fp_nan>
    492c:	11 24       	eor	r1, r1
    492e:	ee cf       	rjmp	.-36     	; 0x490c <__fp_szero>

00004930 <__mulsf3x>:
    4930:	ca df       	rcall	.-108    	; 0x48c6 <__fp_split3>
    4932:	a0 f3       	brcs	.-24     	; 0x491c <__mulsf3+0x4>

00004934 <__mulsf3_pse>:
    4934:	95 9f       	mul	r25, r21
    4936:	d1 f3       	breq	.-12     	; 0x492c <__mulsf3+0x14>
    4938:	95 0f       	add	r25, r21
    493a:	50 e0       	ldi	r21, 0x00	; 0
    493c:	55 1f       	adc	r21, r21
    493e:	62 9f       	mul	r22, r18
    4940:	f0 01       	movw	r30, r0
    4942:	72 9f       	mul	r23, r18
    4944:	bb 27       	eor	r27, r27
    4946:	f0 0d       	add	r31, r0
    4948:	b1 1d       	adc	r27, r1
    494a:	63 9f       	mul	r22, r19
    494c:	aa 27       	eor	r26, r26
    494e:	f0 0d       	add	r31, r0
    4950:	b1 1d       	adc	r27, r1
    4952:	aa 1f       	adc	r26, r26
    4954:	64 9f       	mul	r22, r20
    4956:	66 27       	eor	r22, r22
    4958:	b0 0d       	add	r27, r0
    495a:	a1 1d       	adc	r26, r1
    495c:	66 1f       	adc	r22, r22
    495e:	82 9f       	mul	r24, r18
    4960:	22 27       	eor	r18, r18
    4962:	b0 0d       	add	r27, r0
    4964:	a1 1d       	adc	r26, r1
    4966:	62 1f       	adc	r22, r18
    4968:	73 9f       	mul	r23, r19
    496a:	b0 0d       	add	r27, r0
    496c:	a1 1d       	adc	r26, r1
    496e:	62 1f       	adc	r22, r18
    4970:	83 9f       	mul	r24, r19
    4972:	a0 0d       	add	r26, r0
    4974:	61 1d       	adc	r22, r1
    4976:	22 1f       	adc	r18, r18
    4978:	74 9f       	mul	r23, r20
    497a:	33 27       	eor	r19, r19
    497c:	a0 0d       	add	r26, r0
    497e:	61 1d       	adc	r22, r1
    4980:	23 1f       	adc	r18, r19
    4982:	84 9f       	mul	r24, r20
    4984:	60 0d       	add	r22, r0
    4986:	21 1d       	adc	r18, r1
    4988:	82 2f       	mov	r24, r18
    498a:	76 2f       	mov	r23, r22
    498c:	6a 2f       	mov	r22, r26
    498e:	11 24       	eor	r1, r1
    4990:	9f 57       	subi	r25, 0x7F	; 127
    4992:	50 40       	sbci	r21, 0x00	; 0
    4994:	8a f0       	brmi	.+34     	; 0x49b8 <__mulsf3_pse+0x84>
    4996:	e1 f0       	breq	.+56     	; 0x49d0 <__mulsf3_pse+0x9c>
    4998:	88 23       	and	r24, r24
    499a:	4a f0       	brmi	.+18     	; 0x49ae <__mulsf3_pse+0x7a>
    499c:	ee 0f       	add	r30, r30
    499e:	ff 1f       	adc	r31, r31
    49a0:	bb 1f       	adc	r27, r27
    49a2:	66 1f       	adc	r22, r22
    49a4:	77 1f       	adc	r23, r23
    49a6:	88 1f       	adc	r24, r24
    49a8:	91 50       	subi	r25, 0x01	; 1
    49aa:	50 40       	sbci	r21, 0x00	; 0
    49ac:	a9 f7       	brne	.-22     	; 0x4998 <__mulsf3_pse+0x64>
    49ae:	9e 3f       	cpi	r25, 0xFE	; 254
    49b0:	51 05       	cpc	r21, r1
    49b2:	70 f0       	brcs	.+28     	; 0x49d0 <__mulsf3_pse+0x9c>
    49b4:	14 c0       	rjmp	.+40     	; 0x49de <__fp_inf>
    49b6:	aa cf       	rjmp	.-172    	; 0x490c <__fp_szero>
    49b8:	5f 3f       	cpi	r21, 0xFF	; 255
    49ba:	ec f3       	brlt	.-6      	; 0x49b6 <__mulsf3_pse+0x82>
    49bc:	98 3e       	cpi	r25, 0xE8	; 232
    49be:	dc f3       	brlt	.-10     	; 0x49b6 <__mulsf3_pse+0x82>
    49c0:	86 95       	lsr	r24
    49c2:	77 95       	ror	r23
    49c4:	67 95       	ror	r22
    49c6:	b7 95       	ror	r27
    49c8:	f7 95       	ror	r31
    49ca:	e7 95       	ror	r30
    49cc:	9f 5f       	subi	r25, 0xFF	; 255
    49ce:	c1 f7       	brne	.-16     	; 0x49c0 <__mulsf3_pse+0x8c>
    49d0:	fe 2b       	or	r31, r30
    49d2:	88 0f       	add	r24, r24
    49d4:	91 1d       	adc	r25, r1
    49d6:	96 95       	lsr	r25
    49d8:	87 95       	ror	r24
    49da:	97 f9       	bld	r25, 7
    49dc:	08 95       	ret

000049de <__fp_inf>:
    49de:	97 f9       	bld	r25, 7
    49e0:	9f 67       	ori	r25, 0x7F	; 127
    49e2:	80 e8       	ldi	r24, 0x80	; 128
    49e4:	70 e0       	ldi	r23, 0x00	; 0
    49e6:	60 e0       	ldi	r22, 0x00	; 0
    49e8:	08 95       	ret

000049ea <__fp_nan>:
    49ea:	9f ef       	ldi	r25, 0xFF	; 255
    49ec:	80 ec       	ldi	r24, 0xC0	; 192
    49ee:	08 95       	ret

000049f0 <__fp_pscA>:
    49f0:	00 24       	eor	r0, r0
    49f2:	0a 94       	dec	r0
    49f4:	16 16       	cp	r1, r22
    49f6:	17 06       	cpc	r1, r23
    49f8:	18 06       	cpc	r1, r24
    49fa:	09 06       	cpc	r0, r25
    49fc:	08 95       	ret

000049fe <__fp_pscB>:
    49fe:	00 24       	eor	r0, r0
    4a00:	0a 94       	dec	r0
    4a02:	12 16       	cp	r1, r18
    4a04:	13 06       	cpc	r1, r19
    4a06:	14 06       	cpc	r1, r20
    4a08:	05 06       	cpc	r0, r21
    4a0a:	08 95       	ret

00004a0c <__fp_round>:
    4a0c:	09 2e       	mov	r0, r25
    4a0e:	03 94       	inc	r0
    4a10:	00 0c       	add	r0, r0
    4a12:	11 f4       	brne	.+4      	; 0x4a18 <__fp_round+0xc>
    4a14:	88 23       	and	r24, r24
    4a16:	52 f0       	brmi	.+20     	; 0x4a2c <__fp_round+0x20>
    4a18:	bb 0f       	add	r27, r27
    4a1a:	40 f4       	brcc	.+16     	; 0x4a2c <__fp_round+0x20>
    4a1c:	bf 2b       	or	r27, r31
    4a1e:	11 f4       	brne	.+4      	; 0x4a24 <__fp_round+0x18>
    4a20:	60 ff       	sbrs	r22, 0
    4a22:	04 c0       	rjmp	.+8      	; 0x4a2c <__fp_round+0x20>
    4a24:	6f 5f       	subi	r22, 0xFF	; 255
    4a26:	7f 4f       	sbci	r23, 0xFF	; 255
    4a28:	8f 4f       	sbci	r24, 0xFF	; 255
    4a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2c:	08 95       	ret

00004a2e <__udivmodqi4>:
    4a2e:	99 1b       	sub	r25, r25
    4a30:	79 e0       	ldi	r23, 0x09	; 9
    4a32:	04 c0       	rjmp	.+8      	; 0x4a3c <__udivmodqi4_ep>

00004a34 <__udivmodqi4_loop>:
    4a34:	99 1f       	adc	r25, r25
    4a36:	96 17       	cp	r25, r22
    4a38:	08 f0       	brcs	.+2      	; 0x4a3c <__udivmodqi4_ep>
    4a3a:	96 1b       	sub	r25, r22

00004a3c <__udivmodqi4_ep>:
    4a3c:	88 1f       	adc	r24, r24
    4a3e:	7a 95       	dec	r23
    4a40:	c9 f7       	brne	.-14     	; 0x4a34 <__udivmodqi4_loop>
    4a42:	80 95       	com	r24
    4a44:	08 95       	ret

00004a46 <__divmodhi4>:
    4a46:	97 fb       	bst	r25, 7
    4a48:	07 2e       	mov	r0, r23
    4a4a:	16 f4       	brtc	.+4      	; 0x4a50 <__divmodhi4+0xa>
    4a4c:	00 94       	com	r0
    4a4e:	07 d0       	rcall	.+14     	; 0x4a5e <__divmodhi4_neg1>
    4a50:	77 fd       	sbrc	r23, 7
    4a52:	09 d0       	rcall	.+18     	; 0x4a66 <__divmodhi4_neg2>
    4a54:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__udivmodhi4>
    4a58:	07 fc       	sbrc	r0, 7
    4a5a:	05 d0       	rcall	.+10     	; 0x4a66 <__divmodhi4_neg2>
    4a5c:	3e f4       	brtc	.+14     	; 0x4a6c <__divmodhi4_exit>

00004a5e <__divmodhi4_neg1>:
    4a5e:	90 95       	com	r25
    4a60:	81 95       	neg	r24
    4a62:	9f 4f       	sbci	r25, 0xFF	; 255
    4a64:	08 95       	ret

00004a66 <__divmodhi4_neg2>:
    4a66:	70 95       	com	r23
    4a68:	61 95       	neg	r22
    4a6a:	7f 4f       	sbci	r23, 0xFF	; 255

00004a6c <__divmodhi4_exit>:
    4a6c:	08 95       	ret

00004a6e <__tablejump2__>:
    4a6e:	ee 0f       	add	r30, r30
    4a70:	ff 1f       	adc	r31, r31

00004a72 <__tablejump__>:
    4a72:	05 90       	lpm	r0, Z+
    4a74:	f4 91       	lpm	r31, Z
    4a76:	e0 2d       	mov	r30, r0
    4a78:	09 94       	ijmp

00004a7a <__udivmodhi4>:
    4a7a:	aa 1b       	sub	r26, r26
    4a7c:	bb 1b       	sub	r27, r27
    4a7e:	51 e1       	ldi	r21, 0x11	; 17
    4a80:	07 c0       	rjmp	.+14     	; 0x4a90 <__udivmodhi4_ep>

00004a82 <__udivmodhi4_loop>:
    4a82:	aa 1f       	adc	r26, r26
    4a84:	bb 1f       	adc	r27, r27
    4a86:	a6 17       	cp	r26, r22
    4a88:	b7 07       	cpc	r27, r23
    4a8a:	10 f0       	brcs	.+4      	; 0x4a90 <__udivmodhi4_ep>
    4a8c:	a6 1b       	sub	r26, r22
    4a8e:	b7 0b       	sbc	r27, r23

00004a90 <__udivmodhi4_ep>:
    4a90:	88 1f       	adc	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	5a 95       	dec	r21
    4a96:	a9 f7       	brne	.-22     	; 0x4a82 <__udivmodhi4_loop>
    4a98:	80 95       	com	r24
    4a9a:	90 95       	com	r25
    4a9c:	bc 01       	movw	r22, r24
    4a9e:	cd 01       	movw	r24, r26
    4aa0:	08 95       	ret

00004aa2 <_exit>:
    4aa2:	f8 94       	cli

00004aa4 <__stop_program>:
    4aa4:	ff cf       	rjmp	.-2      	; 0x4aa4 <__stop_program>
