
hhkb_unimap.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000496e  00004a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000496e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d2  00800138  00800138  00004c5a  2**0
                  ALLOC
  3 .noinit       00000004  0080020a  0080020a  00004c5a  2**0
                  ALLOC
  4 .keymap       00000200  00006800  00006800  00004a5a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .stab         000008b8  00000000  00000000  00004c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      000000a0  00000000  00000000  00005514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  000055b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000990  00000000  00000000  000055c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000df9f  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036de  00000000  00000000  00013ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000517b  00000000  00000000  000175d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001788  00000000  00000000  0001c750  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041b0  00000000  00000000  0001ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000719d  00000000  00000000  00022088  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  00029225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
       4:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
       8:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      14:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      18:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      1c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      20:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      24:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      28:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_10>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
      2c:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__vector_11>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      30:	0c 94 a8 1b 	jmp	0x3750	; 0x3750 <__vector_12>
      34:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
      38:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      3c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      40:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      44:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      48:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      4c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      50:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      54:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__vector_21>
      58:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      5c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      60:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      64:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      68:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      6c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      70:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      74:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      78:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      7c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      80:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      84:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      88:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      8c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      90:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      94:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      98:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      9c:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      a0:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      a4:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      a8:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__bad_interrupt>
      ac:	92 0d       	add	r25, r2
      ae:	b4 0d       	add	r27, r4
      b0:	9f 0e       	add	r9, r31
      b2:	b4 0d       	add	r27, r4
      b4:	9f 0e       	add	r9, r31
      b6:	f6 0d       	add	r31, r6
      b8:	19 0e       	add	r1, r25
      ba:	9f 0e       	add	r9, r31
      bc:	6e 0e       	add	r6, r30
      be:	81 0e       	add	r8, r17
      c0:	d8 11       	cpse	r29, r8
      c2:	d8 11       	cpse	r29, r8
      c4:	06 12       	cpse	r0, r22
      c6:	06 12       	cpse	r0, r22
      c8:	62 12       	cpse	r6, r18
      ca:	9e 12       	cpse	r9, r30
      cc:	8f 14       	cp	r8, r15
      ce:	8f 14       	cp	r8, r15
      d0:	b6 12       	cpse	r11, r22
      d2:	8f 14       	cp	r8, r15
      d4:	ad 13       	cpse	r26, r29
      d6:	ad 13       	cpse	r26, r29
      d8:	69 14       	cp	r6, r9
      da:	8f 14       	cp	r8, r15
      dc:	8f 14       	cp	r8, r15
      de:	7d 14       	cp	r7, r13

000000e0 <unimap_trans>:
      e0:	1f 14 1a 16 04 1d 1b 06 20 21 15 08 07 09 19 05     ........ !......
      f0:	22 23 1c 17 0a 0b 11 80 1e 35 2b 39 79 7a 7b 2c     "#.......5+9yz{,
     100:	24 25 18 0c 0e 0d 10 80 74 2a 31 28 7c 7d 7e 7f     $%......t*1(|}~.
     110:	26 27 12 13 33 0f 36 80 2d 2e 30 2f 34 38 37 80     &'..3.6.-.0/487.

00000120 <__c.4790>:
     120:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     130:	00                                                  .

00000131 <__c.4788>:
     131:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     141:	00                                                  .

00000142 <__c.4783>:
     142:	0d 0a 69 6e 69 74 0a 00                             ..init..

0000014a <__c.4677>:
     14a:	5b 44 5d 00                                         [D].

0000014e <__c.4672>:
     14e:	5b 43 5d 00                                         [C].

00000152 <ProductString>:
     152:	12 03 48 00 48 00 4b 00 42 00 20 00 6d 00 6f 00     ..H.H.K.B. .m.o.
     162:	64 00 00 00                                         d...

00000166 <ManufacturerString>:
     166:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

00000176 <LanguageString>:
     176:	04 03 09 04                                         ....

0000017a <ConfigurationDescriptor>:
     17a:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     18a:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     19a:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1aa:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     1ba:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     1ca:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     1da:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     1ea:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     1fa:	01 00 01 22 39 00 07 05 85 03 20 00 01              ..."9..... ..

00000207 <DeviceDescriptor>:
     207:	12 01 10 01 00 00 00 08 ed fe fe ca 04 01 01 02     ................
     217:	00 01                                               ..

00000219 <NKROReport>:
     219:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     229:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     239:	91 02 95 01 75 03 91 01 05 07 19 00 29 f7 15 00     ....u.......)...
     249:	25 01 95 f8 75 01 81 02 c0                          %...u....

00000252 <ConsoleReport>:
     252:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     262:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     272:	02 c0                                               ..

00000274 <ExtrakeyReport>:
     274:	05 01 09 80 a1 01 85 02 16 81 00 26 b7 00 1a 81     ...........&....
     284:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     294:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     2a4:	10 95 01 81 00 c0                                   ......

000002aa <MouseReport>:
     2aa:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     2ba:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     2ca:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     2da:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     2ea:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000002f7 <KeyboardReport>:
     2f7:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     307:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     317:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     327:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000337 <__c.4409>:
     337:	63 6f 6e 73 75 6d 65 72 3a 20 25 30 34 58 0a 00     consumer: %04X..

00000347 <__c.4404>:
     347:	73 79 73 74 65 6d 3a 20 25 30 34 58 0a 00           system: %04X..

00000355 <__c.4396>:
     355:	0a 00                                               ..

00000357 <__c.4391>:
     357:	25 30 32 58 20 00                                   %02X .

0000035d <__c.4388>:
     35d:	6b 65 79 62 6f 61 72 64 3a 20 00                    keyboard: .

00000368 <__c.4736>:
     368:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000373 <__c.1714>:
     373:	25 30 32 58 3a 20 25 30 38 62 25 73 0a 00           %02X: %08b%s..

00000381 <__c.1711>:
     381:	72 2f 63 20 30 31 32 33 34 35 36 37 0a 00           r/c 01234567..

0000038f <__c.4539>:
     38f:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     39f:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

000003ad <__c.4534>:
     3ad:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     3bd:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000003cb <__c.4447>:
     3cb:	4f 6e 65 73 68 6f 74 3a 20 74 69 6d 65 6f 75 74     Oneshot: timeout
     3db:	0a 00                                               ..

000003dd <__c.4468>:
     3dd:	29 0a 00                                            )..

000003e0 <__c.4466>:
     3e0:	25 75 00                                            %u.

000003e3 <__c.4464>:
     3e3:	2f 00                                               /.

000003e5 <__c.4462>:
     3e5:	25 75 00                                            %u.

000003e8 <__c.4460>:
     3e8:	5d 28 00                                            ](.

000003eb <__c.4458>:
     3eb:	25 64 00                                            %d.

000003ee <__c.4456>:
     3ee:	20 00                                                .

000003f0 <__c.4454>:
     3f0:	25 64 00                                            %d.

000003f3 <__c.4452>:
     3f3:	20 00                                                .

000003f5 <__c.4450>:
     3f5:	25 64 00                                            %d.

000003f8 <__c.4448>:
     3f8:	20 00                                                .

000003fa <__c.4446>:
     3fa:	25 64 00                                            %d.

000003fd <__c.4444>:
     3fd:	7c 00                                               |.

000003ff <__c.4442>:
     3ff:	25 30 32 58 00                                      %02X.

00000404 <__c.4440>:
     404:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     414:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     424:	20 5b 00                                             [.

00000427 <__c.4963>:
     427:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     437:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000442 <__c.4960>:
     442:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     452:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000045b <__c.4957>:
     45b:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     46b:	20 25 64 0a 00                                       %d..

00000470 <__c.4954>:
     470:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     480:	64 0a 00                                            d..

00000483 <__c.4951>:
     483:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     493:	0a 00                                               ..

00000495 <__c.4947>:
     495:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004a4 <__c.4940>:
     4a4:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4b4:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004bf <__c.4937>:
     4bf:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4cf:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004d8 <__c.4934>:
     4d8:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4e8:	20 25 64 0a 00                                       %d..

000004ed <__c.4931>:
     4ed:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4fd:	64 0a 00                                            d..

00000500 <__c.4928>:
     500:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     510:	0a 00                                               ..

00000512 <__c.4924>:
     512:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000521 <__c.4917>:
     521:	0a 00                                               ..

00000523 <__c.4915>:
     523:	25 75 00                                            %u.

00000526 <__c.4913>:
     526:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     536:	5f 6d 61 78 3a 20 00                                _max: .

0000053d <__c.4911>:
     53d:	0a 00                                               ..

0000053f <__c.4909>:
     53f:	25 75 00                                            %u.

00000542 <__c.4907>:
     542:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     552:	65 64 3a 20 00                                      ed: .

00000557 <__c.4905>:
     557:	0a 00                                               ..

00000559 <__c.4903>:
     559:	25 75 00                                            %u.

0000055c <__c.4901>:
     55c:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     56c:	00                                                  .

0000056d <__c.4899>:
     56d:	0a 00                                               ..

0000056f <__c.4897>:
     56f:	25 75 00                                            %u.

00000572 <__c.4895>:
     572:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000581 <__c.4893>:
     581:	0a 00                                               ..

00000583 <__c.4891>:
     583:	25 75 00                                            %u.

00000586 <__c.4889>:
     586:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     596:	20 00                                                .

00000598 <__c.4887>:
     598:	0a 00                                               ..

0000059a <__c.4885>:
     59a:	25 75 00                                            %u.

0000059d <__c.4883>:
     59d:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     5ad:	20 00                                                .

000005af <__c.4881>:
     5af:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005bd <__c.5001>:
     5bd:	4d 3e 00                                            M>.

000005c0 <__c.4999>:
     5c0:	4d 25 64 3e 20 00                                   M%d> .

000005c6 <__c.4997>:
     5c6:	3f 00                                               ?.

000005c8 <__c.4994>:
     5c8:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005d5 <__c.4980>:
     5d5:	43 3e 20 00                                         C> .

000005d9 <__c.4970>:
     5d9:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     5e9:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     5f9:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     609:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     619:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000627 <__c.4968>:
     627:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     637:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     647:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     657:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     667:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     677:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     687:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     697:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     6a7:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6b7:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6c7:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6d7:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     6e7:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     6f7:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     707:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     717:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000722 <__c.4873>:
     722:	3f 00                                               ?.

00000724 <__c.4870>:
     724:	4d 3e 20 00                                         M> .

00000728 <__c.4875>:
     728:	43 3e 20 00                                         C> .

0000072c <__c.5019>:
     72c:	4c 25 64 0a 00                                      L%d..

00000731 <__c.4859>:
     731:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     741:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     751:	73 65 6b 65 79 0a 00                                sekey..

00000758 <__c.4782>:
     758:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     768:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     778:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     788:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     798:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     7a8:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7b8:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7c8:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7d8:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     7e8:	72 0a 6e 3a 09 4e 4b 52 4f 0a 00                    r.n:.NKRO..

000007f3 <__c.4854>:
     7f3:	3f 00                                               ?.

000007f5 <__c.4845>:
     7f5:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000800 <__c.4843>:
     800:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

0000080a <__c.4840>:
     80a:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     81a:	25 30 34 6c 58 0a 00                                %04lX..

00000821 <__c.4838>:
     821:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     831:	58 0a 00                                            X..

00000834 <__c.4836>:
     834:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     844:	58 0a 00                                            X..

00000847 <__c.4834>:
     847:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     857:	6c 3a 20 25 58 0a 00                                l: %X..

0000085e <__c.4832>:
     85e:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     86e:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000878 <__c.4830>:
     878:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000886 <__c.4827>:
     886:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     896:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     8a6:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

000008b4 <__c.4825>:
     8b4:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     8c4:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     8d4:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     8e4:	4e 4b 52 4f 20 4b 45 59 4d 41 50 5f 53 45 43 54     NKRO KEYMAP_SECT
     8f4:	49 4f 4e 20 34 30 39 36 0a 00                       ION 4096..

000008fe <__c.4823>:
     8fe:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     90e:	31 31 3a 31 33 3a 31 32 20 4a 75 6c 20 31 34 20     11:13:12 Jul 14 
     91e:	32 30 31 37 29 0a 00                                2017)..

00000925 <__c.4821>:
     925:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     935:	6b 2e 29 20 50 49 44 3a 20 30 78 43 41 46 45 28     k.) PID: 0xCAFE(
     945:	48 48 4b 42 20 6d 6f 64 29 20 56 45 52 3a 20 30     HHKB mod) VER: 0
     955:	78 30 31 30 34 0a 00                                x0104..

0000095c <__c.4819>:
     95c:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     96c:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     97c:	6f 72 20 48 48 4b 42 20 6d 6f 64 0a 00              or HHKB mod..

00000989 <__c.4817>:
     989:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000998 <__c.4814>:
     998:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000009a5 <__c.4812>:
     9a5:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000009b1 <__c.4809>:
     9b1:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000009c1 <__c.4807>:
     9c1:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000009d0 <__c.4804>:
     9d0:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000009de <__c.4802>:
     9de:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

000009eb <__c.4799>:
     9eb:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

000009f7 <__c.4797>:
     9f7:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000a04 <__c.4794>:
     a04:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     a14:	00                                                  .

00000a15 <__c.4791>:
     a15:	43 3e 20 00 00                                      C> ..

00000a1a <__ctors_end>:
     a1a:	11 24       	eor	r1, r1
     a1c:	1f be       	out	0x3f, r1	; 63
     a1e:	cf ef       	ldi	r28, 0xFF	; 255
     a20:	da e0       	ldi	r29, 0x0A	; 10
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	cd bf       	out	0x3d, r28	; 61

00000a26 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     a26:	04 b6       	in	r0, 0x34	; 52
     a28:	03 fe       	sbrs	r0, 3
     a2a:	24 c0       	rjmp	.+72     	; 0xa74 <__do_copy_data>
     a2c:	80 91 0a 02 	lds	r24, 0x020A
     a30:	90 91 0b 02 	lds	r25, 0x020B
     a34:	a0 91 0c 02 	lds	r26, 0x020C
     a38:	b0 91 0d 02 	lds	r27, 0x020D
     a3c:	87 30       	cpi	r24, 0x07	; 7
     a3e:	90 4b       	sbci	r25, 0xB0	; 176
     a40:	a7 40       	sbci	r26, 0x07	; 7
     a42:	b0 4b       	sbci	r27, 0xB0	; 176
     a44:	b9 f4       	brne	.+46     	; 0xa74 <__do_copy_data>
        reset_key = 0;
     a46:	10 92 0a 02 	sts	0x020A, r1
     a4a:	10 92 0b 02 	sts	0x020B, r1
     a4e:	10 92 0c 02 	sts	0x020C, r1
     a52:	10 92 0d 02 	sts	0x020D, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     a56:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     a58:	84 b7       	in	r24, 0x34	; 52
     a5a:	87 7f       	andi	r24, 0xF7	; 247
     a5c:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     a5e:	88 e1       	ldi	r24, 0x18	; 24
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	80 93 60 00 	sts	0x0060, r24
     a68:	10 92 60 00 	sts	0x0060, r1
     a6c:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     a6e:	e0 e0       	ldi	r30, 0x00	; 0
     a70:	f8 e3       	ldi	r31, 0x38	; 56
     a72:	09 95       	icall

00000a74 <__do_copy_data>:
     a74:	11 e0       	ldi	r17, 0x01	; 1
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	b1 e0       	ldi	r27, 0x01	; 1
     a7a:	ee e6       	ldi	r30, 0x6E	; 110
     a7c:	f9 e4       	ldi	r31, 0x49	; 73
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <__do_copy_data+0x10>
     a80:	05 90       	lpm	r0, Z+
     a82:	0d 92       	st	X+, r0
     a84:	a8 33       	cpi	r26, 0x38	; 56
     a86:	b1 07       	cpc	r27, r17
     a88:	d9 f7       	brne	.-10     	; 0xa80 <__do_copy_data+0xc>

00000a8a <__do_clear_bss>:
     a8a:	22 e0       	ldi	r18, 0x02	; 2
     a8c:	a8 e3       	ldi	r26, 0x38	; 56
     a8e:	b1 e0       	ldi	r27, 0x01	; 1
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <.do_clear_bss_start>

00000a92 <.do_clear_bss_loop>:
     a92:	1d 92       	st	X+, r1

00000a94 <.do_clear_bss_start>:
     a94:	aa 30       	cpi	r26, 0x0A	; 10
     a96:	b2 07       	cpc	r27, r18
     a98:	e1 f7       	brne	.-8      	; 0xa92 <.do_clear_bss_loop>
     a9a:	0e 94 8e 09 	call	0x131c	; 0x131c <main>
     a9e:	0c 94 b5 24 	jmp	0x496a	; 0x496a <_exit>

00000aa2 <__bad_interrupt>:
     aa2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000aa6 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     aa6:	ff 93       	push	r31
	push	ZL
     aa8:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     aaa:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     aae:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     ab2:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     ab4:	09 f0       	breq	.+2      	; 0xab8 <xputc+0x12>
	icall
     ab6:	09 95       	icall
2:	pop	ZL
     ab8:	ef 91       	pop	r30
	pop	ZH
     aba:	ff 91       	pop	r31
	ret
     abc:	08 95       	ret

00000abe <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     abe:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     ac0:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     ac2:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     ac4:	11 f0       	breq	.+4      	; 0xaca <xputs+0xc>
	rcall	xputc
     ac6:	ef df       	rcall	.-34     	; 0xaa6 <xputc>
	rjmp	1b
     ac8:	fb cf       	rjmp	.-10     	; 0xac0 <xputs+0x2>
2:	ret
     aca:	08 95       	ret

00000acc <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     acc:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ace:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     ad0:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     ad2:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ad4:	0c c0       	rjmp	.+24     	; 0xaee <xitoa+0x22>
	neg	r20		;
     ad6:	41 95       	neg	r20
	sbrs	r25, 7		;
     ad8:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ada:	09 c0       	rjmp	.+18     	; 0xaee <xitoa+0x22>
	ldi	r30, '-'	;
     adc:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     ade:	60 95       	com	r22
	com	r23		;
     ae0:	70 95       	com	r23
	com	r24		;
     ae2:	80 95       	com	r24
	com	r25		;
     ae4:	90 95       	com	r25
	adc	r22, r1		;
     ae6:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     ae8:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     aea:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     aec:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     aee:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <xitoa+0x2a>
	neg	r18		;
     af2:	21 95       	neg	r18
	ldi	r19, '0'	;/
     af4:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     af6:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     af8:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     afa:	66 0f       	add	r22, r22
	rol	r23		;
     afc:	77 1f       	adc	r23, r23
	rol	r24		;
     afe:	88 1f       	adc	r24, r24
	rol	r25		;
     b00:	99 1f       	adc	r25, r25
	rol	r26		;
     b02:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     b04:	a4 17       	cp	r26, r20
	brcs	3f		;
     b06:	10 f0       	brcs	.+4      	; 0xb0c <__stack+0xd>
	sub	r26, r20	;
     b08:	a4 1b       	sub	r26, r20
	inc	r22		;
     b0a:	63 95       	inc	r22
3:	dec	r21		;
     b0c:	5a 95       	dec	r21
	brne	2b		;/
     b0e:	a9 f7       	brne	.-22     	; 0xafa <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     b10:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     b12:	08 f0       	brcs	.+2      	; 0xb16 <__stack+0x17>
	subi	r26, -7		;
     b14:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     b16:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     b18:	af 93       	push	r26
	inc	r31		;/
     b1a:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     b1c:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     b1e:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     b20:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     b22:	91 05       	cpc	r25, r1
	brne	1b		;/
     b24:	41 f7       	brne	.-48     	; 0xaf6 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     b26:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     b28:	11 f4       	brne	.+4      	; 0xb2e <__stack+0x2f>
	push	r30		;
     b2a:	ef 93       	push	r30
	inc	r31		;/
     b2c:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     b2e:	f2 17       	cp	r31, r18
	brcc	6f		;
     b30:	18 f4       	brcc	.+6      	; 0xb38 <__stack+0x39>
	push	r19		;
     b32:	3f 93       	push	r19
	inc	r31		;
     b34:	f3 95       	inc	r31
	rjmp	5b		;/
     b36:	fb cf       	rjmp	.-10     	; 0xb2e <__stack+0x2f>

6:	pop	r24		;Flush stacked digits and exit
     b38:	8f 91       	pop	r24
	rcall	xputc		;
     b3a:	b5 df       	rcall	.-150    	; 0xaa6 <xputc>
	dec	r31		;
     b3c:	fa 95       	dec	r31
	brne	6b		;/
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <__stack+0x39>

	ret
     b40:	08 95       	ret

00000b42 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     b42:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     b44:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     b46:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     b48:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     b4a:	21 f0       	breq	.+8      	; 0xb54 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     b4c:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     b4e:	19 f0       	breq	.+6      	; 0xb56 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     b50:	aa df       	rcall	.-172    	; 0xaa6 <xputc>
	rjmp	0b		;/
     b52:	f9 cf       	rjmp	.-14     	; 0xb46 <xvprintf+0x4>
90:	ret
     b54:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     b56:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     b58:	e8 94       	clt
	_LPMI	r21		;Get flags
     b5a:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     b5c:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     b5e:	c1 f3       	breq	.-16     	; 0xb50 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     b60:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     b62:	11 f4       	brne	.+4      	; 0xb68 <xvprintf+0x26>
	set			;/
     b64:	68 94       	set
22:	_LPMI	r21		;Get width
     b66:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     b68:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     b6a:	48 f4       	brcc	.+18     	; 0xb7e <xvprintf+0x3c>
	subi	r21, '0'	;
     b6c:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     b6e:	90 f3       	brcs	.-28     	; 0xb54 <xvprintf+0x12>
	lsl	r18		;
     b70:	22 0f       	add	r18, r18
	mov	r0, r18		;
     b72:	02 2e       	mov	r0, r18
	lsl	r18		;
     b74:	22 0f       	add	r18, r18
	lsl	r18		;
     b76:	22 0f       	add	r18, r18
	add	r18, r0		;
     b78:	20 0d       	add	r18, r0
	add	r18, r21	;
     b7a:	25 0f       	add	r18, r21
	rjmp	22b		;/
     b7c:	f4 cf       	rjmp	.-24     	; 0xb66 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     b7e:	0e f4       	brtc	.+2      	; 0xb82 <xvprintf+0x40>
	neg	r18		;
     b80:	21 95       	neg	r18
25:	ld	r24, Y+		;
     b82:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     b84:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     b86:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     b88:	19 f3       	breq	.-58     	; 0xb50 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     b8a:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     b8c:	29 f1       	breq	.+74     	; 0xbd8 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     b8e:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     b90:	59 f1       	breq	.+86     	; 0xbe8 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     b92:	bc 01       	movw	r22, r24
	clr	r24		;
     b94:	88 27       	eor	r24, r24
	clr	r25		;
     b96:	99 27       	eor	r25, r25
	clt			;/
     b98:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     b9a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     b9c:	21 f4       	brne	.+8      	; 0xba6 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     b9e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ba0:	99 91       	ld	r25, Y+
	set			;
     ba2:	68 94       	set
	_LPMI	r21		;/
     ba4:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     ba6:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     ba8:	39 f4       	brne	.+14     	; 0xbb8 <xvprintf+0x76>
	ldi	r20, -10	;
     baa:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     bac:	7e f0       	brts	.+30     	; 0xbcc <xvprintf+0x8a>
	sbrs	r23, 7		;
     bae:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     bb0:	0d c0       	rjmp	.+26     	; 0xbcc <xvprintf+0x8a>
	ldi	r24, -1		;
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     bb4:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     bb6:	0a c0       	rjmp	.+20     	; 0xbcc <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     bb8:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     bba:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     bbc:	39 f0       	breq	.+14     	; 0xbcc <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     bbe:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     bc0:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     bc2:	21 f0       	breq	.+8      	; 0xbcc <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     bc4:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     bc6:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     bc8:	09 f0       	breq	.+2      	; 0xbcc <xvprintf+0x8a>
	ret			;abort
     bca:	08 95       	ret
40:	push	ZH		;Output the value
     bcc:	ff 93       	push	r31
	push	ZL		;
     bce:	ef 93       	push	r30
	rcall	xitoa		;
     bd0:	7d df       	rcall	.-262    	; 0xacc <xitoa>
42:	pop	ZL		;
     bd2:	ef 91       	pop	r30
	pop	ZH		;
     bd4:	ff 91       	pop	r31
	rjmp	0b		;/
     bd6:	b7 cf       	rjmp	.-146    	; 0xb46 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     bd8:	ff 93       	push	r31
	push	ZL
     bda:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     bdc:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     bde:	81 91       	ld	r24, Z+
	cpi	r24, 0
     be0:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     be2:	b9 f3       	breq	.-18     	; 0xbd2 <xvprintf+0x90>
	rcall	xputc
     be4:	60 df       	rcall	.-320    	; 0xaa6 <xputc>
	rjmp	51b
     be6:	fb cf       	rjmp	.-10     	; 0xbde <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     be8:	ff 93       	push	r31
	push	ZL
     bea:	ef 93       	push	r30
	rcall	xputs
     bec:	68 df       	rcall	.-304    	; 0xabe <xputs>
	rjmp	42b
     bee:	f1 cf       	rjmp	.-30     	; 0xbd2 <xvprintf+0x90>

00000bf0 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     bf0:	df 93       	push	r29
	push	YL
     bf2:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     bf4:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     bf6:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     bf8:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     bfa:	a3 df       	rcall	.-186    	; 0xb42 <xvprintf>
	pop	YL
     bfc:	cf 91       	pop	r28
	pop	YH
     bfe:	df 91       	pop	r29
	ret
     c00:	08 95       	ret

00000c02 <matrix_init>:
static inline bool KEY_POWER_STATE(void) { return true; }
#endif
static inline void KEY_INIT(void)
{
    /* row,col,prev: output */
    DDRB  = 0xFF;
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	84 b9       	out	0x04, r24	; 4
    PORTB = 0x40;   // unable
     c06:	80 e4       	ldi	r24, 0x40	; 64
     c08:	85 b9       	out	0x05, r24	; 5
    /* key: input with pull-up */
    DDRD  &= ~0x80;
     c0a:	57 98       	cbi	0x0a, 7	; 10
    PORTD |=  0x80;
     c0c:	5f 9a       	sbi	0x0b, 7	; 11
    /* row extention for HHKB JP */
    DDRC  |= (1<<6|1<<7);
    PORTC |= (1<<6|1<<7);
#else
    /* input with pull up to save power */
    DDRC  &= ~(1<<6|1<<7);
     c0e:	87 b1       	in	r24, 0x07	; 7
     c10:	8f 73       	andi	r24, 0x3F	; 63
     c12:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<6|1<<7);
     c14:	88 b1       	in	r24, 0x08	; 8
     c16:	80 6c       	ori	r24, 0xC0	; 192
     c18:	88 b9       	out	0x08, r24	; 8
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     c1a:	2e 9a       	sbi	0x05, 6	; 5
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
     c1c:	2f 98       	cbi	0x05, 7	; 5
     c1e:	e2 e4       	ldi	r30, 0x42	; 66
     c20:	f1 e0       	ldi	r31, 0x01	; 1
#endif

    KEY_INIT();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix0[i] = 0x00;
     c22:	11 92       	st	Z+, r1
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	ea 34       	cpi	r30, 0x4A	; 74
     c28:	f8 07       	cpc	r31, r24
     c2a:	d9 f7       	brne	.-10     	; 0xc22 <matrix_init+0x20>
     c2c:	ea e3       	ldi	r30, 0x3A	; 58
     c2e:	f1 e0       	ldi	r31, 0x01	; 1
    for (uint8_t i=0; i < MATRIX_ROWS; i++) _matrix1[i] = 0x00;
     c30:	11 92       	st	Z+, r1
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	e2 34       	cpi	r30, 0x42	; 66
     c36:	f8 07       	cpc	r31, r24
     c38:	d9 f7       	brne	.-10     	; 0xc30 <matrix_init+0x2e>
    matrix = _matrix0;
     c3a:	82 e4       	ldi	r24, 0x42	; 66
     c3c:	91 e0       	ldi	r25, 0x01	; 1
     c3e:	90 93 4d 01 	sts	0x014D, r25
     c42:	80 93 4c 01 	sts	0x014C, r24
    matrix_prev = _matrix1;
     c46:	8a e3       	ldi	r24, 0x3A	; 58
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	90 93 4b 01 	sts	0x014B, r25
     c4e:	80 93 4a 01 	sts	0x014A, r24
     c52:	08 95       	ret

00000c54 <matrix_scan>:
}

uint8_t matrix_scan(void)
{
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
    uint8_t *tmp;

    tmp = matrix_prev;
     c5c:	80 91 4a 01 	lds	r24, 0x014A
     c60:	90 91 4b 01 	lds	r25, 0x014B
    matrix_prev = matrix;
     c64:	20 91 4c 01 	lds	r18, 0x014C
     c68:	30 91 4d 01 	lds	r19, 0x014D
     c6c:	30 93 4b 01 	sts	0x014B, r19
     c70:	20 93 4a 01 	sts	0x014A, r18
    matrix = tmp;
     c74:	90 93 4d 01 	sts	0x014D, r25
     c78:	80 93 4c 01 	sts	0x014C, r24
     c7c:	c0 e0       	ldi	r28, 0x00	; 0
     c7e:	d0 e0       	ldi	r29, 0x00	; 0
            _delay_us(5);

            if (KEY_STATE()) {
                matrix[row] &= ~(1<<col);
            } else {
                matrix[row] |= (1<<col);
     c80:	01 e0       	ldi	r16, 0x01	; 1
     c82:	10 e0       	ldi	r17, 0x00	; 0
    matrix = _matrix0;
    matrix_prev = _matrix1;
}

uint8_t matrix_scan(void)
{
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0

    KEY_POWER_OFF();
}
static inline void KEY_SELECT(uint8_t ROW, uint8_t COL)
{
    PORTB = (PORTB & 0xC0) | (((COL) & 0x07)<<3) | ((ROW) & 0x07);
     c88:	45 b1       	in	r20, 0x05	; 5
     c8a:	40 7c       	andi	r20, 0xC0	; 192
     c8c:	4c 2b       	or	r20, r28
     c8e:	9c 01       	movw	r18, r24
     c90:	53 e0       	ldi	r21, 0x03	; 3
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	5a 95       	dec	r21
     c98:	e1 f7       	brne	.-8      	; 0xc92 <matrix_scan+0x3e>
     c9a:	42 2b       	or	r20, r18
     c9c:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c9e:	ea e1       	ldi	r30, 0x1A	; 26
     ca0:	ea 95       	dec	r30
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <matrix_scan+0x4c>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <matrix_scan+0x52>
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
            KEY_SELECT(row, col);
            _delay_us(5);

            // Not sure this is needed. This just emulates HHKB controller's behaviour.
            if (matrix_prev[row] & (1<<col)) {
     ca6:	e0 91 4a 01 	lds	r30, 0x014A
     caa:	f0 91 4b 01 	lds	r31, 0x014B
     cae:	ec 0f       	add	r30, r28
     cb0:	fd 1f       	adc	r31, r29
     cb2:	20 81       	ld	r18, Z
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	08 2e       	mov	r0, r24
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <matrix_scan+0x6a>
     cba:	35 95       	asr	r19
     cbc:	27 95       	ror	r18
     cbe:	0a 94       	dec	r0
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <matrix_scan+0x66>
     cc2:	20 fd       	sbrc	r18, 0
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
     cc4:	2f 9a       	sbi	0x05, 7	; 5
     cc6:	f5 e3       	ldi	r31, 0x35	; 53
     cc8:	fa 95       	dec	r31
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <matrix_scan+0x74>
     ccc:	00 00       	nop
            _delay_us(10);

            // NOTE: KEY_STATE is valid only in 20us after KEY_ENABLE.
            // If V-USB interrupts in this section we could lose 40us or so
            // and would read invalid value from KEY_STATE.
            uint8_t last = TIMER_RAW;
     cce:	a6 b5       	in	r26, 0x26	; 38
 * key:     PD7(pull-uped)
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
     cd0:	2e 98       	cbi	0x05, 6	; 5
     cd2:	2a e1       	ldi	r18, 0x1A	; 26
     cd4:	2a 95       	dec	r18
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <matrix_scan+0x80>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <matrix_scan+0x86>
     cda:	20 91 4c 01 	lds	r18, 0x014C
     cde:	30 91 4d 01 	lds	r19, 0x014D
            // 10us wait does    work on Teensy++ with pro
            // 10us wait does    work on 328p+iwrap with pro
            // 10us wait doesn't work on tmk PCB(8MHz) with pro2(very lagged scan)
            _delay_us(5);

            if (KEY_STATE()) {
     ce2:	4f 9b       	sbis	0x09, 7	; 9
     ce4:	0e c0       	rjmp	.+28     	; 0xd02 <matrix_scan+0xae>
                matrix[row] &= ~(1<<col);
     ce6:	a8 01       	movw	r20, r16
     ce8:	08 2e       	mov	r0, r24
     cea:	01 c0       	rjmp	.+2      	; 0xcee <matrix_scan+0x9a>
     cec:	44 0f       	add	r20, r20
     cee:	0a 94       	dec	r0
     cf0:	ea f7       	brpl	.-6      	; 0xcec <matrix_scan+0x98>
     cf2:	40 95       	com	r20
     cf4:	f9 01       	movw	r30, r18
     cf6:	ec 0f       	add	r30, r28
     cf8:	fd 1f       	adc	r31, r29
     cfa:	50 81       	ld	r21, Z
     cfc:	54 23       	and	r21, r20
     cfe:	50 83       	st	Z, r21
     d00:	0c c0       	rjmp	.+24     	; 0xd1a <matrix_scan+0xc6>
            } else {
                matrix[row] |= (1<<col);
     d02:	f9 01       	movw	r30, r18
     d04:	ec 0f       	add	r30, r28
     d06:	fd 1f       	adc	r31, r29
     d08:	60 81       	ld	r22, Z
     d0a:	a8 01       	movw	r20, r16
     d0c:	08 2e       	mov	r0, r24
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <matrix_scan+0xbe>
     d10:	44 0f       	add	r20, r20
     d12:	0a 94       	dec	r0
     d14:	ea f7       	brpl	.-6      	; 0xd10 <matrix_scan+0xbc>
     d16:	64 2b       	or	r22, r20
     d18:	60 83       	st	Z, r22
            }

            // Ignore if this code region execution time elapses more than 20us.
            // MEMO: 20[us] * (TIMER_RAW_FREQ / 1000000)[count per us]
            // MEMO: then change above using this rule: a/(b/c) = a*1/(b/c) = a*(c/b)
            if (TIMER_DIFF_RAW(TIMER_RAW, last) > 20/(1000000/TIMER_RAW_FREQ)) {
     d1a:	46 b5       	in	r20, 0x26	; 38
     d1c:	6a 2f       	mov	r22, r26
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	4a 17       	cp	r20, r26
     d22:	18 f0       	brcs	.+6      	; 0xd2a <matrix_scan+0xd6>
     d24:	46 b5       	in	r20, 0x26	; 38
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <matrix_scan+0xde>
     d2a:	46 b5       	in	r20, 0x26	; 38
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	41 50       	subi	r20, 0x01	; 1
     d30:	5f 4f       	sbci	r21, 0xFF	; 255
     d32:	46 1b       	sub	r20, r22
     d34:	57 0b       	sbc	r21, r23
     d36:	46 30       	cpi	r20, 0x06	; 6
     d38:	51 05       	cpc	r21, r1
     d3a:	58 f0       	brcs	.+22     	; 0xd52 <matrix_scan+0xfe>
                matrix[row] = matrix_prev[row];
     d3c:	e0 91 4a 01 	lds	r30, 0x014A
     d40:	f0 91 4b 01 	lds	r31, 0x014B
     d44:	ec 0f       	add	r30, r28
     d46:	fd 1f       	adc	r31, r29
     d48:	40 81       	ld	r20, Z
     d4a:	f9 01       	movw	r30, r18
     d4c:	ec 0f       	add	r30, r28
     d4e:	fd 1f       	adc	r31, r29
     d50:	40 83       	st	Z, r20
     d52:	ea e1       	ldi	r30, 0x1A	; 26
     d54:	ea 95       	dec	r30
     d56:	f1 f7       	brne	.-4      	; 0xd54 <matrix_scan+0x100>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <matrix_scan+0x106>
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
static inline bool KEY_STATE(void) { return (PIND & (1<<7)); }
static inline void KEY_PREV_ON(void) { (PORTB |=  (1<<7)); }
static inline void KEY_PREV_OFF(void) { (PORTB &= ~(1<<7)); }
     d5a:	2f 98       	cbi	0x05, 7	; 5
 * prev:    PB7
 * power:   PD4(L:off/H:on)
 * row-ext: PC6,7 for HHKB JP(active low)
 */
static inline void KEY_ENABLE(void) { (PORTB &= ~(1<<6)); }
static inline void KEY_UNABLE(void) { (PORTB |=  (1<<6)); }
     d5c:	2e 9a       	sbi	0x05, 6	; 5
     d5e:	eb e2       	ldi	r30, 0x2B	; 43
     d60:	f1 e0       	ldi	r31, 0x01	; 1
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <matrix_scan+0x10e>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <matrix_scan+0x114>
     d68:	00 00       	nop
     d6a:	01 96       	adiw	r24, 0x01	; 1
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        for (uint8_t col = 0; col < MATRIX_COLS; col++) {
     d6c:	88 30       	cpi	r24, 0x08	; 8
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f0       	breq	.+2      	; 0xd74 <matrix_scan+0x120>
     d72:	8a cf       	rjmp	.-236    	; 0xc88 <matrix_scan+0x34>
            _delay_us(30);
#else
            _delay_us(75);
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
     d74:	a0 91 4c 01 	lds	r26, 0x014C
     d78:	b0 91 4d 01 	lds	r27, 0x014D
     d7c:	ac 0f       	add	r26, r28
     d7e:	bd 1f       	adc	r27, r29
     d80:	e0 91 4a 01 	lds	r30, 0x014A
     d84:	f0 91 4b 01 	lds	r31, 0x014B
     d88:	ec 0f       	add	r30, r28
     d8a:	fd 1f       	adc	r31, r29
     d8c:	9c 91       	ld	r25, X
     d8e:	80 81       	ld	r24, Z
     d90:	98 17       	cp	r25, r24
     d92:	51 f0       	breq	.+20     	; 0xda8 <matrix_scan+0x154>
     d94:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <timer_read32>
     d98:	60 93 4e 01 	sts	0x014E, r22
     d9c:	70 93 4f 01 	sts	0x014F, r23
     da0:	80 93 50 01 	sts	0x0150, r24
     da4:	90 93 51 01 	sts	0x0151, r25
     da8:	21 96       	adiw	r28, 0x01	; 1
    matrix_prev = matrix;
    matrix = tmp;

    // power on
    if (!KEY_POWER_STATE()) KEY_POWER_ON();
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     daa:	c8 30       	cpi	r28, 0x08	; 8
     dac:	d1 05       	cpc	r29, r1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <matrix_scan+0x15e>
     db0:	69 cf       	rjmp	.-302    	; 0xc84 <matrix_scan+0x30>
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
     db2:	80 91 01 02 	lds	r24, 0x0201
#endif
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
     db6:	85 30       	cpi	r24, 0x05	; 5
     db8:	21 f0       	breq	.+8      	; 0xdc2 <matrix_scan+0x16e>
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
     dba:	80 91 01 02 	lds	r24, 0x0201
        }
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
     dbe:	81 11       	cpse	r24, r1
     dc0:	11 c0       	rjmp	.+34     	; 0xde4 <matrix_scan+0x190>
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
     dc2:	60 91 4e 01 	lds	r22, 0x014E
     dc6:	70 91 4f 01 	lds	r23, 0x014F
     dca:	80 91 50 01 	lds	r24, 0x0150
     dce:	90 91 51 01 	lds	r25, 0x0151
     dd2:	0e 94 1b 1c 	call	0x3836	; 0x3836 <timer_elapsed32>
        if (matrix[row] ^ matrix_prev[row]) matrix_last_modified = timer_read32();
    }
    // power off
    if (KEY_POWER_STATE() &&
            (USB_DeviceState == DEVICE_STATE_Suspended ||
             USB_DeviceState == DEVICE_STATE_Unattached ) &&
     dd6:	61 31       	cpi	r22, 0x11	; 17
     dd8:	77 42       	sbci	r23, 0x27	; 39
     dda:	81 05       	cpc	r24, r1
     ddc:	91 05       	cpc	r25, r1
     dde:	10 f0       	brcs	.+4      	; 0xde4 <matrix_scan+0x190>
            timer_elapsed32(matrix_last_modified) > MATRIX_POWER_SAVE) {
        KEY_POWER_OFF();
        suspend_power_down();
     de0:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <suspend_power_down>
    }
    return 1;
}
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	08 95       	ret

00000df0 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     df0:	e0 91 4c 01 	lds	r30, 0x014C
     df4:	f0 91 4d 01 	lds	r31, 0x014D
     df8:	e8 0f       	add	r30, r24
     dfa:	f1 1d       	adc	r31, r1
}
     dfc:	80 81       	ld	r24, Z
     dfe:	08 95       	ret

00000e00 <matrix_power_up>:

void matrix_power_up(void) {
     e00:	08 95       	ret

00000e02 <matrix_power_down>:
    KEY_POWER_ON();
}
void matrix_power_down(void) {
     e02:	08 95       	ret

00000e04 <led_set>:

/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
        DDRD |= (1<<6);
     e04:	56 9a       	sbi	0x0a, 6	; 10


/* HHKB has no LEDs */
void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     e06:	81 ff       	sbrs	r24, 1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <led_set+0xa>
        DDRD |= (1<<6);
        PORTD |= (1<<6);
     e0a:	5e 9a       	sbi	0x0b, 6	; 11
     e0c:	08 95       	ret
    } else {
        DDRD |= (1<<6);
        PORTD &= ~(1<<6);
     e0e:	5e 98       	cbi	0x0b, 6	; 11
     e10:	08 95       	ret

00000e12 <keyboard_leds>:
 * Host driver
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e12:	80 91 76 01 	lds	r24, 0x0176
     e16:	08 95       	ret

00000e18 <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     e18:	9f b7       	in	r25, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	10 92 55 01 	sts	0x0155, r1
     e20:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     e22:	90 91 01 02 	lds	r25, 0x0201
     e26:	94 30       	cpi	r25, 0x04	; 4
     e28:	09 f0       	breq	.+2      	; 0xe2c <sendchar+0x14>
     e2a:	58 c0       	rjmp	.+176    	; 0xedc <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e2c:	90 91 e9 00 	lds	r25, 0x00E9
     e30:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e32:	20 91 ec 00 	lds	r18, 0x00EC
     e36:	20 ff       	sbrs	r18, 0
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <sendchar+0x26>
     e3a:	20 e8       	ldi	r18, 0x80	; 128
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <sendchar+0x28>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e40:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e48:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e4c:	90 ff       	sbrs	r25, 0
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e50:	90 91 ee 00 	lds	r25, 0x00EE
     e54:	97 ff       	sbrs	r25, 7
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     e58:	90 91 52 01 	lds	r25, 0x0152
     e5c:	99 23       	and	r25, r25
     e5e:	21 f0       	breq	.+8      	; 0xe68 <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e60:	90 91 e8 00 	lds	r25, 0x00E8
     e64:	95 ff       	sbrs	r25, 5
     e66:	37 c0       	rjmp	.+110    	; 0xed6 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
     e68:	10 92 52 01 	sts	0x0152, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     e6c:	96 e0       	ldi	r25, 0x06	; 6
     e6e:	30 91 e8 00 	lds	r19, 0x00E8
     e72:	35 fd       	sbrc	r19, 5
     e74:	15 c0       	rjmp	.+42     	; 0xea0 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     e76:	30 91 01 02 	lds	r19, 0x0201
     e7a:	34 30       	cpi	r19, 0x04	; 4
     e7c:	61 f5       	brne	.+88     	; 0xed6 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e7e:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     e82:	35 fd       	sbrc	r19, 5
     e84:	28 c0       	rjmp	.+80     	; 0xed6 <sendchar+0xbe>
     e86:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     e88:	21 f4       	brne	.+8      	; 0xe92 <sendchar+0x7a>
            timeouted = true;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 52 01 	sts	0x0152, r24
            goto ERROR_EXIT;
     e90:	22 c0       	rjmp	.+68     	; 0xed6 <sendchar+0xbe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e92:	ef e9       	ldi	r30, 0x9F	; 159
     e94:	ff e0       	ldi	r31, 0x0F	; 15
     e96:	31 97       	sbiw	r30, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <sendchar+0x7e>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <sendchar+0x84>
     e9c:	00 00       	nop
     e9e:	e7 cf       	rjmp	.-50     	; 0xe6e <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ea0:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ea4:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
     ea8:	85 fd       	sbrc	r24, 5
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eac:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
     eb0:	80 ff       	sbrs	r24, 0
     eb2:	fc cf       	rjmp	.-8      	; 0xeac <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     eb4:	80 91 e8 00 	lds	r24, 0x00E8
     eb8:	8e 77       	andi	r24, 0x7E	; 126
     eba:	80 93 e8 00 	sts	0x00E8, r24
     ebe:	06 c0       	rjmp	.+12     	; 0xecc <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
     ec0:	8f b7       	in	r24, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	90 93 55 01 	sts	0x0155, r25
     eca:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ecc:	2f 70       	andi	r18, 0x0F	; 15
     ece:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	08 95       	ret
     ed6:	2f 70       	andi	r18, 0x0F	; 15
     ed8:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
     ede:	08 95       	ret

00000ee0 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <send_consumer+0x6>
     ee6:	1f 92       	push	r1
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     eec:	20 91 01 02 	lds	r18, 0x0201
     ef0:	24 30       	cpi	r18, 0x04	; 4
     ef2:	19 f5       	brne	.+70     	; 0xf3a <send_consumer+0x5a>
        return;

    report_extra_t r = {
     ef4:	23 e0       	ldi	r18, 0x03	; 3
     ef6:	29 83       	std	Y+1, r18	; 0x01
     ef8:	9b 83       	std	Y+3, r25	; 0x03
     efa:	8a 83       	std	Y+2, r24	; 0x02
     efc:	20 93 e9 00 	sts	0x00E9, r18
     f00:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f02:	90 91 e8 00 	lds	r25, 0x00E8
     f06:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f08:	95 fd       	sbrc	r25, 5
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f0c:	95 ed       	ldi	r25, 0xD5	; 213
     f0e:	9a 95       	dec	r25
     f10:	f1 f7       	brne	.-4      	; 0xf0e <send_consumer+0x2e>
     f12:	00 00       	nop
     f14:	81 11       	cpse	r24, r1
     f16:	f5 cf       	rjmp	.-22     	; 0xf02 <send_consumer+0x22>
     f18:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     f1c:	85 ff       	sbrs	r24, 5
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	63 e0       	ldi	r22, 0x03	; 3
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	0e 94 4e 0a 	call	0x149c	; 0x149c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f30:	80 91 e8 00 	lds	r24, 0x00E8
     f34:	8e 77       	andi	r24, 0x7E	; 126
     f36:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	08 95       	ret

00000f46 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <send_system+0x6>
     f4c:	1f 92       	push	r1
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f52:	20 91 01 02 	lds	r18, 0x0201
     f56:	24 30       	cpi	r18, 0x04	; 4
     f58:	21 f5       	brne	.+72     	; 0xfa2 <send_system+0x5c>
        return;

    report_extra_t r = {
     f5a:	22 e0       	ldi	r18, 0x02	; 2
     f5c:	29 83       	std	Y+1, r18	; 0x01
     f5e:	9b 83       	std	Y+3, r25	; 0x03
     f60:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	80 93 e9 00 	sts	0x00E9, r24
     f68:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f6a:	90 91 e8 00 	lds	r25, 0x00E8
     f6e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f70:	95 fd       	sbrc	r25, 5
     f72:	06 c0       	rjmp	.+12     	; 0xf80 <send_system+0x3a>
     f74:	95 ed       	ldi	r25, 0xD5	; 213
     f76:	9a 95       	dec	r25
     f78:	f1 f7       	brne	.-4      	; 0xf76 <send_system+0x30>
     f7a:	00 00       	nop
     f7c:	81 11       	cpse	r24, r1
     f7e:	f5 cf       	rjmp	.-22     	; 0xf6a <send_system+0x24>
     f80:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     f84:	85 ff       	sbrs	r24, 5
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	63 e0       	ldi	r22, 0x03	; 3
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	ce 01       	movw	r24, r28
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	0e 94 4e 0a 	call	0x149c	; 0x149c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f98:	80 91 e8 00 	lds	r24, 0x00E8
     f9c:	8e 77       	andi	r24, 0x7E	; 126
     f9e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     fae:	20 91 01 02 	lds	r18, 0x0201
     fb2:	24 30       	cpi	r18, 0x04	; 4
     fb4:	f1 f4       	brne	.+60     	; 0xff2 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb6:	22 e0       	ldi	r18, 0x02	; 2
     fb8:	20 93 e9 00 	sts	0x00E9, r18
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fbe:	30 91 e8 00 	lds	r19, 0x00E8
     fc2:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     fc4:	35 fd       	sbrc	r19, 5
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <send_mouse+0x26>
     fc8:	35 ed       	ldi	r19, 0xD5	; 213
     fca:	3a 95       	dec	r19
     fcc:	f1 f7       	brne	.-4      	; 0xfca <send_mouse+0x1c>
     fce:	00 00       	nop
     fd0:	21 11       	cpse	r18, r1
     fd2:	f5 cf       	rjmp	.-22     	; 0xfbe <send_mouse+0x10>
     fd4:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     fd8:	25 ff       	sbrs	r18, 5
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	65 e0       	ldi	r22, 0x05	; 5
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	0e 94 4e 0a 	call	0x149c	; 0x149c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fe8:	80 91 e8 00 	lds	r24, 0x00E8
     fec:	8e 77       	andi	r24, 0x7E	; 126
     fee:	80 93 e8 00 	sts	0x00E8, r24
     ff2:	08 95       	ret

00000ff4 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     ffa:	80 91 01 02 	lds	r24, 0x0201
     ffe:	84 30       	cpi	r24, 0x04	; 4
    1000:	09 f0       	breq	.+2      	; 0x1004 <send_keyboard+0x10>
    1002:	47 c0       	rjmp	.+142    	; 0x1092 <send_keyboard+0x9e>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    1004:	80 91 0a 01 	lds	r24, 0x010A
    1008:	88 23       	and	r24, r24
    100a:	e1 f0       	breq	.+56     	; 0x1044 <send_keyboard+0x50>
    100c:	80 91 0b 01 	lds	r24, 0x010B
    1010:	88 23       	and	r24, r24
    1012:	c1 f0       	breq	.+48     	; 0x1044 <send_keyboard+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1014:	85 e0       	ldi	r24, 0x05	; 5
    1016:	80 93 e9 00 	sts	0x00E9, r24
    101a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    101c:	90 91 e8 00 	lds	r25, 0x00E8
    1020:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1022:	95 fd       	sbrc	r25, 5
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <send_keyboard+0x3e>
    1026:	95 e1       	ldi	r25, 0x15	; 21
    1028:	9a 95       	dec	r25
    102a:	f1 f7       	brne	.-4      	; 0x1028 <send_keyboard+0x34>
    102c:	00 00       	nop
    102e:	81 11       	cpse	r24, r1
    1030:	f5 cf       	rjmp	.-22     	; 0x101c <send_keyboard+0x28>
    1032:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1036:	85 ff       	sbrs	r24, 5
    1038:	2c c0       	rjmp	.+88     	; 0x1092 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	60 e2       	ldi	r22, 0x20	; 32
    1040:	70 e0       	ldi	r23, 0x00	; 0
    1042:	17 c0       	rjmp	.+46     	; 0x1072 <send_keyboard+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	80 93 e9 00 	sts	0x00E9, r24
    104a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    104c:	90 91 e8 00 	lds	r25, 0x00E8
    1050:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1052:	95 fd       	sbrc	r25, 5
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <send_keyboard+0x6e>
    1056:	95 ed       	ldi	r25, 0xD5	; 213
    1058:	9a 95       	dec	r25
    105a:	f1 f7       	brne	.-4      	; 0x1058 <send_keyboard+0x64>
    105c:	00 00       	nop
    105e:	81 11       	cpse	r24, r1
    1060:	f5 cf       	rjmp	.-22     	; 0x104c <send_keyboard+0x58>
    1062:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1066:	85 ff       	sbrs	r24, 5
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <send_keyboard+0x9e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	68 e0       	ldi	r22, 0x08	; 8
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 4e 0a 	call	0x149c	; 0x149c <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1078:	80 91 e8 00 	lds	r24, 0x00E8
    107c:	8e 77       	andi	r24, 0x7E	; 126
    107e:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	fe 01       	movw	r30, r28
    1086:	a6 e5       	ldi	r26, 0x56	; 86
    1088:	b1 e0       	ldi	r27, 0x01	; 1
    108a:	01 90       	ld	r0, Z+
    108c:	0d 92       	st	X+, r0
    108e:	8a 95       	dec	r24
    1090:	e1 f7       	brne	.-8      	; 0x108a <send_keyboard+0x96>
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1098:	8e e4       	ldi	r24, 0x4E	; 78
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    10a0:	80 91 00 02 	lds	r24, 0x0200
    10a4:	81 11       	cpse	r24, r1
    10a6:	09 c0       	rjmp	.+18     	; 0x10ba <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    10a8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <USB_Disable>
        USB_Init();
    10ac:	0e 94 3d 0c 	call	0x187a	; 0x187a <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    10b0:	80 91 e2 00 	lds	r24, 0x00E2
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	80 93 e2 00 	sts	0x00E2, r24
    10ba:	08 95       	ret

000010bc <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    10bc:	8a e4       	ldi	r24, 0x4A	; 74
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    10c4:	10 92 00 02 	sts	0x0200, r1
    10c8:	08 95       	ret

000010ca <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
    10ca:	08 95       	ret

000010cc <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    10cc:	80 91 53 01 	lds	r24, 0x0153
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	80 93 53 01 	sts	0x0153, r24
    10d6:	62 e3       	ldi	r22, 0x32	; 50
    10d8:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <__udivmodqi4>
    10dc:	91 11       	cpse	r25, r1
    10de:	35 c0       	rjmp	.+106    	; 0x114a <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    10e0:	10 92 53 01 	sts	0x0153, r1

    if (!console_flush) return;
    10e4:	80 91 55 01 	lds	r24, 0x0155
    10e8:	88 23       	and	r24, r24
    10ea:	79 f1       	breq	.+94     	; 0x114a <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    10ec:	80 91 01 02 	lds	r24, 0x0201
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	49 f5       	brne	.+82     	; 0x1146 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    10f4:	80 91 e9 00 	lds	r24, 0x00E9
    10f8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    10fa:	90 91 ec 00 	lds	r25, 0x00EC
    10fe:	90 ff       	sbrs	r25, 0
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <EVENT_USB_Device_StartOfFrame+0x3a>
    1102:	90 e8       	ldi	r25, 0x80	; 128
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <EVENT_USB_Device_StartOfFrame+0x3c>
    1106:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1108:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1110:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1114:	80 ff       	sbrs	r24, 0
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1118:	80 91 ee 00 	lds	r24, 0x00EE
    111c:	87 ff       	sbrs	r24, 7
    111e:	10 c0       	rjmp	.+32     	; 0x1140 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1120:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1124:	85 ff       	sbrs	r24, 5
    1126:	03 c0       	rjmp	.+6      	; 0x112e <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1128:	10 92 f1 00 	sts	0x00F1, r1
    112c:	f9 cf       	rjmp	.-14     	; 0x1120 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    112e:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1132:	80 ff       	sbrs	r24, 0
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1136:	80 91 e8 00 	lds	r24, 0x00E8
    113a:	8e 77       	andi	r24, 0x7E	; 126
    113c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1140:	9f 70       	andi	r25, 0x0F	; 15
    1142:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1146:	10 92 55 01 	sts	0x0155, r1
    114a:	08 95       	ret

0000114c <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    114c:	42 e0       	ldi	r20, 0x02	; 2
    114e:	61 ec       	ldi	r22, 0xC1	; 193
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>
    1156:	42 e0       	ldi	r20, 0x02	; 2
    1158:	61 ec       	ldi	r22, 0xC1	; 193
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>
    1160:	42 e0       	ldi	r20, 0x02	; 2
    1162:	61 ec       	ldi	r22, 0xC1	; 193
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>
    116a:	42 e2       	ldi	r20, 0x22	; 34
    116c:	61 ec       	ldi	r22, 0xC1	; 193
    116e:	84 e0       	ldi	r24, 0x04	; 4
    1170:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>
    1174:	42 e2       	ldi	r20, 0x22	; 34
    1176:	61 ec       	ldi	r22, 0xC1	; 193
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	0c 94 5a 0b 	jmp	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>

0000117e <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    117e:	80 91 03 02 	lds	r24, 0x0203
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	09 f4       	brne	.+2      	; 0x1188 <EVENT_USB_Device_ControlRequest+0xa>
    1186:	55 c0       	rjmp	.+170    	; 0x1232 <EVENT_USB_Device_ControlRequest+0xb4>
    1188:	30 f4       	brcc	.+12     	; 0x1196 <EVENT_USB_Device_ControlRequest+0x18>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	71 f0       	breq	.+28     	; 0x11aa <EVENT_USB_Device_ControlRequest+0x2c>
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	09 f4       	brne	.+2      	; 0x1194 <EVENT_USB_Device_ControlRequest+0x16>
    1192:	8e c0       	rjmp	.+284    	; 0x12b0 <EVENT_USB_Device_ControlRequest+0x132>
    1194:	08 95       	ret
    1196:	8a 30       	cpi	r24, 0x0A	; 10
    1198:	09 f4       	brne	.+2      	; 0x119c <EVENT_USB_Device_ControlRequest+0x1e>
    119a:	7a c0       	rjmp	.+244    	; 0x1290 <EVENT_USB_Device_ControlRequest+0x112>
    119c:	8b 30       	cpi	r24, 0x0B	; 11
    119e:	09 f4       	brne	.+2      	; 0x11a2 <EVENT_USB_Device_ControlRequest+0x24>
    11a0:	60 c0       	rjmp	.+192    	; 0x1262 <EVENT_USB_Device_ControlRequest+0xe4>
    11a2:	89 30       	cpi	r24, 0x09	; 9
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <EVENT_USB_Device_ControlRequest+0x2a>
    11a6:	9c c0       	rjmp	.+312    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
    11a8:	20 c0       	rjmp	.+64     	; 0x11ea <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11aa:	80 91 02 02 	lds	r24, 0x0202
    11ae:	81 3a       	cpi	r24, 0xA1	; 161
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <EVENT_USB_Device_ControlRequest+0x36>
    11b2:	96 c0       	rjmp	.+300    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11b4:	80 91 e8 00 	lds	r24, 0x00E8
    11b8:	87 7f       	andi	r24, 0xF7	; 247
    11ba:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    11be:	80 91 06 02 	lds	r24, 0x0206
    11c2:	90 91 07 02 	lds	r25, 0x0207
    11c6:	89 2b       	or	r24, r25
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    11ca:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    11d2:	60 e2       	ldi	r22, 0x20	; 32

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    11d4:	86 e5       	ldi	r24, 0x56	; 86
    11d6:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	0e 94 97 0a 	call	0x152e	; 0x152e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    11e2:	8b 77       	andi	r24, 0x7B	; 123
    11e4:	80 93 e8 00 	sts	0x00E8, r24
    11e8:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11ea:	80 91 02 02 	lds	r24, 0x0202
    11ee:	81 32       	cpi	r24, 0x21	; 33
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <EVENT_USB_Device_ControlRequest+0x76>
    11f2:	76 c0       	rjmp	.+236    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    11f4:	80 91 06 02 	lds	r24, 0x0206
    11f8:	90 91 07 02 	lds	r25, 0x0207
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	19 f0       	breq	.+6      	; 0x1206 <EVENT_USB_Device_ControlRequest+0x88>
    1200:	04 97       	sbiw	r24, 0x04	; 4
    1202:	09 f0       	breq	.+2      	; 0x1206 <EVENT_USB_Device_ControlRequest+0x88>
    1204:	6d c0       	rjmp	.+218    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1206:	80 91 e8 00 	lds	r24, 0x00E8
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1210:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1214:	82 fd       	sbrc	r24, 2
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1218:	80 91 01 02 	lds	r24, 0x0201
    121c:	81 11       	cpse	r24, r1
    121e:	f8 cf       	rjmp	.-16     	; 0x1210 <EVENT_USB_Device_ControlRequest+0x92>
    1220:	5f c0       	rjmp	.+190    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1222:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1226:	80 93 76 01 	sts	0x0176, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    122a:	80 91 e8 00 	lds	r24, 0x00E8
    122e:	8b 77       	andi	r24, 0x7B	; 123
    1230:	53 c0       	rjmp	.+166    	; 0x12d8 <EVENT_USB_Device_ControlRequest+0x15a>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1232:	80 91 02 02 	lds	r24, 0x0202
    1236:	81 3a       	cpi	r24, 0xA1	; 161
    1238:	09 f0       	breq	.+2      	; 0x123c <EVENT_USB_Device_ControlRequest+0xbe>
    123a:	52 c0       	rjmp	.+164    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    123c:	80 91 06 02 	lds	r24, 0x0206
    1240:	90 91 07 02 	lds	r25, 0x0207
    1244:	89 2b       	or	r24, r25
    1246:	09 f0       	breq	.+2      	; 0x124a <EVENT_USB_Device_ControlRequest+0xcc>
    1248:	4b c0       	rjmp	.+150    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    124a:	80 91 e8 00 	lds	r24, 0x00E8
    124e:	87 7f       	andi	r24, 0xF7	; 247
    1250:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1254:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1258:	80 ff       	sbrs	r24, 0
    125a:	fc cf       	rjmp	.-8      	; 0x1254 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    125c:	80 91 0a 01 	lds	r24, 0x010A
    1260:	36 c0       	rjmp	.+108    	; 0x12ce <EVENT_USB_Device_ControlRequest+0x150>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1262:	80 91 02 02 	lds	r24, 0x0202
    1266:	81 32       	cpi	r24, 0x21	; 33
    1268:	d9 f5       	brne	.+118    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    126a:	80 91 06 02 	lds	r24, 0x0206
    126e:	90 91 07 02 	lds	r25, 0x0207
    1272:	89 2b       	or	r24, r25
    1274:	a9 f5       	brne	.+106    	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1276:	80 91 e8 00 	lds	r24, 0x00E8
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1280:	0e 94 8f 0b 	call	0x171e	; 0x171e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1284:	80 91 04 02 	lds	r24, 0x0204
    1288:	80 93 0a 01 	sts	0x010A, r24
                    clear_keyboard();
    128c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1290:	80 91 02 02 	lds	r24, 0x0202
    1294:	81 32       	cpi	r24, 0x21	; 33
    1296:	21 f5       	brne	.+72     	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
    1298:	80 91 e8 00 	lds	r24, 0x00E8
    129c:	87 7f       	andi	r24, 0xF7	; 247
    129e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    12a2:	0e 94 8f 0b 	call	0x171e	; 0x171e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    12a6:	80 91 05 02 	lds	r24, 0x0205
    12aa:	80 93 77 01 	sts	0x0177, r24
    12ae:	08 95       	ret
#endif
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12b0:	80 91 02 02 	lds	r24, 0x0202
    12b4:	81 3a       	cpi	r24, 0xA1	; 161
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <EVENT_USB_Device_ControlRequest+0x162>
    12b8:	80 91 e8 00 	lds	r24, 0x00E8
    12bc:	87 7f       	andi	r24, 0xF7	; 247
    12be:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12c2:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    12c6:	80 ff       	sbrs	r24, 0
    12c8:	fc cf       	rjmp	.-8      	; 0x12c2 <EVENT_USB_Device_ControlRequest+0x144>
                Endpoint_Write_8(keyboard_idle);
    12ca:	80 91 77 01 	lds	r24, 0x0177
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12ce:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12d2:	80 91 e8 00 	lds	r24, 0x00E8
    12d6:	8e 77       	andi	r24, 0x7E	; 126
    12d8:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    12dc:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <Endpoint_ClearStatusStage>
    12e0:	08 95       	ret

000012e2 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    12e2:	08 95       	ret

000012e4 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    12e4:	08 95       	ret

000012e6 <hook_usb_suspend_entry>:
void hook_usb_suspend_entry(void)
{
    // Turn LED off to save power
    // Set 0 with putting aside status before suspend and restore
    // it after wakeup, then LED is updated at keyboard_task() in main loop
    _led_stats = keyboard_led_stats;
    12e6:	80 91 76 01 	lds	r24, 0x0176
    12ea:	80 93 54 01 	sts	0x0154, r24
    keyboard_led_stats = 0;
    12ee:	10 92 76 01 	sts	0x0176, r1
    led_set(keyboard_led_stats);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 02 07 	call	0xe04	; 0xe04 <led_set>

    matrix_clear();
    12f8:	0e 94 39 10 	call	0x2072	; 0x2072 <matrix_clear>
    clear_keyboard();
    12fc:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <clear_keyboard>

00001300 <EVENT_USB_Device_Suspend>:
void EVENT_USB_Device_Suspend()
{
#ifdef LUFA_DEBUG
    print("[S]");
#endif
    hook_usb_suspend_entry();
    1300:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <hook_usb_suspend_entry>

00001304 <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    1304:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1308:	80 91 ff 01 	lds	r24, 0x01FF
    130c:	88 23       	and	r24, r24
    130e:	29 f0       	breq	.+10     	; 0x131a <hook_usb_suspend_loop+0x16>
    1310:	0e 94 8f 1b 	call	0x371e	; 0x371e <suspend_wakeup_condition>
    1314:	81 11       	cpse	r24, r1
        USB_Device_SendRemoteWakeup();
    1316:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <USB_Device_SendRemoteWakeup>
    131a:	08 95       	ret

0000131c <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    131c:	84 b7       	in	r24, 0x34	; 52
    131e:	87 7f       	andi	r24, 0xF7	; 247
    1320:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1322:	88 e1       	ldi	r24, 0x18	; 24
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	80 93 60 00 	sts	0x0060, r24
    132c:	10 92 60 00 	sts	0x0060, r1
    1330:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	80 e8       	ldi	r24, 0x80	; 128
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	80 93 61 00 	sts	0x0061, r24
    133e:	90 93 61 00 	sts	0x0061, r25
    1342:	0f be       	out	0x3f, r0	; 63

#ifdef LUFA_DEBUG_SUART
    SUART_OUT_DDR |= (1<<SUART_OUT_BIT);
    SUART_OUT_PORT |= (1<<SUART_OUT_BIT);
#endif
    print_set_sendchar(sendchar);
    1344:	8c e0       	ldi	r24, 0x0C	; 12
    1346:	97 e0       	ldi	r25, 0x07	; 7
    1348:	0e 94 3e 1b 	call	0x367c	; 0x367c <print_set_sendchar>
    print("\r\ninit\n");
    134c:	82 e4       	ldi	r24, 0x42	; 66
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>

    hook_early_init();
    1354:	0e 94 71 09 	call	0x12e2	; 0x12e2 <hook_early_init>
    keyboard_setup();
    1358:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    135c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <USB_Disable>

    USB_Init();
    1360:	0e 94 3d 0c 	call	0x187a	; 0x187a <USB_Init>
    1364:	80 91 e2 00 	lds	r24, 0x00E2
    1368:	84 60       	ori	r24, 0x04	; 4
    136a:	80 93 e2 00 	sts	0x00E2, r24
    print("\r\ninit\n");

    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    136e:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1370:	80 91 01 02 	lds	r24, 0x0201
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	e1 f7       	brne	.-8      	; 0x1370 <main+0x54>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1378:	81 e3       	ldi	r24, 0x31	; 49
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>

    /* init modules */
    keyboard_init();
    1380:	0e 94 76 0f 	call	0x1eec	; 0x1eec <keyboard_init>
    host_set_driver(&lufa_driver);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    hook_late_init();
    1394:	0e 94 72 09 	call	0x12e4	; 0x12e4 <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1398:	80 91 01 02 	lds	r24, 0x0201
    139c:	85 30       	cpi	r24, 0x05	; 5
    139e:	19 f4       	brne	.+6      	; 0x13a6 <main+0x8a>
#ifdef LUFA_DEBUG
            print("[s]");
#endif
            hook_usb_suspend_loop();
    13a0:	0e 94 82 09 	call	0x1304	; 0x1304 <hook_usb_suspend_loop>
    13a4:	f9 cf       	rjmp	.-14     	; 0x1398 <main+0x7c>
        }

        keyboard_task();
    13a6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    13aa:	f6 cf       	rjmp	.-20     	; 0x1398 <main+0x7c>

000013ac <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    13ac:	0e 94 a4 1b 	call	0x3748	; 0x3748 <suspend_wakeup_init>
    // Restore LED status
    // BIOS/grub won't recognize/enumerate if led_set() takes long(around 40ms?)
    // Converters fall into the case and miss wakeup event(timeout to reply?) in the end.
    //led_set(host_keyboard_leds());
    // Instead, restore stats and update at keyboard_task() in main loop
    keyboard_led_stats = _led_stats;
    13b0:	80 91 54 01 	lds	r24, 0x0154
    13b4:	80 93 76 01 	sts	0x0176, r24
    13b8:	08 95       	ret

000013ba <EVENT_USB_Device_WakeUp>:
void EVENT_USB_Device_WakeUp()
{
#ifdef LUFA_DEBUG
    print("[W]");
#endif
    hook_usb_wakeup();
    13ba:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <hook_usb_wakeup>

000013be <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    13be:	29 2f       	mov	r18, r25
    13c0:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    13c2:	23 30       	cpi	r18, 0x03	; 3
    13c4:	31 05       	cpc	r19, r1
    13c6:	a9 f0       	breq	.+42     	; 0x13f2 <CALLBACK_USB_GetDescriptor+0x34>
    13c8:	6c f4       	brge	.+26     	; 0x13e4 <CALLBACK_USB_GetDescriptor+0x26>
    13ca:	21 30       	cpi	r18, 0x01	; 1
    13cc:	31 05       	cpc	r19, r1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <CALLBACK_USB_GetDescriptor+0x14>
    13d0:	42 c0       	rjmp	.+132    	; 0x1456 <CALLBACK_USB_GetDescriptor+0x98>
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f0       	breq	.+2      	; 0x13da <CALLBACK_USB_GetDescriptor+0x1c>
    13d8:	43 c0       	rjmp	.+134    	; 0x1460 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    13da:	8d e8       	ldi	r24, 0x8D	; 141
    13dc:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    13de:	2a e7       	ldi	r18, 0x7A	; 122
    13e0:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    13e2:	42 c0       	rjmp	.+132    	; 0x1468 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    13e4:	21 32       	cpi	r18, 0x21	; 33
    13e6:	31 05       	cpc	r19, r1
    13e8:	c9 f0       	breq	.+50     	; 0x141c <CALLBACK_USB_GetDescriptor+0x5e>
    13ea:	22 32       	cpi	r18, 0x22	; 34
    13ec:	31 05       	cpc	r19, r1
    13ee:	19 f1       	breq	.+70     	; 0x1436 <CALLBACK_USB_GetDescriptor+0x78>
    13f0:	37 c0       	rjmp	.+110    	; 0x1460 <CALLBACK_USB_GetDescriptor+0xa2>
    13f2:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	41 f0       	breq	.+16     	; 0x140a <CALLBACK_USB_GetDescriptor+0x4c>
    13fa:	82 30       	cpi	r24, 0x02	; 2
    13fc:	91 05       	cpc	r25, r1
    13fe:	41 f0       	breq	.+16     	; 0x1410 <CALLBACK_USB_GetDescriptor+0x52>
    1400:	89 2b       	or	r24, r25
    1402:	71 f5       	brne	.+92     	; 0x1460 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1404:	e6 e7       	ldi	r30, 0x76	; 118
    1406:	f1 e0       	ldi	r31, 0x01	; 1
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    140a:	e6 e6       	ldi	r30, 0x66	; 102
    140c:	f1 e0       	ldi	r31, 0x01	; 1
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1410:	e2 e5       	ldi	r30, 0x52	; 82
    1412:	f1 e0       	ldi	r31, 0x01	; 1
    1414:	84 91       	lpm	r24, Z
    1416:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1418:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    141a:	26 c0       	rjmp	.+76     	; 0x1468 <CALLBACK_USB_GetDescriptor+0xaa>
    141c:	65 30       	cpi	r22, 0x05	; 5
    141e:	00 f5       	brcc	.+64     	; 0x1460 <CALLBACK_USB_GetDescriptor+0xa2>
    1420:	e6 2f       	mov	r30, r22
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	ed 5d       	subi	r30, 0xDD	; 221
    142a:	fe 4f       	sbci	r31, 0xFE	; 254
    142c:	20 81       	ld	r18, Z
    142e:	31 81       	ldd	r19, Z+1	; 0x01
    1430:	89 e0       	ldi	r24, 0x09	; 9
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	19 c0       	rjmp	.+50     	; 0x1468 <CALLBACK_USB_GetDescriptor+0xaa>
    1436:	65 30       	cpi	r22, 0x05	; 5
    1438:	98 f4       	brcc	.+38     	; 0x1460 <CALLBACK_USB_GetDescriptor+0xa2>
    143a:	e6 2f       	mov	r30, r22
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	df 01       	movw	r26, r30
    1440:	aa 0f       	add	r26, r26
    1442:	bb 1f       	adc	r27, r27
    1444:	a7 5e       	subi	r26, 0xE7	; 231
    1446:	be 4f       	sbci	r27, 0xFE	; 254
    1448:	2d 91       	ld	r18, X+
    144a:	3c 91       	ld	r19, X
    144c:	ec 5e       	subi	r30, 0xEC	; 236
    144e:	fe 4f       	sbci	r31, 0xFE	; 254
    1450:	80 81       	ld	r24, Z
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	09 c0       	rjmp	.+18     	; 0x1468 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1456:	82 e1       	ldi	r24, 0x12	; 18
    1458:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    145a:	27 e0       	ldi	r18, 0x07	; 7
    145c:	32 e0       	ldi	r19, 0x02	; 2
    145e:	04 c0       	rjmp	.+8      	; 0x1468 <CALLBACK_USB_GetDescriptor+0xaa>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1468:	fa 01       	movw	r30, r20
    146a:	31 83       	std	Z+1, r19	; 0x01
    146c:	20 83       	st	Z, r18
    return Size;
}
    146e:	08 95       	ret

00001470 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1470:	80 e1       	ldi	r24, 0x10	; 16
    1472:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1474:	82 e1       	ldi	r24, 0x12	; 18
    1476:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1478:	09 b4       	in	r0, 0x29	; 41
    147a:	00 fe       	sbrs	r0, 0
    147c:	fd cf       	rjmp	.-6      	; 0x1478 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    147e:	80 91 d8 00 	lds	r24, 0x00D8
    1482:	8f 7d       	andi	r24, 0xDF	; 223
    1484:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1488:	80 91 e0 00 	lds	r24, 0x00E0
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1492:	80 91 e0 00 	lds	r24, 0x00E0
    1496:	81 fd       	sbrc	r24, 1
    1498:	fc cf       	rjmp	.-8      	; 0x1492 <USB_Device_SendRemoteWakeup+0x22>
}
    149a:	08 95       	ret

0000149c <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	7c 01       	movw	r14, r24
    14ae:	8b 01       	movw	r16, r22
    14b0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    14b2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <Endpoint_WaitUntilReady>
    14b6:	81 11       	cpse	r24, r1
    14b8:	31 c0       	rjmp	.+98     	; 0x151c <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14ba:	20 97       	sbiw	r28, 0x00	; 0
    14bc:	31 f0       	breq	.+12     	; 0x14ca <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    14be:	88 81       	ld	r24, Y
    14c0:	99 81       	ldd	r25, Y+1	; 0x01
    14c2:	08 1b       	sub	r16, r24
    14c4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14c6:	e8 0e       	add	r14, r24
    14c8:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14ca:	c1 2c       	mov	r12, r1
    14cc:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    14ce:	01 15       	cp	r16, r1
    14d0:	11 05       	cpc	r17, r1
    14d2:	19 f1       	breq	.+70     	; 0x151a <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14d4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    14d8:	85 fd       	sbrc	r24, 5
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14dc:	80 91 e8 00 	lds	r24, 0x00E8
    14e0:	8e 77       	andi	r24, 0x7E	; 126
    14e2:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    14e6:	20 97       	sbiw	r28, 0x00	; 0
    14e8:	41 f0       	breq	.+16     	; 0x14fa <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    14ea:	88 81       	ld	r24, Y
    14ec:	99 81       	ldd	r25, Y+1	; 0x01
    14ee:	8c 0d       	add	r24, r12
    14f0:	9d 1d       	adc	r25, r13
    14f2:	99 83       	std	Y+1, r25	; 0x01
    14f4:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    14f6:	85 e0       	ldi	r24, 0x05	; 5
    14f8:	11 c0       	rjmp	.+34     	; 0x151c <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    14fa:	0e 94 b0 0b 	call	0x1760	; 0x1760 <Endpoint_WaitUntilReady>
    14fe:	88 23       	and	r24, r24
    1500:	31 f3       	breq	.-52     	; 0x14ce <Endpoint_Write_Stream_LE+0x32>
    1502:	0c c0       	rjmp	.+24     	; 0x151c <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1504:	f7 01       	movw	r30, r14
    1506:	81 91       	ld	r24, Z+
    1508:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    150a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    150e:	01 50       	subi	r16, 0x01	; 1
    1510:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1512:	ff ef       	ldi	r31, 0xFF	; 255
    1514:	cf 1a       	sub	r12, r31
    1516:	df 0a       	sbc	r13, r31
    1518:	da cf       	rjmp	.-76     	; 0x14ce <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    151a:	80 e0       	ldi	r24, 0x00	; 0
}
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	08 95       	ret

0000152e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    152e:	20 91 08 02 	lds	r18, 0x0208
    1532:	30 91 09 02 	lds	r19, 0x0209
    1536:	26 17       	cp	r18, r22
    1538:	37 07       	cpc	r19, r23
    153a:	48 f0       	brcs	.+18     	; 0x154e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    153c:	61 15       	cp	r22, r1
    153e:	71 05       	cpc	r23, r1
    1540:	39 f4       	brne	.+14     	; 0x1550 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1542:	20 91 e8 00 	lds	r18, 0x00E8
    1546:	2e 77       	andi	r18, 0x7E	; 126
    1548:	20 93 e8 00 	sts	0x00E8, r18
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <Endpoint_Write_Control_Stream_LE+0x22>
    154e:	b9 01       	movw	r22, r18
    1550:	fc 01       	movw	r30, r24
    1552:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1554:	61 15       	cp	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	b9 f1       	breq	.+110    	; 0x15c8 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    155a:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    155e:	88 23       	and	r24, r24
    1560:	09 f4       	brne	.+2      	; 0x1564 <Endpoint_Write_Control_Stream_LE+0x36>
    1562:	40 c0       	rjmp	.+128    	; 0x15e4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1564:	85 30       	cpi	r24, 0x05	; 5
    1566:	09 f4       	brne	.+2      	; 0x156a <Endpoint_Write_Control_Stream_LE+0x3c>
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    156a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    156e:	83 fd       	sbrc	r24, 3
    1570:	3d c0       	rjmp	.+122    	; 0x15ec <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1572:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1576:	82 ff       	sbrs	r24, 2
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <Endpoint_Write_Control_Stream_LE+0x58>
    157a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    157e:	82 ff       	sbrs	r24, 2
    1580:	26 c0       	rjmp	.+76     	; 0x15ce <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1586:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    158a:	80 ff       	sbrs	r24, 0
    158c:	e3 cf       	rjmp	.-58     	; 0x1554 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    158e:	20 91 f3 00 	lds	r18, 0x00F3
    1592:	80 91 f2 00 	lds	r24, 0x00F2
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	51 f0       	breq	.+20     	; 0x15b4 <Endpoint_Write_Control_Stream_LE+0x86>
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	91 05       	cpc	r25, r1
    15a4:	38 f4       	brcc	.+14     	; 0x15b4 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    15a6:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15a8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    15ac:	61 50       	subi	r22, 0x01	; 1
    15ae:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	f3 cf       	rjmp	.-26     	; 0x159a <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    15b4:	21 e0       	ldi	r18, 0x01	; 1
    15b6:	08 97       	sbiw	r24, 0x08	; 8
    15b8:	09 f0       	breq	.+2      	; 0x15bc <Endpoint_Write_Control_Stream_LE+0x8e>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15bc:	80 91 e8 00 	lds	r24, 0x00E8
    15c0:	8e 77       	andi	r24, 0x7E	; 126
    15c2:	80 93 e8 00 	sts	0x00E8, r24
    15c6:	c6 cf       	rjmp	.-116    	; 0x1554 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15c8:	21 11       	cpse	r18, r1
    15ca:	c7 cf       	rjmp	.-114    	; 0x155a <Endpoint_Write_Control_Stream_LE+0x2c>
    15cc:	d6 cf       	rjmp	.-84     	; 0x157a <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15ce:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15d2:	88 23       	and	r24, r24
    15d4:	39 f0       	breq	.+14     	; 0x15e4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15d6:	85 30       	cpi	r24, 0x05	; 5
    15d8:	39 f0       	breq	.+14     	; 0x15e8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15de:	83 ff       	sbrs	r24, 3
    15e0:	cc cf       	rjmp	.-104    	; 0x157a <Endpoint_Write_Control_Stream_LE+0x4c>
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    15ee:	08 95       	ret

000015f0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    15f0:	20 91 08 02 	lds	r18, 0x0208
    15f4:	30 91 09 02 	lds	r19, 0x0209
    15f8:	26 17       	cp	r18, r22
    15fa:	37 07       	cpc	r19, r23
    15fc:	48 f0       	brcs	.+18     	; 0x1610 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    15fe:	61 15       	cp	r22, r1
    1600:	71 05       	cpc	r23, r1
    1602:	39 f4       	brne	.+14     	; 0x1612 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1604:	20 91 e8 00 	lds	r18, 0x00E8
    1608:	2e 77       	andi	r18, 0x7E	; 126
    160a:	20 93 e8 00 	sts	0x00E8, r18
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <Endpoint_Write_Control_PStream_LE+0x22>
    1610:	b9 01       	movw	r22, r18
    1612:	fc 01       	movw	r30, r24
    1614:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1616:	61 15       	cp	r22, r1
    1618:	71 05       	cpc	r23, r1
    161a:	c1 f1       	breq	.+112    	; 0x168c <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    161c:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <Endpoint_Write_Control_PStream_LE+0x36>
    1624:	41 c0       	rjmp	.+130    	; 0x16a8 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1626:	85 30       	cpi	r24, 0x05	; 5
    1628:	09 f4       	brne	.+2      	; 0x162c <Endpoint_Write_Control_PStream_LE+0x3c>
    162a:	40 c0       	rjmp	.+128    	; 0x16ac <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    162c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1630:	83 fd       	sbrc	r24, 3
    1632:	3e c0       	rjmp	.+124    	; 0x16b0 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1634:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1638:	82 ff       	sbrs	r24, 2
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <Endpoint_Write_Control_PStream_LE+0x58>
    163c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1640:	82 ff       	sbrs	r24, 2
    1642:	27 c0       	rjmp	.+78     	; 0x1692 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1648:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    164c:	80 ff       	sbrs	r24, 0
    164e:	e3 cf       	rjmp	.-58     	; 0x1616 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1650:	20 91 f3 00 	lds	r18, 0x00F3
    1654:	80 91 f2 00 	lds	r24, 0x00F2
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    165c:	61 15       	cp	r22, r1
    165e:	71 05       	cpc	r23, r1
    1660:	59 f0       	breq	.+22     	; 0x1678 <Endpoint_Write_Control_PStream_LE+0x88>
    1662:	88 30       	cpi	r24, 0x08	; 8
    1664:	91 05       	cpc	r25, r1
    1666:	40 f4       	brcc	.+16     	; 0x1678 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1668:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    166a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    166e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1670:	61 50       	subi	r22, 0x01	; 1
    1672:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1674:	01 96       	adiw	r24, 0x01	; 1
    1676:	f2 cf       	rjmp	.-28     	; 0x165c <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	08 97       	sbiw	r24, 0x08	; 8
    167c:	09 f0       	breq	.+2      	; 0x1680 <Endpoint_Write_Control_PStream_LE+0x90>
    167e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1680:	80 91 e8 00 	lds	r24, 0x00E8
    1684:	8e 77       	andi	r24, 0x7E	; 126
    1686:	80 93 e8 00 	sts	0x00E8, r24
    168a:	c5 cf       	rjmp	.-118    	; 0x1616 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    168c:	21 11       	cpse	r18, r1
    168e:	c6 cf       	rjmp	.-116    	; 0x161c <Endpoint_Write_Control_PStream_LE+0x2c>
    1690:	d5 cf       	rjmp	.-86     	; 0x163c <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1692:	80 91 01 02 	lds	r24, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1696:	88 23       	and	r24, r24
    1698:	39 f0       	breq	.+14     	; 0x16a8 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    169a:	85 30       	cpi	r24, 0x05	; 5
    169c:	39 f0       	breq	.+14     	; 0x16ac <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    169e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    16a2:	83 ff       	sbrs	r24, 3
    16a4:	cb cf       	rjmp	.-106    	; 0x163c <Endpoint_Write_Control_PStream_LE+0x4c>
    16a6:	04 c0       	rjmp	.+8      	; 0x16b0 <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    16ac:	83 e0       	ldi	r24, 0x03	; 3
    16ae:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16b2:	08 95       	ret

000016b4 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    16b4:	98 2f       	mov	r25, r24
    16b6:	97 30       	cpi	r25, 0x07	; 7
    16b8:	58 f5       	brcc	.+86     	; 0x1710 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ba:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    16be:	98 17       	cp	r25, r24
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    16c2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    16c6:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    16ca:	50 91 f0 00 	lds	r21, 0x00F0
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    16d0:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    16d2:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    16d4:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    16d6:	21 ff       	sbrs	r18, 1
    16d8:	19 c0       	rjmp	.+50     	; 0x170c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    16da:	30 91 eb 00 	lds	r19, 0x00EB
    16de:	3e 7f       	andi	r19, 0xFE	; 254
    16e0:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    16e4:	30 91 ed 00 	lds	r19, 0x00ED
    16e8:	3d 7f       	andi	r19, 0xFD	; 253
    16ea:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    16ee:	30 91 eb 00 	lds	r19, 0x00EB
    16f2:	31 60       	ori	r19, 0x01	; 1
    16f4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    16f8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    16fc:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1700:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1704:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1708:	27 ff       	sbrs	r18, 7
    170a:	07 c0       	rjmp	.+14     	; 0x171a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    170c:	9f 5f       	subi	r25, 0xFF	; 255
    170e:	d3 cf       	rjmp	.-90     	; 0x16b6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1710:	8f 70       	andi	r24, 0x0F	; 15
    1712:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    171a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    171c:	08 95       	ret

0000171e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    171e:	80 91 02 02 	lds	r24, 0x0202
    1722:	87 fd       	sbrc	r24, 7
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1726:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    172a:	80 ff       	sbrs	r24, 0
    172c:	0e c0       	rjmp	.+28     	; 0x174a <Endpoint_ClearStatusStage+0x2c>
    172e:	12 c0       	rjmp	.+36     	; 0x1754 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1730:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1734:	82 fd       	sbrc	r24, 2
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1738:	80 91 01 02 	lds	r24, 0x0201
    173c:	81 11       	cpse	r24, r1
    173e:	f8 cf       	rjmp	.-16     	; 0x1730 <Endpoint_ClearStatusStage+0x12>
    1740:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1742:	80 91 e8 00 	lds	r24, 0x00E8
    1746:	8b 77       	andi	r24, 0x7B	; 123
    1748:	08 c0       	rjmp	.+16     	; 0x175a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    174a:	80 91 01 02 	lds	r24, 0x0201
    174e:	81 11       	cpse	r24, r1
    1750:	ea cf       	rjmp	.-44     	; 0x1726 <Endpoint_ClearStatusStage+0x8>
    1752:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1754:	80 91 e8 00 	lds	r24, 0x00E8
    1758:	8e 77       	andi	r24, 0x7E	; 126
    175a:	80 93 e8 00 	sts	0x00E8, r24
    175e:	08 95       	ret

00001760 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1760:	80 91 e4 00 	lds	r24, 0x00E4
    1764:	90 91 e5 00 	lds	r25, 0x00E5
    1768:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    176a:	20 91 ec 00 	lds	r18, 0x00EC
    176e:	20 ff       	sbrs	r18, 0
    1770:	21 c0       	rjmp	.+66     	; 0x17b4 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1772:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1776:	20 fd       	sbrc	r18, 0
    1778:	21 c0       	rjmp	.+66     	; 0x17bc <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    177a:	20 91 01 02 	lds	r18, 0x0201

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    177e:	22 23       	and	r18, r18
    1780:	89 f0       	breq	.+34     	; 0x17a4 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1782:	25 30       	cpi	r18, 0x05	; 5
    1784:	89 f0       	breq	.+34     	; 0x17a8 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1786:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    178a:	25 fd       	sbrc	r18, 5
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <Endpoint_WaitUntilReady+0x4c>
    178e:	20 91 e4 00 	lds	r18, 0x00E4
    1792:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1796:	28 17       	cp	r18, r24
    1798:	39 07       	cpc	r19, r25
    179a:	39 f3       	breq	.-50     	; 0x176a <Endpoint_WaitUntilReady+0xa>
    179c:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    179e:	41 f0       	breq	.+16     	; 0x17b0 <Endpoint_WaitUntilReady+0x50>
    17a0:	c9 01       	movw	r24, r18
    17a2:	e3 cf       	rjmp	.-58     	; 0x176a <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    17b4:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    17b8:	22 ff       	sbrs	r18, 2
    17ba:	df cf       	rjmp	.-66     	; 0x177a <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	08 95       	ret

000017c0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    17c0:	0e 94 4e 0c 	call	0x189c	; 0x189c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17c4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    17c8:	e0 ee       	ldi	r30, 0xE0	; 224
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    17d2:	e8 ed       	ldi	r30, 0xD8	; 216
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 77       	andi	r24, 0x7F	; 127
    17da:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17dc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    17de:	a7 ed       	ldi	r26, 0xD7	; 215
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	8c 91       	ld	r24, X
    17e4:	8e 7f       	andi	r24, 0xFE	; 254
    17e6:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    17e8:	80 81       	ld	r24, Z
    17ea:	8f 7e       	andi	r24, 0xEF	; 239
    17ec:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    17ee:	10 92 00 02 	sts	0x0200, r1
    17f2:	08 95       	ret

000017f4 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    17fc:	0e 94 4e 0c 	call	0x189c	; 0x189c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1800:	0e 94 56 0c 	call	0x18ac	; 0x18ac <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1804:	c8 ed       	ldi	r28, 0xD8	; 216
    1806:	d0 e0       	ldi	r29, 0x00	; 0
    1808:	88 81       	ld	r24, Y
    180a:	8f 77       	andi	r24, 0x7F	; 127
    180c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    180e:	88 81       	ld	r24, Y
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1814:	88 81       	ld	r24, Y
    1816:	8f 7d       	andi	r24, 0xDF	; 223
    1818:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    181a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    181c:	10 92 01 02 	sts	0x0201, r1
	USB_Device_ConfigurationNumber  = 0;
    1820:	10 92 fd 01 	sts	0x01FD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1824:	10 92 ff 01 	sts	0x01FF, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1828:	10 92 fe 01 	sts	0x01FE, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    182c:	00 ee       	ldi	r16, 0xE0	; 224
    182e:	10 e0       	ldi	r17, 0x00	; 0
    1830:	f8 01       	movw	r30, r16
    1832:	80 81       	ld	r24, Z
    1834:	8b 7f       	andi	r24, 0xFB	; 251
    1836:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1838:	88 81       	ld	r24, Y
    183a:	81 60       	ori	r24, 0x01	; 1
    183c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    183e:	42 e0       	ldi	r20, 0x02	; 2
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1848:	e1 ee       	ldi	r30, 0xE1	; 225
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8e 7f       	andi	r24, 0xFE	; 254
    1850:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1852:	e2 ee       	ldi	r30, 0xE2	; 226
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	81 60       	ori	r24, 0x01	; 1
    185a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    185c:	80 81       	ld	r24, Z
    185e:	88 60       	ori	r24, 0x08	; 8
    1860:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1862:	f8 01       	movw	r30, r16
    1864:	80 81       	ld	r24, Z
    1866:	8e 7f       	andi	r24, 0xFE	; 254
    1868:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    186a:	88 81       	ld	r24, Y
    186c:	80 61       	ori	r24, 0x10	; 16
    186e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    187a:	e8 ed       	ldi	r30, 0xD8	; 216
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8f 7e       	andi	r24, 0xEF	; 239
    1882:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1884:	e7 ed       	ldi	r30, 0xD7	; 215
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	81 60       	ori	r24, 0x01	; 1
    188c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	80 93 00 02 	sts	0x0200, r24

	USB_ResetInterface();
    1898:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <USB_ResetInterface>

0000189c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    189c:	e8 ed       	ldi	r30, 0xD8	; 216
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    18a6:	10 92 e2 00 	sts	0x00E2, r1
    18aa:	08 95       	ret

000018ac <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    18ac:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    18b0:	10 92 e1 00 	sts	0x00E1, r1
    18b4:	08 95       	ret

000018b6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    18d8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18dc:	82 ff       	sbrs	r24, 2
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    18e0:	80 91 e2 00 	lds	r24, 0x00E2
    18e4:	82 ff       	sbrs	r24, 2
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    18e8:	80 91 e1 00 	lds	r24, 0x00E1
    18ec:	8b 7f       	andi	r24, 0xFB	; 251
    18ee:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    18f2:	0e 94 66 08 	call	0x10cc	; 0x10cc <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    18f6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    18fa:	80 ff       	sbrs	r24, 0
    18fc:	1f c0       	rjmp	.+62     	; 0x193c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    18fe:	80 91 d8 00 	lds	r24, 0x00D8
    1902:	80 ff       	sbrs	r24, 0
    1904:	1b c0       	rjmp	.+54     	; 0x193c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1906:	80 91 da 00 	lds	r24, 0x00DA
    190a:	8e 7f       	andi	r24, 0xFE	; 254
    190c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1910:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1914:	80 ff       	sbrs	r24, 0
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1918:	80 e1       	ldi	r24, 0x10	; 16
    191a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    191c:	82 e1       	ldi	r24, 0x12	; 18
    191e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1920:	09 b4       	in	r0, 0x29	; 41
    1922:	00 fe       	sbrs	r0, 0
    1924:	fd cf       	rjmp	.-6      	; 0x1920 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	80 93 01 02 	sts	0x0201, r24
			EVENT_USB_Device_Connect();
    192c:	0e 94 4c 08 	call	0x1098	; 0x1098 <EVENT_USB_Device_Connect>
    1930:	05 c0       	rjmp	.+10     	; 0x193c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1932:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1934:	10 92 01 02 	sts	0x0201, r1
			EVENT_USB_Device_Disconnect();
    1938:	0e 94 5e 08 	call	0x10bc	; 0x10bc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    193c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1940:	80 ff       	sbrs	r24, 0
    1942:	19 c0       	rjmp	.+50     	; 0x1976 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1944:	80 91 e2 00 	lds	r24, 0x00E2
    1948:	80 ff       	sbrs	r24, 0
    194a:	15 c0       	rjmp	.+42     	; 0x1976 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    194c:	80 91 e2 00 	lds	r24, 0x00E2
    1950:	8e 7f       	andi	r24, 0xFE	; 254
    1952:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1956:	80 91 e2 00 	lds	r24, 0x00E2
    195a:	80 61       	ori	r24, 0x10	; 16
    195c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1960:	80 91 d8 00 	lds	r24, 0x00D8
    1964:	80 62       	ori	r24, 0x20	; 32
    1966:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    196a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    196c:	85 e0       	ldi	r24, 0x05	; 5
    196e:	80 93 01 02 	sts	0x0201, r24
		EVENT_USB_Device_Suspend();
    1972:	0e 94 80 09 	call	0x1300	; 0x1300 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1976:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    197a:	84 ff       	sbrs	r24, 4
    197c:	30 c0       	rjmp	.+96     	; 0x19de <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    197e:	80 91 e2 00 	lds	r24, 0x00E2
    1982:	84 ff       	sbrs	r24, 4
    1984:	2c c0       	rjmp	.+88     	; 0x19de <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1986:	80 e1       	ldi	r24, 0x10	; 16
    1988:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    198a:	82 e1       	ldi	r24, 0x12	; 18
    198c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    198e:	09 b4       	in	r0, 0x29	; 41
    1990:	00 fe       	sbrs	r0, 0
    1992:	fd cf       	rjmp	.-6      	; 0x198e <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1994:	80 91 d8 00 	lds	r24, 0x00D8
    1998:	8f 7d       	andi	r24, 0xDF	; 223
    199a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    199e:	80 91 e1 00 	lds	r24, 0x00E1
    19a2:	8f 7e       	andi	r24, 0xEF	; 239
    19a4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    19a8:	80 91 e2 00 	lds	r24, 0x00E2
    19ac:	8f 7e       	andi	r24, 0xEF	; 239
    19ae:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    19b2:	80 91 e2 00 	lds	r24, 0x00E2
    19b6:	81 60       	ori	r24, 0x01	; 1
    19b8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    19bc:	80 91 fd 01 	lds	r24, 0x01FD
    19c0:	88 23       	and	r24, r24
    19c2:	11 f0       	breq	.+4      	; 0x19c8 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19c8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    19cc:	87 ff       	sbrs	r24, 7
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <__vector_10+0x11e>
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <__vector_10+0x120>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 01 02 	sts	0x0201, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    19da:	0e 94 dd 09 	call	0x13ba	; 0x13ba <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    19de:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    19e2:	83 ff       	sbrs	r24, 3
    19e4:	29 c0       	rjmp	.+82     	; 0x1a38 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    19e6:	80 91 e2 00 	lds	r24, 0x00E2
    19ea:	83 ff       	sbrs	r24, 3
    19ec:	25 c0       	rjmp	.+74     	; 0x1a38 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    19ee:	80 91 e1 00 	lds	r24, 0x00E1
    19f2:	87 7f       	andi	r24, 0xF7	; 247
    19f4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	80 93 01 02 	sts	0x0201, r24
		USB_Device_ConfigurationNumber = 0;
    19fe:	10 92 fd 01 	sts	0x01FD, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1a02:	80 91 e1 00 	lds	r24, 0x00E1
    1a06:	8e 7f       	andi	r24, 0xFE	; 254
    1a08:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a0c:	80 91 e2 00 	lds	r24, 0x00E2
    1a10:	8e 7f       	andi	r24, 0xFE	; 254
    1a12:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a16:	80 91 e2 00 	lds	r24, 0x00E2
    1a1a:	80 61       	ori	r24, 0x10	; 16
    1a1c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a20:	42 e0       	ldi	r20, 0x02	; 2
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1a2a:	80 91 f0 00 	lds	r24, 0x00F0
    1a2e:	88 60       	ori	r24, 0x08	; 8
    1a30:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1a34:	0e 94 65 08 	call	0x10ca	; 0x10ca <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a38:	ff 91       	pop	r31
    1a3a:	ef 91       	pop	r30
    1a3c:	bf 91       	pop	r27
    1a3e:	af 91       	pop	r26
    1a40:	9f 91       	pop	r25
    1a42:	8f 91       	pop	r24
    1a44:	7f 91       	pop	r23
    1a46:	6f 91       	pop	r22
    1a48:	5f 91       	pop	r21
    1a4a:	4f 91       	pop	r20
    1a4c:	3f 91       	pop	r19
    1a4e:	2f 91       	pop	r18
    1a50:	0f 90       	pop	r0
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	0f 90       	pop	r0
    1a56:	1f 90       	pop	r1
    1a58:	18 95       	reti

00001a5a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1a5a:	1f 92       	push	r1
    1a5c:	0f 92       	push	r0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	0f 92       	push	r0
    1a62:	11 24       	eor	r1, r1
    1a64:	2f 93       	push	r18
    1a66:	3f 93       	push	r19
    1a68:	4f 93       	push	r20
    1a6a:	5f 93       	push	r21
    1a6c:	6f 93       	push	r22
    1a6e:	7f 93       	push	r23
    1a70:	8f 93       	push	r24
    1a72:	9f 93       	push	r25
    1a74:	af 93       	push	r26
    1a76:	bf 93       	push	r27
    1a78:	cf 93       	push	r28
    1a7a:	ef 93       	push	r30
    1a7c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a7e:	c0 91 e9 00 	lds	r28, 0x00E9
    1a82:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a84:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a88:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1a8c:	80 91 f0 00 	lds	r24, 0x00F0
    1a90:	87 7f       	andi	r24, 0xF7	; 247
    1a92:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1a96:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1a98:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <USB_Device_ProcessControlRequest>
    1a9c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1aa0:	80 91 f0 00 	lds	r24, 0x00F0
    1aa4:	88 60       	ori	r24, 0x08	; 8
    1aa6:	80 93 f0 00 	sts	0x00F0, r24
    1aaa:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1aae:	ff 91       	pop	r31
    1ab0:	ef 91       	pop	r30
    1ab2:	cf 91       	pop	r28
    1ab4:	bf 91       	pop	r27
    1ab6:	af 91       	pop	r26
    1ab8:	9f 91       	pop	r25
    1aba:	8f 91       	pop	r24
    1abc:	7f 91       	pop	r23
    1abe:	6f 91       	pop	r22
    1ac0:	5f 91       	pop	r21
    1ac2:	4f 91       	pop	r20
    1ac4:	3f 91       	pop	r19
    1ac6:	2f 91       	pop	r18
    1ac8:	0f 90       	pop	r0
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	0f 90       	pop	r0
    1ace:	1f 90       	pop	r1
    1ad0:	18 95       	reti

00001ad2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	aa 97       	sbiw	r28, 0x2a	; 42
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
    1ae8:	e2 e0       	ldi	r30, 0x02	; 2
    1aea:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1aec:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1af0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1af2:	22 e0       	ldi	r18, 0x02	; 2
    1af4:	ea 30       	cpi	r30, 0x0A	; 10
    1af6:	f2 07       	cpc	r31, r18
    1af8:	c9 f7       	brne	.-14     	; 0x1aec <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1afa:	0e 94 bf 08 	call	0x117e	; 0x117e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1afe:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1b02:	83 ff       	sbrs	r24, 3
    1b04:	1c c1       	rjmp	.+568    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1b06:	20 91 02 02 	lds	r18, 0x0202

		switch (USB_ControlRequest.bRequest)
    1b0a:	30 91 03 02 	lds	r19, 0x0203
    1b0e:	83 2f       	mov	r24, r19
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	8a 30       	cpi	r24, 0x0A	; 10
    1b14:	91 05       	cpc	r25, r1
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <USB_Device_ProcessControlRequest+0x48>
    1b18:	12 c1       	rjmp	.+548    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	ea 5a       	subi	r30, 0xAA	; 170
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b24:	20 38       	cpi	r18, 0x80	; 128
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <USB_Device_ProcessControlRequest+0x76>
    1b28:	22 38       	cpi	r18, 0x82	; 130
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <USB_Device_ProcessControlRequest+0x5c>
    1b2c:	08 c1       	rjmp	.+528    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b2e:	80 91 06 02 	lds	r24, 0x0206
    1b32:	8f 70       	andi	r24, 0x0F	; 15
    1b34:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b38:	80 91 eb 00 	lds	r24, 0x00EB
    1b3c:	85 fb       	bst	r24, 5
    1b3e:	88 27       	eor	r24, r24
    1b40:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b42:	10 92 e9 00 	sts	0x00E9, r1
    1b46:	06 c0       	rjmp	.+12     	; 0x1b54 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1b48:	80 91 fe 01 	lds	r24, 0x01FE
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1b4c:	90 91 ff 01 	lds	r25, 0x01FF
    1b50:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1b52:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b54:	90 91 e8 00 	lds	r25, 0x00E8
    1b58:	97 7f       	andi	r25, 0xF7	; 247
    1b5a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1b5e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1b62:	10 92 f1 00 	sts	0x00F1, r1
    1b66:	c5 c0       	rjmp	.+394    	; 0x1cf2 <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b68:	82 2f       	mov	r24, r18
    1b6a:	8d 7f       	andi	r24, 0xFD	; 253
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <USB_Device_ProcessControlRequest+0x9e>
    1b6e:	e7 c0       	rjmp	.+462    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1b70:	22 23       	and	r18, r18
    1b72:	19 f0       	breq	.+6      	; 0x1b7a <USB_Device_ProcessControlRequest+0xa8>
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	61 f0       	breq	.+24     	; 0x1b90 <USB_Device_ProcessControlRequest+0xbe>
    1b78:	e2 c0       	rjmp	.+452    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b7a:	80 91 04 02 	lds	r24, 0x0204
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <USB_Device_ProcessControlRequest+0xb2>
    1b82:	dd c0       	rjmp	.+442    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b84:	33 30       	cpi	r19, 0x03	; 3
    1b86:	09 f0       	breq	.+2      	; 0x1b8a <USB_Device_ProcessControlRequest+0xb8>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	80 93 ff 01 	sts	0x01FF, r24
    1b8e:	28 c0       	rjmp	.+80     	; 0x1be0 <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b90:	80 91 04 02 	lds	r24, 0x0204
    1b94:	81 11       	cpse	r24, r1
    1b96:	24 c0       	rjmp	.+72     	; 0x1be0 <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b98:	20 91 06 02 	lds	r18, 0x0206
    1b9c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <USB_Device_ProcessControlRequest+0xd0>
    1ba0:	ce c0       	rjmp	.+412    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ba2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1ba6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1baa:	80 ff       	sbrs	r24, 0
    1bac:	19 c0       	rjmp	.+50     	; 0x1be0 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1bae:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1bb2:	33 30       	cpi	r19, 0x03	; 3
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <USB_Device_ProcessControlRequest+0xe8>
    1bb6:	80 62       	ori	r24, 0x20	; 32
    1bb8:	11 c0       	rjmp	.+34     	; 0x1bdc <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1bba:	80 61       	ori	r24, 0x10	; 16
    1bbc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <USB_Device_ProcessControlRequest+0xf8>
    1bc8:	88 0f       	add	r24, r24
    1bca:	0a 94       	dec	r0
    1bcc:	ea f7       	brpl	.-6      	; 0x1bc8 <USB_Device_ProcessControlRequest+0xf6>
    1bce:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1bd2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1bd6:	80 91 eb 00 	lds	r24, 0x00EB
    1bda:	88 60       	ori	r24, 0x08	; 8
    1bdc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1be0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1be4:	80 91 e8 00 	lds	r24, 0x00E8
    1be8:	87 7f       	andi	r24, 0xF7	; 247
    1bea:	86 c0       	rjmp	.+268    	; 0x1cf8 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1bec:	21 11       	cpse	r18, r1
    1bee:	a7 c0       	rjmp	.+334    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1bf0:	10 91 04 02 	lds	r17, 0x0204
    1bf4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1bf6:	80 91 e3 00 	lds	r24, 0x00E3
    1bfa:	80 78       	andi	r24, 0x80	; 128
    1bfc:	81 2b       	or	r24, r17
    1bfe:	80 93 e3 00 	sts	0x00E3, r24
    1c02:	80 91 e8 00 	lds	r24, 0x00E8
    1c06:	87 7f       	andi	r24, 0xF7	; 247
    1c08:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1c0c:	0e 94 8f 0b 	call	0x171e	; 0x171e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c10:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1c14:	80 ff       	sbrs	r24, 0
    1c16:	fc cf       	rjmp	.-8      	; 0x1c10 <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1c18:	80 91 e3 00 	lds	r24, 0x00E3
    1c1c:	80 68       	ori	r24, 0x80	; 128
    1c1e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1c22:	11 23       	and	r17, r17
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <USB_Device_ProcessControlRequest+0x158>
    1c26:	83 e0       	ldi	r24, 0x03	; 3
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <USB_Device_ProcessControlRequest+0x15a>
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	80 93 01 02 	sts	0x0201, r24
    1c30:	86 c0       	rjmp	.+268    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1c32:	20 58       	subi	r18, 0x80	; 128
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <USB_Device_ProcessControlRequest+0x168>
    1c38:	82 c0       	rjmp	.+260    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1c3a:	80 91 04 02 	lds	r24, 0x0204
    1c3e:	90 91 05 02 	lds	r25, 0x0205
    1c42:	8c 3d       	cpi	r24, 0xDC	; 220
    1c44:	23 e0       	ldi	r18, 0x03	; 3
    1c46:	92 07       	cpc	r25, r18
    1c48:	79 f5       	brne	.+94     	; 0x1ca8 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1c4a:	83 e0       	ldi	r24, 0x03	; 3
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1c4e:	8a e2       	ldi	r24, 0x2A	; 42
    1c50:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1c52:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1c54:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1c56:	de 01       	movw	r26, r28
    1c58:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1c5c:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1c5e:	51 e2       	ldi	r21, 0x21	; 33
    1c60:	e3 2f       	mov	r30, r19
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	50 93 57 00 	sts	0x0057, r21
    1c68:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1c6a:	20 ff       	sbrs	r18, 0
    1c6c:	03 c0       	rjmp	.+6      	; 0x1c74 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    1c6e:	e2 95       	swap	r30
    1c70:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1c72:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1c74:	ef 70       	andi	r30, 0x0F	; 15
    1c76:	8e 2f       	mov	r24, r30
    1c78:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c7a:	ea 30       	cpi	r30, 0x0A	; 10
    1c7c:	10 f0       	brcs	.+4      	; 0x1c82 <USB_Device_ProcessControlRequest+0x1b0>
    1c7e:	c7 96       	adiw	r24, 0x37	; 55
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <USB_Device_ProcessControlRequest+0x1b2>
    1c82:	c0 96       	adiw	r24, 0x30	; 48
    1c84:	8d 93       	st	X+, r24
    1c86:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c88:	2f 5f       	subi	r18, 0xFF	; 255
    1c8a:	24 31       	cpi	r18, 0x14	; 20
    1c8c:	49 f7       	brne	.-46     	; 0x1c60 <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1c8e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c90:	80 91 e8 00 	lds	r24, 0x00E8
    1c94:	87 7f       	andi	r24, 0xF7	; 247
    1c96:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c9a:	6a e2       	ldi	r22, 0x2A	; 42
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	0e 94 97 0a 	call	0x152e	; 0x152e <Endpoint_Write_Control_Stream_LE>
    1ca6:	14 c0       	rjmp	.+40     	; 0x1cd0 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ca8:	ae 01       	movw	r20, r28
    1caa:	4f 5f       	subi	r20, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	60 91 06 02 	lds	r22, 0x0206
    1cb2:	0e 94 df 09 	call	0x13be	; 0x13be <CALLBACK_USB_GetDescriptor>
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <USB_Device_ProcessControlRequest+0x1ea>
    1cba:	41 c0       	rjmp	.+130    	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
    1cbc:	20 91 e8 00 	lds	r18, 0x00E8
    1cc0:	27 7f       	andi	r18, 0xF7	; 247
    1cc2:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1cd0:	80 91 e8 00 	lds	r24, 0x00E8
    1cd4:	8b 77       	andi	r24, 0x7B	; 123
    1cd6:	80 93 e8 00 	sts	0x00E8, r24
    1cda:	31 c0       	rjmp	.+98     	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1cdc:	20 38       	cpi	r18, 0x80	; 128
    1cde:	79 f5       	brne	.+94     	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ce0:	80 91 e8 00 	lds	r24, 0x00E8
    1ce4:	87 7f       	andi	r24, 0xF7	; 247
    1ce6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1cea:	80 91 fd 01 	lds	r24, 0x01FD
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cee:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cf2:	80 91 e8 00 	lds	r24, 0x00E8
    1cf6:	8e 77       	andi	r24, 0x7E	; 126
    1cf8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1cfc:	0e 94 8f 0b 	call	0x171e	; 0x171e <Endpoint_ClearStatusStage>
    1d00:	1e c0       	rjmp	.+60     	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1d02:	21 11       	cpse	r18, r1
    1d04:	1c c0       	rjmp	.+56     	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1d06:	90 91 04 02 	lds	r25, 0x0204
    1d0a:	92 30       	cpi	r25, 0x02	; 2
    1d0c:	c0 f4       	brcc	.+48     	; 0x1d3e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d0e:	80 91 e8 00 	lds	r24, 0x00E8
    1d12:	87 7f       	andi	r24, 0xF7	; 247
    1d14:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1d18:	90 93 fd 01 	sts	0x01FD, r25

	Endpoint_ClearStatusStage();
    1d1c:	0e 94 8f 0b 	call	0x171e	; 0x171e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1d20:	80 91 fd 01 	lds	r24, 0x01FD
    1d24:	81 11       	cpse	r24, r1
    1d26:	04 c0       	rjmp	.+8      	; 0x1d30 <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d28:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1d2c:	87 ff       	sbrs	r24, 7
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <USB_Device_ProcessControlRequest+0x262>
    1d30:	84 e0       	ldi	r24, 0x04	; 4
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <USB_Device_ProcessControlRequest+0x264>
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	80 93 01 02 	sts	0x0201, r24

	EVENT_USB_Device_ConfigurationChanged();
    1d3a:	0e 94 a6 08 	call	0x114c	; 0x114c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d3e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1d42:	83 ff       	sbrs	r24, 3
    1d44:	0a c0       	rjmp	.+20     	; 0x1d5a <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d46:	80 91 e8 00 	lds	r24, 0x00E8
    1d4a:	87 7f       	andi	r24, 0xF7	; 247
    1d4c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d50:	80 91 eb 00 	lds	r24, 0x00EB
    1d54:	80 62       	ori	r24, 0x20	; 32
    1d56:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1d5a:	aa 96       	adiw	r28, 0x2a	; 42
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	08 95       	ret

00001d6e <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1d6e:	90 93 7d 01 	sts	0x017D, r25
    1d72:	80 93 7c 01 	sts	0x017C, r24
    1d76:	08 95       	ret

00001d78 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1d78:	e0 91 7c 01 	lds	r30, 0x017C
    1d7c:	f0 91 7d 01 	lds	r31, 0x017D
    1d80:	30 97       	sbiw	r30, 0x00	; 0
    1d82:	21 f0       	breq	.+8      	; 0x1d8c <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1d84:	01 90       	ld	r0, Z+
    1d86:	f0 81       	ld	r31, Z
    1d88:	e0 2d       	mov	r30, r0
    1d8a:	09 94       	ijmp
}
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	08 95       	ret

00001d90 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	8c 01       	movw	r16, r24
    if (!driver) return;
    1d9c:	e0 91 7c 01 	lds	r30, 0x017C
    1da0:	f0 91 7d 01 	lds	r31, 0x017D
    1da4:	30 97       	sbiw	r30, 0x00	; 0
    1da6:	99 f1       	breq	.+102    	; 0x1e0e <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    1da8:	02 80       	ldd	r0, Z+2	; 0x02
    1daa:	f3 81       	ldd	r31, Z+3	; 0x03
    1dac:	e0 2d       	mov	r30, r0
    1dae:	09 95       	icall

    if (debug_keyboard) {
    1db0:	80 91 ec 01 	lds	r24, 0x01EC
    1db4:	82 ff       	sbrs	r24, 2
    1db6:	2b c0       	rjmp	.+86     	; 0x1e0e <host_keyboard_send+0x7e>
        dprint("keyboard: ");
    1db8:	80 ff       	sbrs	r24, 0
    1dba:	04 c0       	rjmp	.+8      	; 0x1dc4 <host_keyboard_send+0x34>
    1dbc:	8d e5       	ldi	r24, 0x5D	; 93
    1dbe:	93 e0       	ldi	r25, 0x03	; 3
    1dc0:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    1dc4:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1dc6:	80 e2       	ldi	r24, 0x20	; 32
    1dc8:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1dca:	07 e5       	ldi	r16, 0x57	; 87
    1dcc:	13 e0       	ldi	r17, 0x03	; 3
    1dce:	80 91 ec 01 	lds	r24, 0x01EC
    1dd2:	80 ff       	sbrs	r24, 0
    1dd4:	0b c0       	rjmp	.+22     	; 0x1dec <host_keyboard_send+0x5c>
    1dd6:	88 81       	ld	r24, Y
    1dd8:	1f 92       	push	r1
    1dda:	8f 93       	push	r24
    1ddc:	1f 93       	push	r17
    1dde:	0f 93       	push	r16
    1de0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	fa 94       	dec	r15
    1dee:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1df0:	f1 10       	cpse	r15, r1
    1df2:	ed cf       	rjmp	.-38     	; 0x1dce <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1df4:	80 91 ec 01 	lds	r24, 0x01EC
    1df8:	80 ff       	sbrs	r24, 0
    1dfa:	09 c0       	rjmp	.+18     	; 0x1e0e <host_keyboard_send+0x7e>
    1dfc:	85 e5       	ldi	r24, 0x55	; 85
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1e0a:	0c 94 5f 05 	jmp	0xabe	; 0xabe <xputs>
    }
}
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	ff 90       	pop	r15
    1e18:	08 95       	ret

00001e1a <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    1e1a:	e0 91 7c 01 	lds	r30, 0x017C
    1e1e:	f0 91 7d 01 	lds	r31, 0x017D
    1e22:	30 97       	sbiw	r30, 0x00	; 0
    1e24:	21 f0       	breq	.+8      	; 0x1e2e <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    1e26:	04 80       	ldd	r0, Z+4	; 0x04
    1e28:	f5 81       	ldd	r31, Z+5	; 0x05
    1e2a:	e0 2d       	mov	r30, r0
    1e2c:	09 94       	ijmp
    1e2e:	08 95       	ret

00001e30 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
    if (report == last_system_report) return;
    1e36:	80 91 7a 01 	lds	r24, 0x017A
    1e3a:	90 91 7b 01 	lds	r25, 0x017B
    1e3e:	c8 17       	cp	r28, r24
    1e40:	d9 07       	cpc	r29, r25
    1e42:	09 f1       	breq	.+66     	; 0x1e86 <host_system_send+0x56>
    last_system_report = report;
    1e44:	d0 93 7b 01 	sts	0x017B, r29
    1e48:	c0 93 7a 01 	sts	0x017A, r28

    if (!driver) return;
    1e4c:	e0 91 7c 01 	lds	r30, 0x017C
    1e50:	f0 91 7d 01 	lds	r31, 0x017D
    1e54:	30 97       	sbiw	r30, 0x00	; 0
    1e56:	b9 f0       	breq	.+46     	; 0x1e86 <host_system_send+0x56>
    (*driver->send_system)(report);
    1e58:	06 80       	ldd	r0, Z+6	; 0x06
    1e5a:	f7 81       	ldd	r31, Z+7	; 0x07
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	ce 01       	movw	r24, r28
    1e60:	09 95       	icall

    if (debug_keyboard) {
    1e62:	80 91 ec 01 	lds	r24, 0x01EC
    1e66:	82 ff       	sbrs	r24, 2
    1e68:	0e c0       	rjmp	.+28     	; 0x1e86 <host_system_send+0x56>
        dprintf("system: %04X\n", report);
    1e6a:	80 ff       	sbrs	r24, 0
    1e6c:	0c c0       	rjmp	.+24     	; 0x1e86 <host_system_send+0x56>
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	87 e4       	ldi	r24, 0x47	; 71
    1e74:	93 e0       	ldi	r25, 0x03	; 3
    1e76:	9f 93       	push	r25
    1e78:	8f 93       	push	r24
    1e7a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    }
}
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <host_consumer_send>:

void host_consumer_send(uint16_t report)
{
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
    1e90:	ec 01       	movw	r28, r24
    if (report == last_consumer_report) return;
    1e92:	80 91 78 01 	lds	r24, 0x0178
    1e96:	90 91 79 01 	lds	r25, 0x0179
    1e9a:	c8 17       	cp	r28, r24
    1e9c:	d9 07       	cpc	r29, r25
    1e9e:	09 f1       	breq	.+66     	; 0x1ee2 <host_consumer_send+0x56>
    last_consumer_report = report;
    1ea0:	d0 93 79 01 	sts	0x0179, r29
    1ea4:	c0 93 78 01 	sts	0x0178, r28

    if (!driver) return;
    1ea8:	e0 91 7c 01 	lds	r30, 0x017C
    1eac:	f0 91 7d 01 	lds	r31, 0x017D
    1eb0:	30 97       	sbiw	r30, 0x00	; 0
    1eb2:	b9 f0       	breq	.+46     	; 0x1ee2 <host_consumer_send+0x56>
    (*driver->send_consumer)(report);
    1eb4:	00 84       	ldd	r0, Z+8	; 0x08
    1eb6:	f1 85       	ldd	r31, Z+9	; 0x09
    1eb8:	e0 2d       	mov	r30, r0
    1eba:	ce 01       	movw	r24, r28
    1ebc:	09 95       	icall

    if (debug_keyboard) {
    1ebe:	80 91 ec 01 	lds	r24, 0x01EC
    1ec2:	82 ff       	sbrs	r24, 2
    1ec4:	0e c0       	rjmp	.+28     	; 0x1ee2 <host_consumer_send+0x56>
        dprintf("consumer: %04X\n", report);
    1ec6:	80 ff       	sbrs	r24, 0
    1ec8:	0c c0       	rjmp	.+24     	; 0x1ee2 <host_consumer_send+0x56>
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	87 e3       	ldi	r24, 0x37	; 55
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	9f 93       	push	r25
    1ed4:	8f 93       	push	r24
    1ed6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    }
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <keyboard_setup>:
#endif


void keyboard_setup(void)
{
    matrix_setup();
    1ee8:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <matrix_setup>

00001eec <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1eec:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <timer_init>
    matrix_init();
    1ef0:	0c 94 01 06 	jmp	0xc02	; 0xc02 <matrix_init>

00001ef4 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1ef4:	cf 92       	push	r12
    1ef6:	df 92       	push	r13
    1ef8:	ef 92       	push	r14
    1efa:	ff 92       	push	r15
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <keyboard_task+0x12>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <keyboard_task+0x14>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <keyboard_task+0x16>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f0e:	0e 94 2a 06 	call	0xc54	; 0xc54 <matrix_scan>
    1f12:	3f e7       	ldi	r19, 0x7F	; 127
    1f14:	e3 2e       	mov	r14, r19
    1f16:	31 e0       	ldi	r19, 0x01	; 1
    1f18:	f3 2e       	mov	r15, r19
    1f1a:	00 e0       	ldi	r16, 0x00	; 0
    1f1c:	10 e0       	ldi	r17, 0x00	; 0
    1f1e:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1f20:	80 2f       	mov	r24, r16
    1f22:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    1f26:	f7 01       	movw	r30, r14
    1f28:	d1 90       	ld	r13, Z+
    1f2a:	7f 01       	movw	r14, r30
    1f2c:	d8 26       	eor	r13, r24
        if (matrix_change) {
    1f2e:	b1 f4       	brne	.+44     	; 0x1f5c <keyboard_task+0x68>
    1f30:	0f 5f       	subi	r16, 0xFF	; 255
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1f34:	08 30       	cpi	r16, 0x08	; 8
    1f36:	11 05       	cpc	r17, r1
    1f38:	91 f7       	brne	.-28     	; 0x1f1e <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	1b 82       	std	Y+3, r1	; 0x03
    1f42:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    1f46:	81 60       	ori	r24, 0x01	; 1
    1f48:	78 2f       	mov	r23, r24
    1f4a:	9d 83       	std	Y+5, r25	; 0x05
    1f4c:	8c 83       	std	Y+4, r24	; 0x04
    1f4e:	49 81       	ldd	r20, Y+1	; 0x01
    1f50:	5a 81       	ldd	r21, Y+2	; 0x02
    1f52:	6b 81       	ldd	r22, Y+3	; 0x03
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	0e 94 6f 10 	call	0x20de	; 0x20de <action_exec>
    1f5a:	48 c0       	rjmp	.+144    	; 0x1fec <keyboard_task+0xf8>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1f5c:	90 91 ec 01 	lds	r25, 0x01EC
    1f60:	91 ff       	sbrs	r25, 1
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <keyboard_task+0x78>
    1f64:	8e 83       	std	Y+6, r24	; 0x06
    1f66:	0e 94 3b 10 	call	0x2076	; 0x2076 <matrix_print>
    1f6a:	8e 81       	ldd	r24, Y+6	; 0x06
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1f70:	4d 2d       	mov	r20, r13
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	92 2f       	mov	r25, r18
    1f76:	ba 01       	movw	r22, r20
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <keyboard_task+0x8c>
    1f7c:	75 95       	asr	r23
    1f7e:	67 95       	ror	r22
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <keyboard_task+0x88>
    1f84:	60 ff       	sbrs	r22, 0
    1f86:	2c c0       	rjmp	.+88     	; 0x1fe0 <keyboard_task+0xec>
                    keyevent_t e = (keyevent_t){
    1f88:	29 83       	std	Y+1, r18	; 0x01
    1f8a:	ca 82       	std	Y+2, r12	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1f8c:	ee 24       	eor	r14, r14
    1f8e:	e3 94       	inc	r14
    1f90:	f1 2c       	mov	r15, r1
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <keyboard_task+0xa4>
    1f94:	ee 0c       	add	r14, r14
    1f96:	ff 1c       	adc	r15, r15
    1f98:	9a 95       	dec	r25
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <keyboard_task+0xa0>
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	8e 21       	and	r24, r14
    1fa0:	9f 21       	and	r25, r15
    1fa2:	21 e0       	ldi	r18, 0x01	; 1
    1fa4:	89 2b       	or	r24, r25
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <keyboard_task+0xb6>
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    1faa:	2b 83       	std	Y+3, r18	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1fac:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    1fb0:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    1fb2:	78 2f       	mov	r23, r24
    1fb4:	9d 83       	std	Y+5, r25	; 0x05
    1fb6:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    1fb8:	49 81       	ldd	r20, Y+1	; 0x01
    1fba:	5a 81       	ldd	r21, Y+2	; 0x02
    1fbc:	6b 81       	ldd	r22, Y+3	; 0x03
    1fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc0:	0e 94 6f 10 	call	0x20de	; 0x20de <action_exec>
                    hook_matrix_change(e);
    1fc4:	49 81       	ldd	r20, Y+1	; 0x01
    1fc6:	5a 81       	ldd	r21, Y+2	; 0x02
    1fc8:	6b 81       	ldd	r22, Y+3	; 0x03
    1fca:	7c 81       	ldd	r23, Y+4	; 0x04
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	0e 94 56 1b 	call	0x36ac	; 0x36ac <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	e1 58       	subi	r30, 0x81	; 129
    1fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd8:	80 81       	ld	r24, Z
    1fda:	8e 25       	eor	r24, r14
    1fdc:	80 83       	st	Z, r24
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <keyboard_task+0xf8>
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1fe4:	28 30       	cpi	r18, 0x08	; 8
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	29 f6       	brne	.-118    	; 0x1f74 <keyboard_task+0x80>
    1fea:	a2 cf       	rjmp	.-188    	; 0x1f30 <keyboard_task+0x3c>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    1fec:	0e 94 55 1b 	call	0x36aa	; 0x36aa <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    1ff0:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1ff4:	10 91 7e 01 	lds	r17, 0x017E
    1ff8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <host_keyboard_leds>
    1ffc:	18 17       	cp	r17, r24
    1ffe:	41 f1       	breq	.+80     	; 0x2050 <keyboard_task+0x15c>
        led_status = host_keyboard_leds();
    2000:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <host_keyboard_leds>
    2004:	80 93 7e 01 	sts	0x017E, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    2008:	90 91 ec 01 	lds	r25, 0x01EC
    200c:	92 ff       	sbrs	r25, 2
    200e:	0e c0       	rjmp	.+28     	; 0x202c <keyboard_task+0x138>
    2010:	90 ff       	sbrs	r25, 0
    2012:	0c c0       	rjmp	.+24     	; 0x202c <keyboard_task+0x138>
    2014:	1f 92       	push	r1
    2016:	8f 93       	push	r24
    2018:	88 e6       	ldi	r24, 0x68	; 104
    201a:	93 e0       	ldi	r25, 0x03	; 3
    201c:	9f 93       	push	r25
    201e:	8f 93       	push	r24
    2020:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    202c:	80 91 7e 01 	lds	r24, 0x017E
    }
}
    2030:	26 96       	adiw	r28, 0x06	; 6
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    204c:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <hook_keyboard_leds_change>
    }
}
    2050:	26 96       	adiw	r28, 0x06	; 6
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	ff 90       	pop	r15
    2066:	ef 90       	pop	r14
    2068:	df 90       	pop	r13
    206a:	cf 90       	pop	r12
    206c:	08 95       	ret

0000206e <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    206e:	0c 94 02 07 	jmp	0xe04	; 0xe04 <led_set>

00002072 <matrix_clear>:
    return MATRIX_COLS;
}

__attribute__ ((weak))
void matrix_clear(void)
{
    2072:	08 95       	ret

00002074 <matrix_setup>:
}

__attribute__ ((weak))
void matrix_setup(void) {}
    2074:	08 95       	ret

00002076 <matrix_print>:
    return (matrix_get_row(row) & (1<<col));
}

__attribute__ ((weak))
void matrix_print(void)
{
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
#if (MATRIX_COLS <= 8)
    print("r/c 01234567\n");
    2082:	81 e8       	ldi	r24, 0x81	; 129
    2084:	93 e0       	ldi	r25, 0x03	; 3
    2086:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    208a:	c0 e0       	ldi	r28, 0x00	; 0
    208c:	d0 e0       	ldi	r29, 0x00	; 0
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {

#if (MATRIX_COLS <= 8)
        xprintf("%02X: %08b%s\n", row, bitrev(matrix_get_row(row)),
    208e:	8d e2       	ldi	r24, 0x2D	; 45
    2090:	e8 2e       	mov	r14, r24
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	f8 2e       	mov	r15, r24
    2096:	03 e7       	ldi	r16, 0x73	; 115
    2098:	13 e0       	ldi	r17, 0x03	; 3
    209a:	8c 2f       	mov	r24, r28
    209c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <matrix_get_row>
    20a0:	0e 94 43 1b 	call	0x3686	; 0x3686 <bitrev>
    20a4:	ff 92       	push	r15
    20a6:	ef 92       	push	r14
    20a8:	1f 92       	push	r1
    20aa:	8f 93       	push	r24
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	1f 93       	push	r17
    20b2:	0f 93       	push	r16
    20b4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    20b8:	21 96       	adiw	r28, 0x01	; 1
    print("r/c 0123456789ABCDEF\n");
#elif (MATRIX_COLS <= 32)
    print("r/c 0123456789ABCDEF0123456789ABCDEF\n");
#endif

    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    20ba:	8d b7       	in	r24, 0x3d	; 61
    20bc:	9e b7       	in	r25, 0x3e	; 62
    20be:	08 96       	adiw	r24, 0x08	; 8
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	9e bf       	out	0x3e, r25	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	8d bf       	out	0x3d, r24	; 61
    20ca:	c8 30       	cpi	r28, 0x08	; 8
    20cc:	d1 05       	cpc	r29, r1
    20ce:	29 f7       	brne	.-54     	; 0x209a <matrix_print+0x24>
#else
        ""
#endif
        );
    }
}
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	08 95       	ret

000020de <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	2b 97       	sbiw	r28, 0x0b	; 11
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	4f 83       	std	Y+7, r20	; 0x07
    20f4:	58 87       	std	Y+8, r21	; 0x08
    20f6:	69 87       	std	Y+9, r22	; 0x09
    20f8:	7a 87       	std	Y+10, r23	; 0x0a
    20fa:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    20fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2100:	89 2b       	or	r24, r25
    2102:	31 f0       	breq	.+12     	; 0x2110 <action_exec+0x32>
    2104:	5f 3f       	cpi	r21, 0xFF	; 255
    2106:	11 f0       	breq	.+4      	; 0x210c <action_exec+0x2e>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	03 c0       	rjmp	.+6      	; 0x2112 <action_exec+0x34>
    210c:	4f 3f       	cpi	r20, 0xFF	; 255
    210e:	e1 f7       	brne	.-8      	; 0x2108 <action_exec+0x2a>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    if (!IS_NOEVENT(event)) {
    2112:	81 11       	cpse	r24, r1
    2114:	07 c0       	rjmp	.+14     	; 0x2124 <action_exec+0x46>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    2116:	4f 81       	ldd	r20, Y+7	; 0x07
    2118:	58 85       	ldd	r21, Y+8	; 0x08
    211a:	69 85       	ldd	r22, Y+9	; 0x09
    211c:	7a 85       	ldd	r23, Y+10	; 0x0a
    211e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2120:	0e 94 56 1b 	call	0x36ac	; 0x36ac <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    2124:	de 01       	movw	r26, r28
    2126:	11 96       	adiw	r26, 0x01	; 1
    2128:	86 e0       	ldi	r24, 0x06	; 6
    212a:	fd 01       	movw	r30, r26
    212c:	11 92       	st	Z+, r1
    212e:	8a 95       	dec	r24
    2130:	e9 f7       	brne	.-6      	; 0x212c <action_exec+0x4e>
    2132:	85 e0       	ldi	r24, 0x05	; 5
    2134:	fe 01       	movw	r30, r28
    2136:	37 96       	adiw	r30, 0x07	; 7
    2138:	01 90       	ld	r0, Z+
    213a:	0d 92       	st	X+, r0
    213c:	8a 95       	dec	r24
    213e:	e1 f7       	brne	.-8      	; 0x2138 <action_exec+0x5a>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2140:	49 81       	ldd	r20, Y+1	; 0x01
    2142:	5a 81       	ldd	r21, Y+2	; 0x02
    2144:	6b 81       	ldd	r22, Y+3	; 0x03
    2146:	7c 81       	ldd	r23, Y+4	; 0x04
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2150:	2b 96       	adiw	r28, 0x0b	; 11
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2162:	cf 93       	push	r28
    2164:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2166:	88 23       	and	r24, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <register_code+0xa>
    216a:	a3 c0       	rjmp	.+326    	; 0x22b2 <register_code+0x150>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    216c:	8c ef       	ldi	r24, 0xFC	; 252
    216e:	8c 0f       	add	r24, r28
    2170:	81 3a       	cpi	r24, 0xA1	; 161
    2172:	48 f4       	brcc	.+18     	; 0x2186 <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2174:	8c 2f       	mov	r24, r28
    2176:	0e 94 07 22 	call	0x440e	; 0x440e <command_proc>
    217a:	81 11       	cpse	r24, r1
    217c:	9a c0       	rjmp	.+308    	; 0x22b2 <register_code+0x150>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    217e:	8c 2f       	mov	r24, r28
    2180:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <add_key>
    2184:	0c c0       	rjmp	.+24     	; 0x219e <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	8c 0f       	add	r24, r28
    218a:	88 30       	cpi	r24, 0x08	; 8
    218c:	58 f4       	brcc	.+22     	; 0x21a4 <register_code+0x42>
        add_mods(MOD_BIT(code));
    218e:	c7 70       	andi	r28, 0x07	; 7
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <register_code+0x34>
    2194:	88 0f       	add	r24, r24
    2196:	ca 95       	dec	r28
    2198:	ea f7       	brpl	.-6      	; 0x2194 <register_code+0x32>
    219a:	0e 94 9f 1a 	call	0x353e	; 0x353e <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    219e:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    21a0:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    21a4:	8b e5       	ldi	r24, 0x5B	; 91
    21a6:	8c 0f       	add	r24, r28
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	78 f4       	brcc	.+30     	; 0x21ca <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    21ac:	c5 3a       	cpi	r28, 0xA5	; 165
    21ae:	29 f0       	breq	.+10     	; 0x21ba <register_code+0x58>
    21b0:	c6 3a       	cpi	r28, 0xA6	; 166
    21b2:	31 f4       	brne	.+12     	; 0x21c0 <register_code+0x5e>
    21b4:	82 e8       	ldi	r24, 0x82	; 130
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <register_code+0x62>
    21ba:	81 e8       	ldi	r24, 0x81	; 129
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <register_code+0x62>
    21c0:	83 e8       	ldi	r24, 0x83	; 131
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    21c4:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    21c6:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    21ca:	88 e5       	ldi	r24, 0x58	; 88
    21cc:	8c 0f       	add	r24, r28
    21ce:	85 31       	cpi	r24, 0x15	; 21
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <register_code+0x72>
    21d2:	6f c0       	rjmp	.+222    	; 0x22b2 <register_code+0x150>
        host_consumer_send(KEYCODE2CONSUMER(code));
    21d4:	c8 3a       	cpi	r28, 0xA8	; 168
    21d6:	61 f1       	breq	.+88     	; 0x2230 <register_code+0xce>
    21d8:	c9 3a       	cpi	r28, 0xA9	; 169
    21da:	69 f1       	breq	.+90     	; 0x2236 <register_code+0xd4>
    21dc:	ca 3a       	cpi	r28, 0xAA	; 170
    21de:	71 f1       	breq	.+92     	; 0x223c <register_code+0xda>
    21e0:	cb 3a       	cpi	r28, 0xAB	; 171
    21e2:	79 f1       	breq	.+94     	; 0x2242 <register_code+0xe0>
    21e4:	cc 3a       	cpi	r28, 0xAC	; 172
    21e6:	81 f1       	breq	.+96     	; 0x2248 <register_code+0xe6>
    21e8:	cd 3a       	cpi	r28, 0xAD	; 173
    21ea:	89 f1       	breq	.+98     	; 0x224e <register_code+0xec>
    21ec:	ce 3a       	cpi	r28, 0xAE	; 174
    21ee:	91 f1       	breq	.+100    	; 0x2254 <register_code+0xf2>
    21f0:	cf 3a       	cpi	r28, 0xAF	; 175
    21f2:	99 f1       	breq	.+102    	; 0x225a <register_code+0xf8>
    21f4:	c1 3b       	cpi	r28, 0xB1	; 177
    21f6:	a1 f1       	breq	.+104    	; 0x2260 <register_code+0xfe>
    21f8:	c0 3b       	cpi	r28, 0xB0	; 176
    21fa:	a9 f1       	breq	.+106    	; 0x2266 <register_code+0x104>
    21fc:	c2 3b       	cpi	r28, 0xB2	; 178
    21fe:	b1 f1       	breq	.+108    	; 0x226c <register_code+0x10a>
    2200:	c3 3b       	cpi	r28, 0xB3	; 179
    2202:	b9 f1       	breq	.+110    	; 0x2272 <register_code+0x110>
    2204:	c4 3b       	cpi	r28, 0xB4	; 180
    2206:	c1 f1       	breq	.+112    	; 0x2278 <register_code+0x116>
    2208:	c5 3b       	cpi	r28, 0xB5	; 181
    220a:	c9 f1       	breq	.+114    	; 0x227e <register_code+0x11c>
    220c:	c6 3b       	cpi	r28, 0xB6	; 182
    220e:	d1 f1       	breq	.+116    	; 0x2284 <register_code+0x122>
    2210:	c7 3b       	cpi	r28, 0xB7	; 183
    2212:	d9 f1       	breq	.+118    	; 0x228a <register_code+0x128>
    2214:	c8 3b       	cpi	r28, 0xB8	; 184
    2216:	e1 f1       	breq	.+120    	; 0x2290 <register_code+0x12e>
    2218:	c9 3b       	cpi	r28, 0xB9	; 185
    221a:	e9 f1       	breq	.+122    	; 0x2296 <register_code+0x134>
    221c:	ca 3b       	cpi	r28, 0xBA	; 186
    221e:	f1 f1       	breq	.+124    	; 0x229c <register_code+0x13a>
    2220:	cb 3b       	cpi	r28, 0xBB	; 187
    2222:	f9 f1       	breq	.+126    	; 0x22a2 <register_code+0x140>
    2224:	cc 3b       	cpi	r28, 0xBC	; 188
    2226:	09 f0       	breq	.+2      	; 0x222a <register_code+0xc8>
    2228:	3f c0       	rjmp	.+126    	; 0x22a8 <register_code+0x146>
    222a:	8a e2       	ldi	r24, 0x2A	; 42
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	3e c0       	rjmp	.+124    	; 0x22ac <register_code+0x14a>
    2230:	82 ee       	ldi	r24, 0xE2	; 226
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	3b c0       	rjmp	.+118    	; 0x22ac <register_code+0x14a>
    2236:	89 ee       	ldi	r24, 0xE9	; 233
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	38 c0       	rjmp	.+112    	; 0x22ac <register_code+0x14a>
    223c:	8a ee       	ldi	r24, 0xEA	; 234
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	35 c0       	rjmp	.+106    	; 0x22ac <register_code+0x14a>
    2242:	85 eb       	ldi	r24, 0xB5	; 181
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	32 c0       	rjmp	.+100    	; 0x22ac <register_code+0x14a>
    2248:	86 eb       	ldi	r24, 0xB6	; 182
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	2f c0       	rjmp	.+94     	; 0x22ac <register_code+0x14a>
    224e:	83 eb       	ldi	r24, 0xB3	; 179
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	2c c0       	rjmp	.+88     	; 0x22ac <register_code+0x14a>
    2254:	84 eb       	ldi	r24, 0xB4	; 180
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	29 c0       	rjmp	.+82     	; 0x22ac <register_code+0x14a>
    225a:	87 eb       	ldi	r24, 0xB7	; 183
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	26 c0       	rjmp	.+76     	; 0x22ac <register_code+0x14a>
    2260:	8c ec       	ldi	r24, 0xCC	; 204
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	23 c0       	rjmp	.+70     	; 0x22ac <register_code+0x14a>
    2266:	8d ec       	ldi	r24, 0xCD	; 205
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	20 c0       	rjmp	.+64     	; 0x22ac <register_code+0x14a>
    226c:	83 e8       	ldi	r24, 0x83	; 131
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	1d c0       	rjmp	.+58     	; 0x22ac <register_code+0x14a>
    2272:	8a e8       	ldi	r24, 0x8A	; 138
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	1a c0       	rjmp	.+52     	; 0x22ac <register_code+0x14a>
    2278:	82 e9       	ldi	r24, 0x92	; 146
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	17 c0       	rjmp	.+46     	; 0x22ac <register_code+0x14a>
    227e:	84 e9       	ldi	r24, 0x94	; 148
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <register_code+0x14a>
    2284:	81 e2       	ldi	r24, 0x21	; 33
    2286:	92 e0       	ldi	r25, 0x02	; 2
    2288:	11 c0       	rjmp	.+34     	; 0x22ac <register_code+0x14a>
    228a:	83 e2       	ldi	r24, 0x23	; 35
    228c:	92 e0       	ldi	r25, 0x02	; 2
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <register_code+0x14a>
    2290:	84 e2       	ldi	r24, 0x24	; 36
    2292:	92 e0       	ldi	r25, 0x02	; 2
    2294:	0b c0       	rjmp	.+22     	; 0x22ac <register_code+0x14a>
    2296:	85 e2       	ldi	r24, 0x25	; 37
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	08 c0       	rjmp	.+16     	; 0x22ac <register_code+0x14a>
    229c:	86 e2       	ldi	r24, 0x26	; 38
    229e:	92 e0       	ldi	r25, 0x02	; 2
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <register_code+0x14a>
    22a2:	87 e2       	ldi	r24, 0x27	; 39
    22a4:	92 e0       	ldi	r25, 0x02	; 2
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <register_code+0x14a>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    22ac:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    22ae:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <host_consumer_send>
    }
}
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    22b6:	88 23       	and	r24, r24
    22b8:	29 f1       	breq	.+74     	; 0x2304 <unregister_code+0x4e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    22ba:	9c ef       	ldi	r25, 0xFC	; 252
    22bc:	98 0f       	add	r25, r24
    22be:	91 3a       	cpi	r25, 0xA1	; 161
    22c0:	18 f4       	brcc	.+6      	; 0x22c8 <unregister_code+0x12>
        del_key(code);
    22c2:	0e 94 4a 1a 	call	0x3494	; 0x3494 <del_key>
    22c6:	0d c0       	rjmp	.+26     	; 0x22e2 <unregister_code+0x2c>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    22c8:	90 e2       	ldi	r25, 0x20	; 32
    22ca:	98 0f       	add	r25, r24
    22cc:	98 30       	cpi	r25, 0x08	; 8
    22ce:	58 f4       	brcc	.+22     	; 0x22e6 <unregister_code+0x30>
        del_mods(MOD_BIT(code));
    22d0:	87 70       	andi	r24, 0x07	; 7
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <unregister_code+0x22>
    22d6:	99 0f       	add	r25, r25
    22d8:	8a 95       	dec	r24
    22da:	ea f7       	brpl	.-6      	; 0x22d6 <unregister_code+0x20>
    22dc:	89 2f       	mov	r24, r25
    22de:	0e 94 a5 1a 	call	0x354a	; 0x354a <del_mods>
        send_keyboard_report();
    22e2:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    22e6:	9b e5       	ldi	r25, 0x5B	; 91
    22e8:	98 0f       	add	r25, r24
    22ea:	93 30       	cpi	r25, 0x03	; 3
    22ec:	20 f4       	brcc	.+8      	; 0x22f6 <unregister_code+0x40>
        host_system_send(0);
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    22f6:	88 5a       	subi	r24, 0xA8	; 168
    22f8:	85 31       	cpi	r24, 0x15	; 21
    22fa:	20 f4       	brcc	.+8      	; 0x2304 <unregister_code+0x4e>
        host_consumer_send(0);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <host_consumer_send>
    2304:	08 95       	ret

00002306 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2306:	88 23       	and	r24, r24
    2308:	21 f0       	breq	.+8      	; 0x2312 <register_mods+0xc>
        add_mods(mods);
    230a:	0e 94 9f 1a 	call	0x353e	; 0x353e <add_mods>
        send_keyboard_report();
    230e:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <send_keyboard_report>
    2312:	08 95       	ret

00002314 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2314:	88 23       	and	r24, r24
    2316:	21 f0       	breq	.+8      	; 0x2320 <unregister_mods+0xc>
        del_mods(mods);
    2318:	0e 94 a5 1a 	call	0x354a	; 0x354a <del_mods>
        send_keyboard_report();
    231c:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <send_keyboard_report>
    2320:	08 95       	ret

00002322 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2322:	cf 92       	push	r12
    2324:	df 92       	push	r13
    2326:	ef 92       	push	r14
    2328:	ff 92       	push	r15
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	28 97       	sbiw	r28, 0x08	; 8
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2344:	85 e0       	ldi	r24, 0x05	; 5
    2346:	f8 01       	movw	r30, r16
    2348:	de 01       	movw	r26, r28
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	01 90       	ld	r0, Z+
    234e:	0d 92       	st	X+, r0
    2350:	8a 95       	dec	r24
    2352:	e1 f7       	brne	.-8      	; 0x234c <process_action+0x2a>
    2354:	f8 01       	movw	r30, r16
    2356:	40 81       	ld	r20, Z
    2358:	31 81       	ldd	r19, Z+1	; 0x01
    235a:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    235c:	25 81       	ldd	r18, Z+5	; 0x05
    235e:	22 95       	swap	r18
    2360:	2f 70       	andi	r18, 0x0F	; 15
    2362:	83 81       	ldd	r24, Z+3	; 0x03
    2364:	94 81       	ldd	r25, Z+4	; 0x04
    2366:	89 2b       	or	r24, r25
    2368:	31 f0       	breq	.+12     	; 0x2376 <process_action+0x54>
    236a:	3f 3f       	cpi	r19, 0xFF	; 255
    236c:	31 f4       	brne	.+12     	; 0x237a <process_action+0x58>
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	4f 3f       	cpi	r20, 0xFF	; 255
    2372:	19 f4       	brne	.+6      	; 0x237a <process_action+0x58>
    2374:	03 c0       	rjmp	.+6      	; 0x237c <process_action+0x5a>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	01 c0       	rjmp	.+2      	; 0x237c <process_action+0x5a>
    237a:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    237c:	80 fd       	sbrc	r24, 0
    237e:	cf c2       	rjmp	.+1438   	; 0x291e <process_action+0x5fc>

    action_t action = layer_switch_get_action(event.key);
    2380:	49 83       	std	Y+1, r20	; 0x01
    2382:	3a 83       	std	Y+2, r19	; 0x02
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	2f 83       	std	Y+7, r18	; 0x07
    238a:	0e 94 b7 19 	call	0x336e	; 0x336e <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	88 87       	std	Y+8, r24	; 0x08
    2392:	0e 94 b6 19 	call	0x336c	; 0x336c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2396:	0e 94 de 18 	call	0x31bc	; 0x31bc <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    239a:	4e 81       	ldd	r20, Y+6	; 0x06
    239c:	e4 2f       	mov	r30, r20
    239e:	e2 95       	swap	r30
    23a0:	ef 70       	andi	r30, 0x0F	; 15
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	e0 5a       	subi	r30, 0xA0	; 160
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	2f 81       	ldd	r18, Y+7	; 0x07
    23aa:	68 85       	ldd	r22, Y+8	; 0x08
    23ac:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    23b0:	84 2f       	mov	r24, r20
    23b2:	80 7f       	andi	r24, 0xF0	; 240
    23b4:	14 2f       	mov	r17, r20
    23b6:	1f 70       	andi	r17, 0x0F	; 15
    23b8:	88 23       	and	r24, r24
    23ba:	11 f0       	breq	.+4      	; 0x23c0 <process_action+0x9e>
    23bc:	12 95       	swap	r17
    23be:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    23c0:	ff 20       	and	r15, r15
    23c2:	59 f0       	breq	.+22     	; 0x23da <process_action+0xb8>
                    if (mods) {
    23c4:	11 23       	and	r17, r17
    23c6:	09 f4       	brne	.+2      	; 0x23ca <process_action+0xa8>
    23c8:	5f c2       	rjmp	.+1214   	; 0x2888 <process_action+0x566>
                        add_weak_mods(mods);
    23ca:	81 2f       	mov	r24, r17
    23cc:	68 87       	std	Y+8, r22	; 0x08
    23ce:	0e 94 b2 1a 	call	0x3564	; 0x3564 <add_weak_mods>
                        send_keyboard_report();
    23d2:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <send_keyboard_report>
    23d6:	68 85       	ldd	r22, Y+8	; 0x08
    23d8:	57 c2       	rjmp	.+1198   	; 0x2888 <process_action+0x566>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    23da:	86 2f       	mov	r24, r22
    23dc:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <unregister_code>
                    if (mods) {
    23e0:	11 23       	and	r17, r17
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <process_action+0xc4>
    23e4:	9c c2       	rjmp	.+1336   	; 0x291e <process_action+0x5fc>
                        del_weak_mods(mods);
    23e6:	81 2f       	mov	r24, r17
    23e8:	0e 94 b8 1a 	call	0x3570	; 0x3570 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    23ec:	28 96       	adiw	r28, 0x08	; 8
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	ef 90       	pop	r14
    2404:	df 90       	pop	r13
    2406:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2408:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    240c:	84 2f       	mov	r24, r20
    240e:	80 7f       	andi	r24, 0xF0	; 240
    2410:	94 2f       	mov	r25, r20
    2412:	9f 70       	andi	r25, 0x0F	; 15
    2414:	e9 2e       	mov	r14, r25
    2416:	80 32       	cpi	r24, 0x20	; 32
    2418:	19 f0       	breq	.+6      	; 0x2420 <process_action+0xfe>
    241a:	e2 94       	swap	r14
    241c:	80 ef       	ldi	r24, 0xF0	; 240
    241e:	e8 22       	and	r14, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2420:	66 23       	and	r22, r22
    2422:	19 f0       	breq	.+6      	; 0x242a <process_action+0x108>
    2424:	61 30       	cpi	r22, 0x01	; 1
    2426:	01 f1       	breq	.+64     	; 0x2468 <process_action+0x146>
    2428:	29 c0       	rjmp	.+82     	; 0x247c <process_action+0x15a>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    242a:	ff 20       	and	r15, r15
    242c:	a9 f0       	breq	.+42     	; 0x2458 <process_action+0x136>
                            if (tap_count == 0) {
                                register_mods(mods);
    242e:	8e 2d       	mov	r24, r14
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2430:	22 23       	and	r18, r18
    2432:	49 f1       	breq	.+82     	; 0x2486 <process_action+0x164>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2434:	21 30       	cpi	r18, 0x01	; 1
    2436:	39 f5       	brne	.+78     	; 0x2486 <process_action+0x164>
            break;
#endif
        default:
            break;
    }
}
    2438:	28 96       	adiw	r28, 0x08	; 8
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	de bf       	out	0x3e, r29	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	1f 91       	pop	r17
    244a:	0f 91       	pop	r16
    244c:	ff 90       	pop	r15
    244e:	ef 90       	pop	r14
    2450:	df 90       	pop	r13
    2452:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2454:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2458:	22 23       	and	r18, r18
    245a:	19 f0       	breq	.+6      	; 0x2462 <process_action+0x140>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    245c:	21 30       	cpi	r18, 0x01	; 1
    245e:	09 f4       	brne	.+2      	; 0x2462 <process_action+0x140>
    2460:	5e c2       	rjmp	.+1212   	; 0x291e <process_action+0x5fc>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2462:	0e 94 cb 1a 	call	0x3596	; 0x3596 <clear_oneshot_mods>
    2466:	2c c0       	rjmp	.+88     	; 0x24c0 <process_action+0x19e>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2468:	ff 20       	and	r15, r15
    246a:	e9 f0       	breq	.+58     	; 0x24a6 <process_action+0x184>
                            if (tap_count <= TAPPING_TOGGLE) {
    246c:	26 30       	cpi	r18, 0x06	; 6
    246e:	08 f0       	brcs	.+2      	; 0x2472 <process_action+0x150>
    2470:	56 c2       	rjmp	.+1196   	; 0x291e <process_action+0x5fc>
                                if (mods & get_mods()) {
    2472:	0e 94 9c 1a 	call	0x3538	; 0x3538 <get_mods>
    2476:	8e 21       	and	r24, r14
    2478:	29 f0       	breq	.+10     	; 0x2484 <process_action+0x162>
    247a:	22 c0       	rjmp	.+68     	; 0x24c0 <process_action+0x19e>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    247c:	ff 20       	and	r15, r15
    247e:	f1 f0       	breq	.+60     	; 0x24bc <process_action+0x19a>
                            if (tap_count > 0) {
    2480:	21 11       	cpse	r18, r1
    2482:	15 c0       	rjmp	.+42     	; 0x24ae <process_action+0x18c>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    2484:	8e 2d       	mov	r24, r14
            break;
#endif
        default:
            break;
    }
}
    2486:	28 96       	adiw	r28, 0x08	; 8
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    24a2:	0c 94 83 11 	jmp	0x2306	; 0x2306 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    24a6:	25 30       	cpi	r18, 0x05	; 5
    24a8:	08 f0       	brcs	.+2      	; 0x24ac <process_action+0x18a>
    24aa:	39 c2       	rjmp	.+1138   	; 0x291e <process_action+0x5fc>
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <process_action+0x19e>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    24ae:	f8 01       	movw	r30, r16
    24b0:	85 81       	ldd	r24, Z+5	; 0x05
    24b2:	80 ff       	sbrs	r24, 0
    24b4:	e9 c1       	rjmp	.+978    	; 0x2888 <process_action+0x566>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    24b6:	8f 70       	andi	r24, 0x0F	; 15
    24b8:	85 83       	std	Z+5, r24	; 0x05
    24ba:	e4 cf       	rjmp	.-56     	; 0x2484 <process_action+0x162>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    24bc:	21 11       	cpse	r18, r1
    24be:	f8 c1       	rjmp	.+1008   	; 0x28b0 <process_action+0x58e>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    24c0:	8e 2d       	mov	r24, r14
    24c2:	66 c1       	rjmp	.+716    	; 0x2790 <process_action+0x46e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    24c4:	24 2f       	mov	r18, r20
    24c6:	26 95       	lsr	r18
    24c8:	26 95       	lsr	r18
    24ca:	23 70       	andi	r18, 0x03	; 3
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	21 15       	cp	r18, r1
    24d0:	31 05       	cpc	r19, r1
    24d2:	21 f0       	breq	.+8      	; 0x24dc <process_action+0x1ba>
    24d4:	21 30       	cpi	r18, 0x01	; 1
    24d6:	31 05       	cpc	r19, r1
    24d8:	c9 f0       	breq	.+50     	; 0x250c <process_action+0x1ea>
    24da:	21 c2       	rjmp	.+1090   	; 0x291e <process_action+0x5fc>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    24dc:	ff 20       	and	r15, r15
    24de:	21 f0       	breq	.+8      	; 0x24e8 <process_action+0x1c6>
                        host_system_send(action.usage.code);
    24e0:	86 2f       	mov	r24, r22
    24e2:	94 2f       	mov	r25, r20
    24e4:	93 70       	andi	r25, 0x03	; 3
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <process_action+0x1ca>
                    } else {
                        host_system_send(0);
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    24ec:	28 96       	adiw	r28, 0x08	; 8
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	ff 90       	pop	r15
    2502:	ef 90       	pop	r14
    2504:	df 90       	pop	r13
    2506:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2508:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    250c:	ff 20       	and	r15, r15
    250e:	21 f0       	breq	.+8      	; 0x2518 <process_action+0x1f6>
                        host_consumer_send(action.usage.code);
    2510:	86 2f       	mov	r24, r22
    2512:	94 2f       	mov	r25, r20
    2514:	93 70       	andi	r25, 0x03	; 3
    2516:	02 c0       	rjmp	.+4      	; 0x251c <process_action+0x1fa>
                    } else {
                        host_consumer_send(0);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    251c:	28 96       	adiw	r28, 0x08	; 8
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2538:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    253c:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    253e:	ff 20       	and	r15, r15
    2540:	19 f0       	breq	.+6      	; 0x2548 <process_action+0x226>
                mousekey_on(action.key.code);
    2542:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <mousekey_on>
    2546:	02 c0       	rjmp	.+4      	; 0x254c <process_action+0x22a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2548:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    254c:	28 96       	adiw	r28, 0x08	; 8
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2568:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    256c:	84 2f       	mov	r24, r20
    256e:	83 70       	andi	r24, 0x03	; 3
    2570:	09 f0       	breq	.+2      	; 0x2574 <process_action+0x252>
    2572:	76 c0       	rjmp	.+236    	; 0x2660 <process_action+0x33e>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2574:	f1 10       	cpse	r15, r1
    2576:	d3 c1       	rjmp	.+934    	; 0x291e <process_action+0x5fc>
                    uint8_t shift = action.layer_bitop.part*4;
    2578:	26 2f       	mov	r18, r22
    257a:	22 95       	swap	r18
    257c:	26 95       	lsr	r18
    257e:	27 70       	andi	r18, 0x07	; 7
    2580:	22 0f       	add	r18, r18
    2582:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2584:	86 2f       	mov	r24, r22
    2586:	8f 70       	andi	r24, 0x0F	; 15
    2588:	c8 2e       	mov	r12, r24
    258a:	d1 2c       	mov	r13, r1
    258c:	e1 2c       	mov	r14, r1
    258e:	f1 2c       	mov	r15, r1
    2590:	02 2e       	mov	r0, r18
    2592:	04 c0       	rjmp	.+8      	; 0x259c <process_action+0x27a>
    2594:	cc 0c       	add	r12, r12
    2596:	dd 1c       	adc	r13, r13
    2598:	ee 1c       	adc	r14, r14
    259a:	ff 1c       	adc	r15, r15
    259c:	0a 94       	dec	r0
    259e:	d2 f7       	brpl	.-12     	; 0x2594 <process_action+0x272>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    25a0:	64 ff       	sbrs	r22, 4
    25a2:	10 c0       	rjmp	.+32     	; 0x25c4 <process_action+0x2a2>
    25a4:	6f e0       	ldi	r22, 0x0F	; 15
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	04 c0       	rjmp	.+8      	; 0x25b6 <process_action+0x294>
    25ae:	66 0f       	add	r22, r22
    25b0:	77 1f       	adc	r23, r23
    25b2:	88 1f       	adc	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	2a 95       	dec	r18
    25b8:	d2 f7       	brpl	.-12     	; 0x25ae <process_action+0x28c>
    25ba:	60 95       	com	r22
    25bc:	70 95       	com	r23
    25be:	80 95       	com	r24
    25c0:	90 95       	com	r25
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <process_action+0x2a8>
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    25ca:	24 2f       	mov	r18, r20
    25cc:	26 95       	lsr	r18
    25ce:	26 95       	lsr	r18
    25d0:	23 70       	andi	r18, 0x03	; 3
    25d2:	42 2f       	mov	r20, r18
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	42 30       	cpi	r20, 0x02	; 2
    25d8:	51 05       	cpc	r21, r1
    25da:	d1 f0       	breq	.+52     	; 0x2610 <process_action+0x2ee>
    25dc:	43 30       	cpi	r20, 0x03	; 3
    25de:	51 05       	cpc	r21, r1
    25e0:	59 f1       	breq	.+86     	; 0x2638 <process_action+0x316>
    25e2:	6c 29       	or	r22, r12
    25e4:	7d 29       	or	r23, r13
    25e6:	8e 29       	or	r24, r14
    25e8:	9f 29       	or	r25, r15
    25ea:	41 30       	cpi	r20, 0x01	; 1
    25ec:	51 05       	cpc	r21, r1
    25ee:	41 f1       	breq	.+80     	; 0x2640 <process_action+0x31e>
            break;
#endif
        default:
            break;
    }
}
    25f0:	28 96       	adiw	r28, 0x08	; 8
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	f8 94       	cli
    25f6:	de bf       	out	0x3e, r29	; 62
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	ff 90       	pop	r15
    2606:	ef 90       	pop	r14
    2608:	df 90       	pop	r13
    260a:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    260c:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2610:	6c 29       	or	r22, r12
    2612:	7d 29       	or	r23, r13
    2614:	8e 29       	or	r24, r14
    2616:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2618:	28 96       	adiw	r28, 0x08	; 8
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2634:	0c 94 05 19 	jmp	0x320a	; 0x320a <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2638:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <default_layer_and>
    263c:	c7 01       	movw	r24, r14
    263e:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2640:	28 96       	adiw	r28, 0x08	; 8
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	df 90       	pop	r13
    265a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    265c:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2660:	ff 20       	and	r15, r15
    2662:	19 f0       	breq	.+6      	; 0x266a <process_action+0x348>
    2664:	84 2f       	mov	r24, r20
    2666:	81 70       	andi	r24, 0x01	; 1
    2668:	01 c0       	rjmp	.+2      	; 0x266c <process_action+0x34a>
    266a:	86 95       	lsr	r24
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <process_action+0x350>
    2670:	56 c1       	rjmp	.+684    	; 0x291e <process_action+0x5fc>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2672:	26 2f       	mov	r18, r22
    2674:	22 95       	swap	r18
    2676:	26 95       	lsr	r18
    2678:	27 70       	andi	r18, 0x07	; 7
    267a:	22 0f       	add	r18, r18
    267c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    267e:	86 2f       	mov	r24, r22
    2680:	8f 70       	andi	r24, 0x0F	; 15
    2682:	c8 2e       	mov	r12, r24
    2684:	d1 2c       	mov	r13, r1
    2686:	e1 2c       	mov	r14, r1
    2688:	f1 2c       	mov	r15, r1
    268a:	02 2e       	mov	r0, r18
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <process_action+0x374>
    268e:	cc 0c       	add	r12, r12
    2690:	dd 1c       	adc	r13, r13
    2692:	ee 1c       	adc	r14, r14
    2694:	ff 1c       	adc	r15, r15
    2696:	0a 94       	dec	r0
    2698:	d2 f7       	brpl	.-12     	; 0x268e <process_action+0x36c>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    269a:	64 ff       	sbrs	r22, 4
    269c:	10 c0       	rjmp	.+32     	; 0x26be <process_action+0x39c>
    269e:	6f e0       	ldi	r22, 0x0F	; 15
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	04 c0       	rjmp	.+8      	; 0x26b0 <process_action+0x38e>
    26a8:	66 0f       	add	r22, r22
    26aa:	77 1f       	adc	r23, r23
    26ac:	88 1f       	adc	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	2a 95       	dec	r18
    26b2:	d2 f7       	brpl	.-12     	; 0x26a8 <process_action+0x386>
    26b4:	60 95       	com	r22
    26b6:	70 95       	com	r23
    26b8:	80 95       	com	r24
    26ba:	90 95       	com	r25
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <process_action+0x3a2>
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	70 e0       	ldi	r23, 0x00	; 0
    26c2:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    26c4:	24 2f       	mov	r18, r20
    26c6:	26 95       	lsr	r18
    26c8:	26 95       	lsr	r18
    26ca:	23 70       	andi	r18, 0x03	; 3
    26cc:	42 2f       	mov	r20, r18
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	42 30       	cpi	r20, 0x02	; 2
    26d2:	51 05       	cpc	r21, r1
    26d4:	d1 f0       	breq	.+52     	; 0x270a <process_action+0x3e8>
    26d6:	43 30       	cpi	r20, 0x03	; 3
    26d8:	51 05       	cpc	r21, r1
    26da:	59 f1       	breq	.+86     	; 0x2732 <process_action+0x410>
    26dc:	6c 29       	or	r22, r12
    26de:	7d 29       	or	r23, r13
    26e0:	8e 29       	or	r24, r14
    26e2:	9f 29       	or	r25, r15
    26e4:	41 30       	cpi	r20, 0x01	; 1
    26e6:	51 05       	cpc	r21, r1
    26e8:	41 f1       	breq	.+80     	; 0x273a <process_action+0x418>
            break;
#endif
        default:
            break;
    }
}
    26ea:	28 96       	adiw	r28, 0x08	; 8
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	df 90       	pop	r13
    2704:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2706:	0c 94 92 19 	jmp	0x3324	; 0x3324 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    270a:	6c 29       	or	r22, r12
    270c:	7d 29       	or	r23, r13
    270e:	8e 29       	or	r24, r14
    2710:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2712:	28 96       	adiw	r28, 0x08	; 8
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    272e:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2732:	0e 94 92 19 	call	0x3324	; 0x3324 <layer_and>
    2736:	c7 01       	movw	r24, r14
    2738:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    273a:	28 96       	adiw	r28, 0x08	; 8
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	df 91       	pop	r29
    2748:	cf 91       	pop	r28
    274a:	1f 91       	pop	r17
    274c:	0f 91       	pop	r16
    274e:	ff 90       	pop	r15
    2750:	ef 90       	pop	r14
    2752:	df 90       	pop	r13
    2754:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2756:	0c 94 80 19 	jmp	0x3300	; 0x3300 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    275a:	60 3f       	cpi	r22, 0xF0	; 240
    275c:	49 f1       	breq	.+82     	; 0x27b0 <process_action+0x48e>
    275e:	18 f4       	brcc	.+6      	; 0x2766 <process_action+0x444>
    2760:	60 3e       	cpi	r22, 0xE0	; 224
    2762:	48 f4       	brcc	.+18     	; 0x2776 <process_action+0x454>
    2764:	8c c0       	rjmp	.+280    	; 0x287e <process_action+0x55c>
    2766:	62 3f       	cpi	r22, 0xF2	; 242
    2768:	09 f4       	brne	.+2      	; 0x276c <process_action+0x44a>
    276a:	51 c0       	rjmp	.+162    	; 0x280e <process_action+0x4ec>
    276c:	e0 f1       	brcs	.+120    	; 0x27e6 <process_action+0x4c4>
    276e:	63 3f       	cpi	r22, 0xF3	; 243
    2770:	09 f4       	brne	.+2      	; 0x2774 <process_action+0x452>
    2772:	61 c0       	rjmp	.+194    	; 0x2836 <process_action+0x514>
    2774:	84 c0       	rjmp	.+264    	; 0x287e <process_action+0x55c>
    2776:	16 2f       	mov	r17, r22
    2778:	1f 70       	andi	r17, 0x0F	; 15
    277a:	84 2f       	mov	r24, r20
    277c:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    277e:	ff 20       	and	r15, r15
    2780:	21 f0       	breq	.+8      	; 0x278a <process_action+0x468>
                        layer_on(action.layer_tap.val);
    2782:	0e 94 2b 19 	call	0x3256	; 0x3256 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2786:	81 2f       	mov	r24, r17
    2788:	7e ce       	rjmp	.-772    	; 0x2486 <process_action+0x164>
                    } else {
                        layer_off(action.layer_tap.val);
    278a:	0e 94 46 19 	call	0x328c	; 0x328c <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    278e:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2790:	28 96       	adiw	r28, 0x08	; 8
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    27ac:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    27b0:	ff 20       	and	r15, r15
    27b2:	a9 f0       	breq	.+42     	; 0x27de <process_action+0x4bc>
                        if (tap_count < TAPPING_TOGGLE) {
    27b4:	25 30       	cpi	r18, 0x05	; 5
    27b6:	08 f0       	brcs	.+2      	; 0x27ba <process_action+0x498>
    27b8:	b2 c0       	rjmp	.+356    	; 0x291e <process_action+0x5fc>
                            layer_invert(action.layer_tap.val);
    27ba:	84 2f       	mov	r24, r20
    27bc:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    27be:	28 96       	adiw	r28, 0x08	; 8
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	ff 90       	pop	r15
    27d4:	ef 90       	pop	r14
    27d6:	df 90       	pop	r13
    27d8:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    27da:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    27de:	26 30       	cpi	r18, 0x06	; 6
    27e0:	08 f0       	brcs	.+2      	; 0x27e4 <process_action+0x4c2>
    27e2:	9d c0       	rjmp	.+314    	; 0x291e <process_action+0x5fc>
    27e4:	ea cf       	rjmp	.-44     	; 0x27ba <process_action+0x498>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    27e6:	ff 20       	and	r15, r15
    27e8:	a1 f0       	breq	.+40     	; 0x2812 <process_action+0x4f0>
    27ea:	84 2f       	mov	r24, r20
    27ec:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    27ee:	28 96       	adiw	r28, 0x08	; 8
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	df 90       	pop	r13
    2808:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    280a:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    280e:	ff 20       	and	r15, r15
    2810:	61 f3       	breq	.-40     	; 0x27ea <process_action+0x4c8>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2812:	84 2f       	mov	r24, r20
    2814:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2816:	28 96       	adiw	r28, 0x08	; 8
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	df 90       	pop	r13
    2830:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2832:	0c 94 46 19 	jmp	0x328c	; 0x328c <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2836:	ff 20       	and	r15, r15
    2838:	91 f0       	breq	.+36     	; 0x285e <process_action+0x53c>
    283a:	84 2f       	mov	r24, r20
    283c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    283e:	28 96       	adiw	r28, 0x08	; 8
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    285a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    285e:	28 96       	adiw	r28, 0x08	; 8
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	ef 90       	pop	r14
    2876:	df 90       	pop	r13
    2878:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    287a:	0c 94 17 19 	jmp	0x322e	; 0x322e <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    287e:	ff 20       	and	r15, r15
    2880:	a1 f0       	breq	.+40     	; 0x28aa <process_action+0x588>
                        if (tap_count > 0) {
    2882:	22 23       	and	r18, r18
    2884:	09 f4       	brne	.+2      	; 0x2888 <process_action+0x566>
    2886:	b1 cf       	rjmp	.-158    	; 0x27ea <process_action+0x4c8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2888:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    288a:	28 96       	adiw	r28, 0x08	; 8
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	df 90       	pop	r13
    28a4:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    28a6:	0c 94 b1 10 	jmp	0x2162	; 0x2162 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    28aa:	22 23       	and	r18, r18
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <process_action+0x58e>
    28ae:	b1 cf       	rjmp	.-158    	; 0x2812 <process_action+0x4f0>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    28b0:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    28b2:	28 96       	adiw	r28, 0x08	; 8
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    28ce:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    28d2:	4f 70       	andi	r20, 0x0F	; 15
    28d4:	c8 01       	movw	r24, r16
    28d6:	0e 94 c7 1c 	call	0x398e	; 0x398e <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    28da:	28 96       	adiw	r28, 0x08	; 8
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	df 90       	pop	r13
    28f4:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    28f6:	0c 94 29 18 	jmp	0x3052	; 0x3052 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    28fa:	4f 70       	andi	r20, 0x0F	; 15
    28fc:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    28fe:	28 96       	adiw	r28, 0x08	; 8
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	ff 90       	pop	r15
    2914:	ef 90       	pop	r14
    2916:	df 90       	pop	r13
    2918:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    291a:	0c 94 ca 1c 	jmp	0x3994	; 0x3994 <action_function>
            break;
#endif
        default:
            break;
    }
}
    291e:	28 96       	adiw	r28, 0x08	; 8
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ff 90       	pop	r15
    2934:	ef 90       	pop	r14
    2936:	df 90       	pop	r13
    2938:	cf 90       	pop	r12
    293a:	08 95       	ret

0000293c <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    293c:	0e 94 bf 1a 	call	0x357e	; 0x357e <clear_weak_mods>
    clear_keys();
    2940:	0e 94 8e 1a 	call	0x351c	; 0x351c <clear_keys>
    send_keyboard_report();
    2944:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2948:	0e 94 67 1f 	call	0x3ece	; 0x3ece <mousekey_clear>
    mousekey_send();
    294c:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <host_system_send>
    host_consumer_send(0);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <host_consumer_send>

00002960 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2960:	0e 94 af 1a 	call	0x355e	; 0x355e <clear_mods>
    clear_keyboard_but_mods();
    2964:	0c 94 9e 14 	jmp	0x293c	; 0x293c <clear_keyboard_but_mods>

00002968 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2968:	0e 94 b7 19 	call	0x336e	; 0x336e <layer_switch_get_action>

    switch (action.kind.id) {
    296c:	29 2f       	mov	r18, r25
    296e:	22 95       	swap	r18
    2970:	2f 70       	andi	r18, 0x0F	; 15
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	2c 30       	cpi	r18, 0x0C	; 12
    2976:	31 05       	cpc	r19, r1
    2978:	4c f4       	brge	.+18     	; 0x298c <is_tap_key+0x24>
    297a:	2a 30       	cpi	r18, 0x0A	; 10
    297c:	31 05       	cpc	r19, r1
    297e:	6c f4       	brge	.+26     	; 0x299a <is_tap_key+0x32>
    2980:	22 50       	subi	r18, 0x02	; 2
    2982:	31 09       	sbc	r19, r1
    2984:	22 30       	cpi	r18, 0x02	; 2
    2986:	31 05       	cpc	r19, r1
    2988:	90 f4       	brcc	.+36     	; 0x29ae <is_tap_key+0x46>
    298a:	07 c0       	rjmp	.+14     	; 0x299a <is_tap_key+0x32>
    298c:	2c 30       	cpi	r18, 0x0C	; 12
    298e:	31 05       	cpc	r19, r1
    2990:	51 f0       	breq	.+20     	; 0x29a6 <is_tap_key+0x3e>
    2992:	2f 30       	cpi	r18, 0x0F	; 15
    2994:	31 05       	cpc	r19, r1
    2996:	39 f0       	breq	.+14     	; 0x29a6 <is_tap_key+0x3e>
    2998:	0a c0       	rjmp	.+20     	; 0x29ae <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    299a:	80 3e       	cpi	r24, 0xE0	; 224
    299c:	10 f0       	brcs	.+4      	; 0x29a2 <is_tap_key+0x3a>
    299e:	80 3f       	cpi	r24, 0xF0	; 240
    29a0:	31 f4       	brne	.+12     	; 0x29ae <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    29a6:	93 fb       	bst	r25, 3
    29a8:	88 27       	eor	r24, r24
    29aa:	80 f9       	bld	r24, 0
    29ac:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    29ae:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    29b0:	08 95       	ret

000029b2 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <debug_event+0x6>
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <debug_event+0x8>
    29ba:	1f 92       	push	r1
    29bc:	cd b7       	in	r28, 0x3d	; 61
    29be:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	08 95       	ret

000029d0 <debug_record>:

void debug_record(keyrecord_t record)
{
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <debug_record+0x6>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <debug_record+0x8>
    29d8:	00 d0       	rcall	.+0      	; 0x29da <debug_record+0xa>
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    29de:	26 96       	adiw	r28, 0x06	; 6
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29f6:	c0 91 87 01 	lds	r28, 0x0187
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    29fa:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    29fc:	80 91 88 01 	lds	r24, 0x0188
    2a00:	c8 17       	cp	r28, r24
    2a02:	99 f0       	breq	.+38     	; 0x2a2a <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2a04:	d0 e0       	ldi	r29, 0x00	; 0
    2a06:	1c 9f       	mul	r17, r28
    2a08:	f0 01       	movw	r30, r0
    2a0a:	1d 9f       	mul	r17, r29
    2a0c:	f0 0d       	add	r31, r0
    2a0e:	11 24       	eor	r1, r1
    2a10:	e7 57       	subi	r30, 0x77	; 119
    2a12:	fe 4f       	sbci	r31, 0xFE	; 254
    2a14:	40 81       	ld	r20, Z
    2a16:	51 81       	ldd	r21, Z+1	; 0x01
    2a18:	62 81       	ldd	r22, Z+2	; 0x02
    2a1a:	73 81       	ldd	r23, Z+3	; 0x03
    2a1c:	84 81       	ldd	r24, Z+4	; 0x04
    2a1e:	95 81       	ldd	r25, Z+5	; 0x05
    2a20:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a24:	21 96       	adiw	r28, 0x01	; 1
    2a26:	c7 70       	andi	r28, 0x07	; 7
    2a28:	e9 cf       	rjmp	.-46     	; 0x29fc <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	1f 91       	pop	r17
    2a30:	08 95       	ret

00002a32 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2a32:	40 91 b9 01 	lds	r20, 0x01B9
    2a36:	50 91 ba 01 	lds	r21, 0x01BA
    2a3a:	60 91 bb 01 	lds	r22, 0x01BB
    2a3e:	70 91 bc 01 	lds	r23, 0x01BC
    2a42:	80 91 bd 01 	lds	r24, 0x01BD
    2a46:	90 91 be 01 	lds	r25, 0x01BE
    2a4a:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <debug_record>

00002a4e <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2a4e:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2a50:	80 91 be 01 	lds	r24, 0x01BE
    2a54:	82 95       	swap	r24
    2a56:	8f 70       	andi	r24, 0x0F	; 15
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <waiting_buffer_scan_tap+0xe>
    2a5a:	5f c0       	rjmp	.+190    	; 0x2b1a <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2a5c:	80 91 bb 01 	lds	r24, 0x01BB
    2a60:	88 23       	and	r24, r24
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <waiting_buffer_scan_tap+0x18>
    2a64:	5a c0       	rjmp	.+180    	; 0x2b1a <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a66:	20 91 87 01 	lds	r18, 0x0187
    2a6a:	a0 91 88 01 	lds	r26, 0x0188
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2a6e:	60 91 b9 01 	lds	r22, 0x01B9
    2a72:	70 91 ba 01 	lds	r23, 0x01BA
    2a76:	80 91 bc 01 	lds	r24, 0x01BC
    2a7a:	90 91 bd 01 	lds	r25, 0x01BD
    2a7e:	31 e0       	ldi	r19, 0x01	; 1
    2a80:	6f 3f       	cpi	r22, 0xFF	; 255
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <waiting_buffer_scan_tap+0x38>
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	b3 2f       	mov	r27, r19
    2a88:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a8a:	2a 17       	cp	r18, r26
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <waiting_buffer_scan_tap+0x42>
    2a8e:	45 c0       	rjmp	.+138    	; 0x2b1a <waiting_buffer_scan_tap+0xcc>
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	21 f0       	breq	.+8      	; 0x2a9c <waiting_buffer_scan_tap+0x4e>
    2a94:	7f 3f       	cpi	r23, 0xFF	; 255
    2a96:	21 f4       	brne	.+8      	; 0x2aa0 <waiting_buffer_scan_tap+0x52>
    2a98:	4b 2f       	mov	r20, r27
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <waiting_buffer_scan_tap+0x54>
    2a9c:	41 e0       	ldi	r20, 0x01	; 1
    2a9e:	01 c0       	rjmp	.+2      	; 0x2aa2 <waiting_buffer_scan_tap+0x54>
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2aa4:	40 fd       	sbrc	r20, 0
    2aa6:	35 c0       	rjmp	.+106    	; 0x2b12 <waiting_buffer_scan_tap+0xc4>
    2aa8:	c2 9f       	mul	r28, r18
    2aaa:	f0 01       	movw	r30, r0
    2aac:	c3 9f       	mul	r28, r19
    2aae:	f0 0d       	add	r31, r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	e7 57       	subi	r30, 0x77	; 119
    2ab4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab6:	41 81       	ldd	r20, Z+1	; 0x01
    2ab8:	74 13       	cpse	r23, r20
    2aba:	2b c0       	rjmp	.+86     	; 0x2b12 <waiting_buffer_scan_tap+0xc4>
    2abc:	40 81       	ld	r20, Z
    2abe:	64 13       	cpse	r22, r20
    2ac0:	28 c0       	rjmp	.+80     	; 0x2b12 <waiting_buffer_scan_tap+0xc4>
    2ac2:	42 81       	ldd	r20, Z+2	; 0x02
    2ac4:	41 11       	cpse	r20, r1
    2ac6:	25 c0       	rjmp	.+74     	; 0x2b12 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2ac8:	43 81       	ldd	r20, Z+3	; 0x03
    2aca:	54 81       	ldd	r21, Z+4	; 0x04
    2acc:	48 17       	cp	r20, r24
    2ace:	59 07       	cpc	r21, r25
    2ad0:	10 f4       	brcc	.+4      	; 0x2ad6 <waiting_buffer_scan_tap+0x88>
    2ad2:	41 50       	subi	r20, 0x01	; 1
    2ad4:	51 09       	sbc	r21, r1
    2ad6:	48 1b       	sub	r20, r24
    2ad8:	59 0b       	sbc	r21, r25
    2ada:	4c 32       	cpi	r20, 0x2C	; 44
    2adc:	51 40       	sbci	r21, 0x01	; 1
    2ade:	c8 f4       	brcc	.+50     	; 0x2b12 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2ae0:	80 91 be 01 	lds	r24, 0x01BE
    2ae4:	8f 70       	andi	r24, 0x0F	; 15
    2ae6:	80 61       	ori	r24, 0x10	; 16
    2ae8:	80 93 be 01 	sts	0x01BE, r24
            waiting_buffer[i].tap.count = 1;
    2aec:	86 e0       	ldi	r24, 0x06	; 6
    2aee:	82 9f       	mul	r24, r18
    2af0:	f0 01       	movw	r30, r0
    2af2:	83 9f       	mul	r24, r19
    2af4:	f0 0d       	add	r31, r0
    2af6:	11 24       	eor	r1, r1
    2af8:	e2 57       	subi	r30, 0x72	; 114
    2afa:	fe 4f       	sbci	r31, 0xFE	; 254
    2afc:	80 81       	ld	r24, Z
    2afe:	8f 70       	andi	r24, 0x0F	; 15
    2b00:	80 61       	ori	r24, 0x10	; 16
    2b02:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2b04:	89 eb       	ldi	r24, 0xB9	; 185
    2b06:	91 e0       	ldi	r25, 0x01	; 1
    2b08:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2b0c:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2b0e:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2b12:	2f 5f       	subi	r18, 0xFF	; 255
    2b14:	3f 4f       	sbci	r19, 0xFF	; 255
    2b16:	27 70       	andi	r18, 0x07	; 7
    2b18:	b8 cf       	rjmp	.-144    	; 0x2a8a <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2b1a:	cf 91       	pop	r28
    2b1c:	08 95       	ret

00002b1e <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	62 97       	sbiw	r28, 0x12	; 18
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2b40:	85 e0       	ldi	r24, 0x05	; 5
    2b42:	f8 01       	movw	r30, r16
    2b44:	de 01       	movw	r26, r28
    2b46:	1d 96       	adiw	r26, 0x0d	; 13
    2b48:	01 90       	ld	r0, Z+
    2b4a:	0d 92       	st	X+, r0
    2b4c:	8a 95       	dec	r24
    2b4e:	e1 f7       	brne	.-8      	; 0x2b48 <process_tapping+0x2a>
    2b50:	d8 01       	movw	r26, r16
    2b52:	4c 91       	ld	r20, X
    2b54:	11 96       	adiw	r26, 0x01	; 1
    2b56:	5c 91       	ld	r21, X
    2b58:	11 97       	sbiw	r26, 0x01	; 1
    2b5a:	12 96       	adiw	r26, 0x02	; 2
    2b5c:	6c 91       	ld	r22, X
    2b5e:	12 97       	sbiw	r26, 0x02	; 2
    2b60:	13 96       	adiw	r26, 0x03	; 3
    2b62:	ed 90       	ld	r14, X+
    2b64:	fc 90       	ld	r15, X
    2b66:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2b68:	70 91 b9 01 	lds	r23, 0x01B9
    2b6c:	e0 91 ba 01 	lds	r30, 0x01BA
    2b70:	20 91 bc 01 	lds	r18, 0x01BC
    2b74:	30 91 bd 01 	lds	r19, 0x01BD
    2b78:	21 15       	cp	r18, r1
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	31 f0       	breq	.+12     	; 0x2b8a <process_tapping+0x6c>
    2b7e:	ef 3f       	cpi	r30, 0xFF	; 255
    2b80:	31 f4       	brne	.+12     	; 0x2b8e <process_tapping+0x70>
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	7f 3f       	cpi	r23, 0xFF	; 255
    2b86:	19 f4       	brne	.+6      	; 0x2b8e <process_tapping+0x70>
    2b88:	03 c0       	rjmp	.+6      	; 0x2b90 <process_tapping+0x72>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	01 c0       	rjmp	.+2      	; 0x2b90 <process_tapping+0x72>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	b8 2f       	mov	r27, r24
    2b92:	b1 70       	andi	r27, 0x01	; 1
    2b94:	cb 2e       	mov	r12, r27
    2b96:	80 fd       	sbrc	r24, 0
    2b98:	6d c1       	rjmp	.+730    	; 0x2e74 <process_tapping+0x356>
    2b9a:	d0 90 bb 01 	lds	r13, 0x01BB
    2b9e:	dd 20       	and	r13, r13
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <process_tapping+0x86>
    2ba2:	f6 c0       	rjmp	.+492    	; 0x2d90 <process_tapping+0x272>
    2ba4:	f0 91 be 01 	lds	r31, 0x01BE
        if (WITHIN_TAPPING_TERM(event)) {
    2ba8:	e2 16       	cp	r14, r18
    2baa:	f3 06       	cpc	r15, r19
    2bac:	38 f0       	brcs	.+14     	; 0x2bbc <process_tapping+0x9e>
    2bae:	c7 01       	movw	r24, r14
    2bb0:	82 1b       	sub	r24, r18
    2bb2:	93 0b       	sbc	r25, r19
    2bb4:	8c 32       	cpi	r24, 0x2C	; 44
    2bb6:	91 40       	sbci	r25, 0x01	; 1
    2bb8:	48 f0       	brcs	.+18     	; 0x2bcc <process_tapping+0xae>
    2bba:	9c c0       	rjmp	.+312    	; 0x2cf4 <process_tapping+0x1d6>
    2bbc:	20 95       	com	r18
    2bbe:	30 95       	com	r19
    2bc0:	2e 0d       	add	r18, r14
    2bc2:	3f 1d       	adc	r19, r15
    2bc4:	2c 32       	cpi	r18, 0x2C	; 44
    2bc6:	31 40       	sbci	r19, 0x01	; 1
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <process_tapping+0xae>
    2bca:	94 c0       	rjmp	.+296    	; 0x2cf4 <process_tapping+0x1d6>
            if (tapping_key.tap.count == 0) {
    2bcc:	8f 2f       	mov	r24, r31
    2bce:	80 7f       	andi	r24, 0xF0	; 240
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <process_tapping+0xb6>
    2bd2:	53 c0       	rjmp	.+166    	; 0x2c7a <process_tapping+0x15c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2bd4:	e5 13       	cpse	r30, r21
    2bd6:	15 c0       	rjmp	.+42     	; 0x2c02 <process_tapping+0xe4>
    2bd8:	74 13       	cpse	r23, r20
    2bda:	13 c0       	rjmp	.+38     	; 0x2c02 <process_tapping+0xe4>
    2bdc:	d6 2e       	mov	r13, r22
    2bde:	61 11       	cpse	r22, r1
    2be0:	10 c0       	rjmp	.+32     	; 0x2c02 <process_tapping+0xe4>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2be2:	ff 70       	andi	r31, 0x0F	; 15
    2be4:	f0 61       	ori	r31, 0x10	; 16
    2be6:	f0 93 be 01 	sts	0x01BE, r31
                    debug_tapping_key();
    2bea:	0e 94 19 15 	call	0x2a32	; 0x2a32 <debug_tapping_key>
                    process_action(&tapping_key);
    2bee:	89 eb       	ldi	r24, 0xB9	; 185
    2bf0:	91 e0       	ldi	r25, 0x01	; 1
    2bf2:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2bf6:	80 91 be 01 	lds	r24, 0x01BE
    2bfa:	d8 01       	movw	r26, r16
    2bfc:	15 96       	adiw	r26, 0x05	; 5
    2bfe:	8c 93       	st	X, r24
                    // enqueue
                    return false;
    2c00:	6b c1       	rjmp	.+726    	; 0x2ed8 <process_tapping+0x3ba>
    2c02:	ef 28       	or	r14, r15
    2c04:	31 f0       	breq	.+12     	; 0x2c12 <process_tapping+0xf4>
    2c06:	5f 3f       	cpi	r21, 0xFF	; 255
    2c08:	31 f4       	brne	.+12     	; 0x2c16 <process_tapping+0xf8>
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	4f 3f       	cpi	r20, 0xFF	; 255
    2c0e:	19 f4       	brne	.+6      	; 0x2c16 <process_tapping+0xf8>
    2c10:	03 c0       	rjmp	.+6      	; 0x2c18 <process_tapping+0xfa>
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <process_tapping+0xfa>
    2c16:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2c18:	80 fd       	sbrc	r24, 0
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <process_tapping+0x104>
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	86 27       	eor	r24, r22
    2c20:	01 c0       	rjmp	.+2      	; 0x2c24 <process_tapping+0x106>
    2c22:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2c24:	b8 2f       	mov	r27, r24
    2c26:	b1 70       	andi	r27, 0x01	; 1
    2c28:	fb 2e       	mov	r15, r27
    2c2a:	80 ff       	sbrs	r24, 0
    2c2c:	1c c0       	rjmp	.+56     	; 0x2c66 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c2e:	80 91 87 01 	lds	r24, 0x0187
    2c32:	20 91 88 01 	lds	r18, 0x0188
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2c36:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c38:	82 17       	cp	r24, r18
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <process_tapping+0x120>
    2c3c:	28 c1       	rjmp	.+592    	; 0x2e8e <process_tapping+0x370>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	38 9f       	mul	r19, r24
    2c42:	f0 01       	movw	r30, r0
    2c44:	39 9f       	mul	r19, r25
    2c46:	f0 0d       	add	r31, r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	e7 57       	subi	r30, 0x77	; 119
    2c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	57 13       	cpse	r21, r23
    2c52:	06 c0       	rjmp	.+12     	; 0x2c60 <process_tapping+0x142>
    2c54:	70 81       	ld	r23, Z
    2c56:	47 13       	cpse	r20, r23
    2c58:	03 c0       	rjmp	.+6      	; 0x2c60 <process_tapping+0x142>
    2c5a:	72 81       	ldd	r23, Z+2	; 0x02
    2c5c:	67 13       	cpse	r22, r23
    2c5e:	03 c0       	rjmp	.+6      	; 0x2c66 <process_tapping+0x148>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2c60:	01 96       	adiw	r24, 0x01	; 1
    2c62:	87 70       	andi	r24, 0x07	; 7
    2c64:	e9 cf       	rjmp	.-46     	; 0x2c38 <process_tapping+0x11a>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2c66:	d6 2e       	mov	r13, r22
    2c68:	66 23       	and	r22, r22
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <process_tapping+0x150>
    2c6c:	35 c1       	rjmp	.+618    	; 0x2ed8 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2c6e:	80 91 be 01 	lds	r24, 0x01BE
    2c72:	81 60       	ori	r24, 0x01	; 1
    2c74:	80 93 be 01 	sts	0x01BE, r24
    2c78:	53 c0       	rjmp	.+166    	; 0x2d20 <process_tapping+0x202>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2c7a:	e5 13       	cpse	r30, r21
    2c7c:	08 c0       	rjmp	.+16     	; 0x2c8e <process_tapping+0x170>
    2c7e:	74 13       	cpse	r23, r20
    2c80:	06 c0       	rjmp	.+12     	; 0x2c8e <process_tapping+0x170>
    2c82:	61 11       	cpse	r22, r1
    2c84:	04 c0       	rjmp	.+8      	; 0x2c8e <process_tapping+0x170>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2c86:	d8 01       	movw	r26, r16
    2c88:	15 96       	adiw	r26, 0x05	; 5
    2c8a:	fc 93       	st	X, r31
    2c8c:	ae c0       	rjmp	.+348    	; 0x2dea <process_tapping+0x2cc>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2c8e:	4d 87       	std	Y+13, r20	; 0x0d
    2c90:	5e 87       	std	Y+14, r21	; 0x0e
    2c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c96:	6a 8b       	std	Y+18, r22	; 0x12
    2c98:	0e 94 b4 14 	call	0x2968	; 0x2968 <is_tap_key>
    2c9c:	6a 89       	ldd	r22, Y+18	; 0x12
    2c9e:	88 23       	and	r24, r24
    2ca0:	29 f1       	breq	.+74     	; 0x2cec <process_tapping+0x1ce>
    2ca2:	d6 2e       	mov	r13, r22
    2ca4:	66 23       	and	r22, r22
    2ca6:	11 f1       	breq	.+68     	; 0x2cec <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    2ca8:	20 91 be 01 	lds	r18, 0x01BE
    2cac:	82 2f       	mov	r24, r18
    2cae:	82 95       	swap	r24
    2cb0:	8f 70       	andi	r24, 0x0F	; 15
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 97       	sbiw	r24, 0x02	; 2
    2cb6:	0c f4       	brge	.+2      	; 0x2cba <process_tapping+0x19c>
    2cb8:	60 c0       	rjmp	.+192    	; 0x2d7a <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2cba:	80 91 b9 01 	lds	r24, 0x01B9
    2cbe:	90 91 ba 01 	lds	r25, 0x01BA
    2cc2:	98 87       	std	Y+8, r25	; 0x08
    2cc4:	8f 83       	std	Y+7, r24	; 0x07
    2cc6:	19 86       	std	Y+9, r1	; 0x09
    2cc8:	fb 86       	std	Y+11, r15	; 0x0b
    2cca:	ea 86       	std	Y+10, r14	; 0x0a
    2ccc:	2c 87       	std	Y+12, r18	; 0x0c
    2cce:	ce 01       	movw	r24, r28
    2cd0:	07 96       	adiw	r24, 0x07	; 7
    2cd2:	51 c0       	rjmp	.+162    	; 0x2d76 <process_tapping+0x258>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2cd4:	e5 17       	cp	r30, r21
    2cd6:	31 f1       	breq	.+76     	; 0x2d24 <process_tapping+0x206>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2cd8:	4d 87       	std	Y+13, r20	; 0x0d
    2cda:	5e 87       	std	Y+14, r21	; 0x0e
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	6a 8b       	std	Y+18, r22	; 0x12
    2ce2:	0e 94 b4 14 	call	0x2968	; 0x2968 <is_tap_key>
    2ce6:	6a 89       	ldd	r22, Y+18	; 0x12
    2ce8:	81 11       	cpse	r24, r1
    2cea:	2e c0       	rjmp	.+92     	; 0x2d48 <process_tapping+0x22a>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2cec:	c8 01       	movw	r24, r16
    2cee:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
    2cf2:	a4 c0       	rjmp	.+328    	; 0x2e3c <process_tapping+0x31e>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2cf4:	8f 2f       	mov	r24, r31
    2cf6:	80 7f       	andi	r24, 0xF0	; 240
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <process_tapping+0x1b6>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2cfa:	7e 2d       	mov	r23, r14
    2cfc:	f9 8a       	std	Y+17, r15	; 0x11
    2cfe:	e8 8a       	std	Y+16, r14	; 0x10
    2d00:	89 89       	ldd	r24, Y+17	; 0x11
    2d02:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <debug_event>
                process_action(&tapping_key);
    2d06:	89 eb       	ldi	r24, 0xB9	; 185
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
                tapping_key = (keyrecord_t){};
    2d0e:	e9 eb       	ldi	r30, 0xB9	; 185
    2d10:	f1 e0       	ldi	r31, 0x01	; 1
    2d12:	86 e0       	ldi	r24, 0x06	; 6
    2d14:	df 01       	movw	r26, r30
    2d16:	1d 92       	st	X+, r1
    2d18:	8a 95       	dec	r24
    2d1a:	e9 f7       	brne	.-6      	; 0x2d16 <process_tapping+0x1f8>
                debug_tapping_key();
    2d1c:	0e 94 19 15 	call	0x2a32	; 0x2a32 <debug_tapping_key>
                return false;
    2d20:	d1 2c       	mov	r13, r1
    2d22:	da c0       	rjmp	.+436    	; 0x2ed8 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d24:	74 13       	cpse	r23, r20
    2d26:	d8 cf       	rjmp	.-80     	; 0x2cd8 <process_tapping+0x1ba>
    2d28:	61 11       	cpse	r22, r1
    2d2a:	d6 cf       	rjmp	.-84     	; 0x2cd8 <process_tapping+0x1ba>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2d2c:	d8 01       	movw	r26, r16
    2d2e:	15 96       	adiw	r26, 0x05	; 5
    2d30:	fc 93       	st	X, r31
                    process_action(keyp);
    2d32:	c8 01       	movw	r24, r16
    2d34:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
                    tapping_key = (keyrecord_t){};
    2d38:	e9 eb       	ldi	r30, 0xB9	; 185
    2d3a:	f1 e0       	ldi	r31, 0x01	; 1
    2d3c:	86 e0       	ldi	r24, 0x06	; 6
    2d3e:	df 01       	movw	r26, r30
    2d40:	1d 92       	st	X+, r1
    2d42:	8a 95       	dec	r24
    2d44:	e9 f7       	brne	.-6      	; 0x2d40 <process_tapping+0x222>
                    return true;
    2d46:	c8 c0       	rjmp	.+400    	; 0x2ed8 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2d48:	d6 2e       	mov	r13, r22
    2d4a:	66 23       	and	r22, r22
    2d4c:	79 f2       	breq	.-98     	; 0x2cec <process_tapping+0x1ce>
                    if (tapping_key.tap.count > 1) {
    2d4e:	20 91 be 01 	lds	r18, 0x01BE
    2d52:	82 2f       	mov	r24, r18
    2d54:	82 95       	swap	r24
    2d56:	8f 70       	andi	r24, 0x0F	; 15
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	02 97       	sbiw	r24, 0x02	; 2
    2d5c:	74 f0       	brlt	.+28     	; 0x2d7a <process_tapping+0x25c>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2d5e:	80 91 b9 01 	lds	r24, 0x01B9
    2d62:	90 91 ba 01 	lds	r25, 0x01BA
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	1b 82       	std	Y+3, r1	; 0x03
    2d6c:	fd 82       	std	Y+5, r15	; 0x05
    2d6e:	ec 82       	std	Y+4, r14	; 0x04
    2d70:	2e 83       	std	Y+6, r18	; 0x06
    2d72:	ce 01       	movw	r24, r28
    2d74:	01 96       	adiw	r24, 0x01	; 1
    2d76:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    2d7a:	86 e0       	ldi	r24, 0x06	; 6
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	a9 eb       	ldi	r26, 0xB9	; 185
    2d80:	b1 e0       	ldi	r27, 0x01	; 1
    2d82:	01 90       	ld	r0, Z+
    2d84:	0d 92       	st	X+, r0
    2d86:	8a 95       	dec	r24
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <process_tapping+0x264>
                    waiting_buffer_scan_tap();
    2d8a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <waiting_buffer_scan_tap>
    2d8e:	6f c0       	rjmp	.+222    	; 0x2e6e <process_tapping+0x350>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2d90:	e2 16       	cp	r14, r18
    2d92:	f3 06       	cpc	r15, r19
    2d94:	40 f0       	brcs	.+16     	; 0x2da6 <process_tapping+0x288>
    2d96:	c7 01       	movw	r24, r14
    2d98:	82 1b       	sub	r24, r18
    2d9a:	93 0b       	sbc	r25, r19
    2d9c:	9c 01       	movw	r18, r24
    2d9e:	2c 32       	cpi	r18, 0x2C	; 44
    2da0:	31 40       	sbci	r19, 0x01	; 1
    2da2:	48 f0       	brcs	.+18     	; 0x2db6 <process_tapping+0x298>
    2da4:	57 c0       	rjmp	.+174    	; 0x2e54 <process_tapping+0x336>
    2da6:	20 95       	com	r18
    2da8:	30 95       	com	r19
    2daa:	2e 0d       	add	r18, r14
    2dac:	3f 1d       	adc	r19, r15
    2dae:	2c 32       	cpi	r18, 0x2C	; 44
    2db0:	31 40       	sbci	r19, 0x01	; 1
    2db2:	08 f0       	brcs	.+2      	; 0x2db6 <process_tapping+0x298>
    2db4:	4f c0       	rjmp	.+158    	; 0x2e54 <process_tapping+0x336>
            if (event.pressed) {
    2db6:	d6 2e       	mov	r13, r22
    2db8:	66 23       	and	r22, r22
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <process_tapping+0x2a0>
    2dbc:	97 cf       	rjmp	.-210    	; 0x2cec <process_tapping+0x1ce>
                if (IS_TAPPING_KEY(event.key)) {
    2dbe:	e5 13       	cpse	r30, r21
    2dc0:	29 c0       	rjmp	.+82     	; 0x2e14 <process_tapping+0x2f6>
    2dc2:	74 13       	cpse	r23, r20
    2dc4:	27 c0       	rjmp	.+78     	; 0x2e14 <process_tapping+0x2f6>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2dc6:	80 91 be 01 	lds	r24, 0x01BE
    2dca:	80 fd       	sbrc	r24, 0
    2dcc:	1a c0       	rjmp	.+52     	; 0x2e02 <process_tapping+0x2e4>
    2dce:	98 2f       	mov	r25, r24
    2dd0:	92 95       	swap	r25
    2dd2:	9f 70       	andi	r25, 0x0F	; 15
    2dd4:	b1 f0       	breq	.+44     	; 0x2e02 <process_tapping+0x2e4>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	85 83       	std	Z+5, r24	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2dda:	9f 30       	cpi	r25, 0x0F	; 15
    2ddc:	31 f0       	breq	.+12     	; 0x2dea <process_tapping+0x2cc>
    2dde:	9f 5f       	subi	r25, 0xFF	; 255
    2de0:	92 95       	swap	r25
    2de2:	90 7f       	andi	r25, 0xF0	; 240
    2de4:	8f 70       	andi	r24, 0x0F	; 15
    2de6:	89 2b       	or	r24, r25
    2de8:	85 83       	std	Z+5, r24	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2dea:	c8 01       	movw	r24, r16
    2dec:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
                        tapping_key = *keyp;
    2df0:	86 e0       	ldi	r24, 0x06	; 6
    2df2:	f8 01       	movw	r30, r16
    2df4:	a9 eb       	ldi	r26, 0xB9	; 185
    2df6:	b1 e0       	ldi	r27, 0x01	; 1
    2df8:	01 90       	ld	r0, Z+
    2dfa:	0d 92       	st	X+, r0
    2dfc:	8a 95       	dec	r24
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <process_tapping+0x2da>
    2e00:	36 c0       	rjmp	.+108    	; 0x2e6e <process_tapping+0x350>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2e02:	86 e0       	ldi	r24, 0x06	; 6
    2e04:	f8 01       	movw	r30, r16
    2e06:	a9 eb       	ldi	r26, 0xB9	; 185
    2e08:	b1 e0       	ldi	r27, 0x01	; 1
    2e0a:	01 90       	ld	r0, Z+
    2e0c:	0d 92       	st	X+, r0
    2e0e:	8a 95       	dec	r24
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <process_tapping+0x2ec>
                        return true;
    2e12:	62 c0       	rjmp	.+196    	; 0x2ed8 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    2e14:	4d 87       	std	Y+13, r20	; 0x0d
    2e16:	5e 87       	std	Y+14, r21	; 0x0e
    2e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1c:	0e 94 b4 14 	call	0x2968	; 0x2968 <is_tap_key>
    2e20:	88 23       	and	r24, r24
    2e22:	79 f0       	breq	.+30     	; 0x2e42 <process_tapping+0x324>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2e24:	86 e0       	ldi	r24, 0x06	; 6
    2e26:	f8 01       	movw	r30, r16
    2e28:	a9 eb       	ldi	r26, 0xB9	; 185
    2e2a:	b1 e0       	ldi	r27, 0x01	; 1
    2e2c:	01 90       	ld	r0, Z+
    2e2e:	0d 92       	st	X+, r0
    2e30:	8a 95       	dec	r24
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <process_tapping+0x30e>
                    waiting_buffer_scan_tap();
    2e34:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <waiting_buffer_scan_tap>
                    debug_tapping_key();
    2e38:	0e 94 19 15 	call	0x2a32	; 0x2a32 <debug_tapping_key>
                    return true;
    2e3c:	dd 24       	eor	r13, r13
    2e3e:	d3 94       	inc	r13
    2e40:	4b c0       	rjmp	.+150    	; 0x2ed8 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2e42:	80 91 be 01 	lds	r24, 0x01BE
    2e46:	81 60       	ori	r24, 0x01	; 1
    2e48:	80 93 be 01 	sts	0x01BE, r24
                    process_action(keyp);
    2e4c:	c8 01       	movw	r24, r16
    2e4e:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
                    return true;
    2e52:	42 c0       	rjmp	.+132    	; 0x2ed8 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2e54:	7e 2d       	mov	r23, r14
    2e56:	f9 8a       	std	Y+17, r15	; 0x11
    2e58:	e8 8a       	std	Y+16, r14	; 0x10
    2e5a:	89 89       	ldd	r24, Y+17	; 0x11
    2e5c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <debug_event>
            tapping_key = (keyrecord_t){};
    2e60:	e9 eb       	ldi	r30, 0xB9	; 185
    2e62:	f1 e0       	ldi	r31, 0x01	; 1
    2e64:	86 e0       	ldi	r24, 0x06	; 6
    2e66:	df 01       	movw	r26, r30
    2e68:	1d 92       	st	X+, r1
    2e6a:	8a 95       	dec	r24
    2e6c:	e9 f7       	brne	.-6      	; 0x2e68 <process_tapping+0x34a>
            debug_tapping_key();
    2e6e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <debug_tapping_key>
            return false;
    2e72:	32 c0       	rjmp	.+100    	; 0x2ed8 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2e74:	66 23       	and	r22, r22
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <process_tapping+0x35c>
    2e78:	39 cf       	rjmp	.-398    	; 0x2cec <process_tapping+0x1ce>
    2e7a:	4d 87       	std	Y+13, r20	; 0x0d
    2e7c:	5e 87       	std	Y+14, r21	; 0x0e
    2e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e82:	0e 94 b4 14 	call	0x2968	; 0x2968 <is_tap_key>
    2e86:	88 23       	and	r24, r24
    2e88:	09 f4       	brne	.+2      	; 0x2e8c <process_tapping+0x36e>
    2e8a:	30 cf       	rjmp	.-416    	; 0x2cec <process_tapping+0x1ce>
    2e8c:	cb cf       	rjmp	.-106    	; 0x2e24 <process_tapping+0x306>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2e8e:	4d 87       	std	Y+13, r20	; 0x0d
    2e90:	5e 87       	std	Y+14, r21	; 0x0e
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	0e 94 b7 19 	call	0x336e	; 0x336e <layer_switch_get_action>
                    switch (action.kind.id) {
    2e9a:	29 2f       	mov	r18, r25
    2e9c:	22 95       	swap	r18
    2e9e:	2f 70       	andi	r18, 0x0F	; 15
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	22 30       	cpi	r18, 0x02	; 2
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <process_tapping+0x394>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2ea8:	9f 70       	andi	r25, 0x0F	; 15
    2eaa:	41 f0       	breq	.+16     	; 0x2ebc <process_tapping+0x39e>
    2eac:	81 11       	cpse	r24, r1
    2eae:	06 c0       	rjmp	.+12     	; 0x2ebc <process_tapping+0x39e>
    2eb0:	0c c0       	rjmp	.+24     	; 0x2eca <process_tapping+0x3ac>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    2eb2:	24 30       	cpi	r18, 0x04	; 4
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	2c f4       	brge	.+10     	; 0x2ec2 <process_tapping+0x3a4>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2eb8:	9f 70       	andi	r25, 0x0F	; 15
    2eba:	49 f4       	brne	.+18     	; 0x2ece <process_tapping+0x3b0>
                            if (IS_MOD(action.key.code)) return false;
    2ebc:	80 5e       	subi	r24, 0xE0	; 224
    2ebe:	88 30       	cpi	r24, 0x08	; 8
    2ec0:	20 f0       	brcs	.+8      	; 0x2eca <process_tapping+0x3ac>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    2ec2:	c8 01       	movw	r24, r16
    2ec4:	0e 94 91 11 	call	0x2322	; 0x2322 <process_action>
                    return true;
    2ec8:	cf 2c       	mov	r12, r15
    2eca:	dc 2c       	mov	r13, r12
    2ecc:	05 c0       	rjmp	.+10     	; 0x2ed8 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2ece:	f8 01       	movw	r30, r16
    2ed0:	95 81       	ldd	r25, Z+5	; 0x05
    2ed2:	90 7f       	andi	r25, 0xF0	; 240
    2ed4:	99 f7       	brne	.-26     	; 0x2ebc <process_tapping+0x39e>
    2ed6:	f9 cf       	rjmp	.-14     	; 0x2eca <process_tapping+0x3ac>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2ed8:	8d 2d       	mov	r24, r13
    2eda:	62 96       	adiw	r28, 0x12	; 18
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	ff 90       	pop	r15
    2ef0:	ef 90       	pop	r14
    2ef2:	df 90       	pop	r13
    2ef4:	cf 90       	pop	r12
    2ef6:	08 95       	ret

00002ef8 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	2c 97       	sbiw	r28, 0x0c	; 12
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	4f 83       	std	Y+7, r20	; 0x07
    2f10:	58 87       	std	Y+8, r21	; 0x08
    2f12:	69 87       	std	Y+9, r22	; 0x09
    2f14:	7a 87       	std	Y+10, r23	; 0x0a
    2f16:	8b 87       	std	Y+11, r24	; 0x0b
    2f18:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	07 96       	adiw	r24, 0x07	; 7
    2f1e:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <process_tapping>
    2f22:	88 23       	and	r24, r24
    2f24:	c1 f0       	breq	.+48     	; 0x2f56 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    2f26:	2f 81       	ldd	r18, Y+7	; 0x07
    2f28:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2f2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f2e:	89 2b       	or	r24, r25
    2f30:	31 f0       	breq	.+12     	; 0x2f3e <action_tapping_process+0x46>
    2f32:	3f 3f       	cpi	r19, 0xFF	; 255
    2f34:	11 f0       	breq	.+4      	; 0x2f3a <action_tapping_process+0x42>
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <action_tapping_process+0x48>
    2f3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2f3c:	e1 f7       	brne	.-8      	; 0x2f36 <action_tapping_process+0x3e>
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	81 11       	cpse	r24, r1
    2f42:	47 c0       	rjmp	.+142    	; 0x2fd2 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    2f44:	4f 81       	ldd	r20, Y+7	; 0x07
    2f46:	58 85       	ldd	r21, Y+8	; 0x08
    2f48:	69 85       	ldd	r22, Y+9	; 0x09
    2f4a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f50:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <debug_record>
    2f54:	3e c0       	rjmp	.+124    	; 0x2fd2 <action_tapping_process+0xda>
    2f56:	86 e0       	ldi	r24, 0x06	; 6
    2f58:	fe 01       	movw	r30, r28
    2f5a:	37 96       	adiw	r30, 0x07	; 7
    2f5c:	de 01       	movw	r26, r28
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	01 90       	ld	r0, Z+
    2f62:	0d 92       	st	X+, r0
    2f64:	8a 95       	dec	r24
    2f66:	e1 f7       	brne	.-8      	; 0x2f60 <action_tapping_process+0x68>
    2f68:	ff 81       	ldd	r31, Y+7	; 0x07
    2f6a:	e8 85       	ldd	r30, Y+8	; 0x08
    2f6c:	4a 85       	ldd	r20, Y+10	; 0x0a
    2f6e:	5b 85       	ldd	r21, Y+11	; 0x0b
    2f70:	41 15       	cp	r20, r1
    2f72:	51 05       	cpc	r21, r1
    2f74:	31 f0       	breq	.+12     	; 0x2f82 <action_tapping_process+0x8a>
    2f76:	ef 3f       	cpi	r30, 0xFF	; 255
    2f78:	31 f4       	brne	.+12     	; 0x2f86 <action_tapping_process+0x8e>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	ff 3f       	cpi	r31, 0xFF	; 255
    2f7e:	19 f4       	brne	.+6      	; 0x2f86 <action_tapping_process+0x8e>
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <action_tapping_process+0x90>
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <action_tapping_process+0x90>
    2f86:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    2f88:	80 fd       	sbrc	r24, 0
    2f8a:	23 c0       	rjmp	.+70     	; 0x2fd2 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2f8c:	20 91 88 01 	lds	r18, 0x0188
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	c9 01       	movw	r24, r18
    2f94:	01 96       	adiw	r24, 0x01	; 1
    2f96:	87 70       	andi	r24, 0x07	; 7
    2f98:	99 27       	eor	r25, r25
    2f9a:	60 91 87 01 	lds	r22, 0x0187
    2f9e:	70 e0       	ldi	r23, 0x00	; 0
    2fa0:	86 17       	cp	r24, r22
    2fa2:	97 07       	cpc	r25, r23
    2fa4:	f1 f1       	breq	.+124    	; 0x3022 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2fa6:	f9 83       	std	Y+1, r31	; 0x01
    2fa8:	ea 83       	std	Y+2, r30	; 0x02
    2faa:	5d 83       	std	Y+5, r21	; 0x05
    2fac:	4c 83       	std	Y+4, r20	; 0x04
    2fae:	96 e0       	ldi	r25, 0x06	; 6
    2fb0:	92 9f       	mul	r25, r18
    2fb2:	d0 01       	movw	r26, r0
    2fb4:	93 9f       	mul	r25, r19
    2fb6:	b0 0d       	add	r27, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	a7 57       	subi	r26, 0x77	; 119
    2fbc:	be 4f       	sbci	r27, 0xFE	; 254
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	31 96       	adiw	r30, 0x01	; 1
    2fc2:	01 90       	ld	r0, Z+
    2fc4:	0d 92       	st	X+, r0
    2fc6:	9a 95       	dec	r25
    2fc8:	e1 f7       	brne	.-8      	; 0x2fc2 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2fca:	80 93 88 01 	sts	0x0188, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2fce:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2fd2:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2fd4:	80 91 87 01 	lds	r24, 0x0187
    2fd8:	90 91 88 01 	lds	r25, 0x0188
    2fdc:	89 17       	cp	r24, r25
    2fde:	79 f1       	breq	.+94     	; 0x303e <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2fe0:	18 9f       	mul	r17, r24
    2fe2:	c0 01       	movw	r24, r0
    2fe4:	11 24       	eor	r1, r1
    2fe6:	87 57       	subi	r24, 0x77	; 119
    2fe8:	9e 4f       	sbci	r25, 0xFE	; 254
    2fea:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <process_tapping>
    2fee:	88 23       	and	r24, r24
    2ff0:	31 f1       	breq	.+76     	; 0x303e <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2ff2:	e0 91 87 01 	lds	r30, 0x0187
    2ff6:	1e 9f       	mul	r17, r30
    2ff8:	f0 01       	movw	r30, r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	e7 57       	subi	r30, 0x77	; 119
    2ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    3000:	40 81       	ld	r20, Z
    3002:	51 81       	ldd	r21, Z+1	; 0x01
    3004:	62 81       	ldd	r22, Z+2	; 0x02
    3006:	73 81       	ldd	r23, Z+3	; 0x03
    3008:	84 81       	ldd	r24, Z+4	; 0x04
    300a:	95 81       	ldd	r25, Z+5	; 0x05
    300c:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3010:	80 91 87 01 	lds	r24, 0x0187
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	87 70       	andi	r24, 0x07	; 7
    301a:	99 27       	eor	r25, r25
    301c:	80 93 87 01 	sts	0x0187, r24
    3020:	d9 cf       	rjmp	.-78     	; 0x2fd4 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3022:	0e 94 b0 14 	call	0x2960	; 0x2960 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3026:	10 92 88 01 	sts	0x0188, r1
    waiting_buffer_tail = 0;
    302a:	10 92 87 01 	sts	0x0187, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    302e:	e9 eb       	ldi	r30, 0xB9	; 185
    3030:	f1 e0       	ldi	r31, 0x01	; 1
    3032:	86 e0       	ldi	r24, 0x06	; 6
    3034:	df 01       	movw	r26, r30
    3036:	1d 92       	st	X+, r1
    3038:	8a 95       	dec	r24
    303a:	e9 f7       	brne	.-6      	; 0x3036 <action_tapping_process+0x13e>
    303c:	ca cf       	rjmp	.-108    	; 0x2fd2 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    303e:	2c 96       	adiw	r28, 0x0c	; 12
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	df 91       	pop	r29
    304c:	cf 91       	pop	r28
    304e:	1f 91       	pop	r17
    3050:	08 95       	ret

00003052 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3052:	df 92       	push	r13
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	09 f4       	brne	.+2      	; 0x3068 <action_macro_play+0x16>
    3066:	8a c0       	rjmp	.+276    	; 0x317c <action_macro_play+0x12a>
    3068:	e1 2c       	mov	r14, r1
    306a:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    306c:	dd 24       	eor	r13, r13
    306e:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3070:	ef 01       	movw	r28, r30
    3072:	21 96       	adiw	r28, 0x01	; 1
    3074:	84 91       	lpm	r24, Z
    3076:	85 37       	cpi	r24, 0x75	; 117
    3078:	09 f4       	brne	.+2      	; 0x307c <action_macro_play+0x2a>
    307a:	61 c0       	rjmp	.+194    	; 0x313e <action_macro_play+0xec>
    307c:	58 f4       	brcc	.+22     	; 0x3094 <action_macro_play+0x42>
    307e:	84 37       	cpi	r24, 0x74	; 116
    3080:	08 f0       	brcs	.+2      	; 0x3084 <action_macro_play+0x32>
    3082:	4e c0       	rjmp	.+156    	; 0x3120 <action_macro_play+0xce>
    3084:	84 30       	cpi	r24, 0x04	; 4
    3086:	08 f0       	brcs	.+2      	; 0x308a <action_macro_play+0x38>
    3088:	6a c0       	rjmp	.+212    	; 0x315e <action_macro_play+0x10c>
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	d1 f0       	breq	.+52     	; 0x30c2 <action_macro_play+0x70>
    308e:	82 30       	cpi	r24, 0x02	; 2
    3090:	71 f1       	breq	.+92     	; 0x30ee <action_macro_play+0x9c>
    3092:	74 c0       	rjmp	.+232    	; 0x317c <action_macro_play+0x12a>
    3094:	88 37       	cpi	r24, 0x78	; 120
    3096:	09 f4       	brne	.+2      	; 0x309a <action_macro_play+0x48>
    3098:	5d c0       	rjmp	.+186    	; 0x3154 <action_macro_play+0x102>
    309a:	50 f4       	brcc	.+20     	; 0x30b0 <action_macro_play+0x5e>
    309c:	86 37       	cpi	r24, 0x76	; 118
    309e:	09 f4       	brne	.+2      	; 0x30a2 <action_macro_play+0x50>
    30a0:	55 c0       	rjmp	.+170    	; 0x314c <action_macro_play+0xfa>
    30a2:	87 37       	cpi	r24, 0x77	; 119
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <action_macro_play+0x56>
    30a6:	6a c0       	rjmp	.+212    	; 0x317c <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    30a8:	8e 2d       	mov	r24, r14
    30aa:	0e 94 ac 1a 	call	0x3558	; 0x3558 <set_mods>
    30ae:	54 c0       	rjmp	.+168    	; 0x3158 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    30b0:	9c e7       	ldi	r25, 0x7C	; 124
    30b2:	98 0f       	add	r25, r24
    30b4:	90 37       	cpi	r25, 0x70	; 112
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <action_macro_play+0x68>
    30b8:	61 c0       	rjmp	.+194    	; 0x317c <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    30ba:	8f 77       	andi	r24, 0x7F	; 127
    30bc:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <unregister_code>
                break;
    30c0:	50 c0       	rjmp	.+160    	; 0x3162 <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    30c2:	8f 01       	movw	r16, r30
    30c4:	0e 5f       	subi	r16, 0xFE	; 254
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    30cc:	90 e2       	ldi	r25, 0x20	; 32
    30ce:	98 0f       	add	r25, r24
    30d0:	98 30       	cpi	r25, 0x08	; 8
    30d2:	50 f4       	brcc	.+20     	; 0x30e8 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    30d4:	87 70       	andi	r24, 0x07	; 7
    30d6:	fd 2d       	mov	r31, r13
    30d8:	01 c0       	rjmp	.+2      	; 0x30dc <action_macro_play+0x8a>
    30da:	ff 0f       	add	r31, r31
    30dc:	8a 95       	dec	r24
    30de:	ea f7       	brpl	.-6      	; 0x30da <action_macro_play+0x88>
    30e0:	8f 2f       	mov	r24, r31
    30e2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <add_weak_mods>
    30e6:	15 c0       	rjmp	.+42     	; 0x3112 <action_macro_play+0xc0>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    30e8:	0e 94 b1 10 	call	0x2162	; 0x2162 <register_code>
    30ec:	14 c0       	rjmp	.+40     	; 0x3116 <action_macro_play+0xc4>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    30ee:	8f 01       	movw	r16, r30
    30f0:	0e 5f       	subi	r16, 0xFE	; 254
    30f2:	1f 4f       	sbci	r17, 0xFF	; 255
    30f4:	fe 01       	movw	r30, r28
    30f6:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    30f8:	90 e2       	ldi	r25, 0x20	; 32
    30fa:	98 0f       	add	r25, r24
    30fc:	98 30       	cpi	r25, 0x08	; 8
    30fe:	68 f4       	brcc	.+26     	; 0x311a <action_macro_play+0xc8>
                    del_weak_mods(MOD_BIT(macro));
    3100:	87 70       	andi	r24, 0x07	; 7
    3102:	fd 2d       	mov	r31, r13
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <action_macro_play+0xb6>
    3106:	ff 0f       	add	r31, r31
    3108:	8a 95       	dec	r24
    310a:	ea f7       	brpl	.-6      	; 0x3106 <action_macro_play+0xb4>
    310c:	8f 2f       	mov	r24, r31
    310e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <del_weak_mods>
                    send_keyboard_report();
    3112:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3116:	e8 01       	movw	r28, r16
    3118:	24 c0       	rjmp	.+72     	; 0x3162 <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    311a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <unregister_code>
    311e:	fb cf       	rjmp	.-10     	; 0x3116 <action_macro_play+0xc4>
                }
                break;
            case WAIT:
                MACRO_READ();
    3120:	9f 01       	movw	r18, r30
    3122:	2e 5f       	subi	r18, 0xFE	; 254
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	fe 01       	movw	r30, r28
    3128:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    312a:	cc 23       	and	r28, r28
    312c:	69 f0       	breq	.+26     	; 0x3148 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    312e:	8f e9       	ldi	r24, 0x9F	; 159
    3130:	9f e0       	ldi	r25, 0x0F	; 15
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <action_macro_play+0xe0>
    3136:	00 c0       	rjmp	.+0      	; 0x3138 <action_macro_play+0xe6>
    3138:	00 00       	nop
    313a:	c1 50       	subi	r28, 0x01	; 1
    313c:	f6 cf       	rjmp	.-20     	; 0x312a <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    313e:	9f 01       	movw	r18, r30
    3140:	2e 5f       	subi	r18, 0xFE	; 254
    3142:	3f 4f       	sbci	r19, 0xFF	; 255
    3144:	fe 01       	movw	r30, r28
    3146:	f4 90       	lpm	r15, Z
    3148:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    314a:	0b c0       	rjmp	.+22     	; 0x3162 <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    314c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <get_mods>
    3150:	e8 2e       	mov	r14, r24
                break;
    3152:	07 c0       	rjmp	.+14     	; 0x3162 <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3154:	0e 94 af 1a 	call	0x355e	; 0x355e <clear_mods>
                send_keyboard_report();
    3158:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <send_keyboard_report>
                break;
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    315e:	0e 94 b1 10 	call	0x2162	; 0x2162 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3162:	9f 2d       	mov	r25, r15
    3164:	99 23       	and	r25, r25
    3166:	41 f0       	breq	.+16     	; 0x3178 <action_macro_play+0x126>
    3168:	ef e9       	ldi	r30, 0x9F	; 159
    316a:	ff e0       	ldi	r31, 0x0F	; 15
    316c:	31 97       	sbiw	r30, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <action_macro_play+0x11a>
    3170:	00 c0       	rjmp	.+0      	; 0x3172 <action_macro_play+0x120>
    3172:	00 00       	nop
    3174:	91 50       	subi	r25, 0x01	; 1
    3176:	f6 cf       	rjmp	.-20     	; 0x3164 <action_macro_play+0x112>
    3178:	fe 01       	movw	r30, r28
    317a:	7a cf       	rjmp	.-268    	; 0x3070 <action_macro_play+0x1e>
    }
}
    317c:	df 91       	pop	r29
    317e:	cf 91       	pop	r28
    3180:	1f 91       	pop	r17
    3182:	0f 91       	pop	r16
    3184:	ff 90       	pop	r15
    3186:	ef 90       	pop	r14
    3188:	df 90       	pop	r13
    318a:	08 95       	ret

0000318c <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    318c:	60 93 c3 01 	sts	0x01C3, r22
    3190:	70 93 c4 01 	sts	0x01C4, r23
    3194:	80 93 c5 01 	sts	0x01C5, r24
    3198:	90 93 c6 01 	sts	0x01C6, r25
    hook_default_layer_change(default_layer_state);
    319c:	0e 94 65 1b 	call	0x36ca	; 0x36ca <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    31a0:	0c 94 9e 14 	jmp	0x293c	; 0x293c <clear_keyboard_but_mods>

000031a4 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    31a4:	60 93 bf 01 	sts	0x01BF, r22
    31a8:	70 93 c0 01 	sts	0x01C0, r23
    31ac:	80 93 c1 01 	sts	0x01C1, r24
    31b0:	90 93 c2 01 	sts	0x01C2, r25
    hook_layer_change(layer_state);
    31b4:	0e 94 66 1b 	call	0x36cc	; 0x36cc <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    31b8:	0c 94 9e 14 	jmp	0x293c	; 0x293c <clear_keyboard_but_mods>

000031bc <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    31bc:	08 95       	ret

000031be <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    31be:	0c 94 c6 18 	jmp	0x318c	; 0x318c <default_layer_state_set>

000031c2 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    31c6:	00 91 c3 01 	lds	r16, 0x01C3
    31ca:	10 91 c4 01 	lds	r17, 0x01C4
    31ce:	20 91 c5 01 	lds	r18, 0x01C5
    31d2:	30 91 c6 01 	lds	r19, 0x01C6
    31d6:	60 2b       	or	r22, r16
    31d8:	71 2b       	or	r23, r17
    31da:	82 2b       	or	r24, r18
    31dc:	93 2b       	or	r25, r19
}
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    31e2:	0c 94 c6 18 	jmp	0x318c	; 0x318c <default_layer_state_set>

000031e6 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    31e6:	0f 93       	push	r16
    31e8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    31ea:	00 91 c3 01 	lds	r16, 0x01C3
    31ee:	10 91 c4 01 	lds	r17, 0x01C4
    31f2:	20 91 c5 01 	lds	r18, 0x01C5
    31f6:	30 91 c6 01 	lds	r19, 0x01C6
    31fa:	60 23       	and	r22, r16
    31fc:	71 23       	and	r23, r17
    31fe:	82 23       	and	r24, r18
    3200:	93 23       	and	r25, r19
}
    3202:	1f 91       	pop	r17
    3204:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3206:	0c 94 c6 18 	jmp	0x318c	; 0x318c <default_layer_state_set>

0000320a <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    320e:	00 91 c3 01 	lds	r16, 0x01C3
    3212:	10 91 c4 01 	lds	r17, 0x01C4
    3216:	20 91 c5 01 	lds	r18, 0x01C5
    321a:	30 91 c6 01 	lds	r19, 0x01C6
    321e:	60 27       	eor	r22, r16
    3220:	71 27       	eor	r23, r17
    3222:	82 27       	eor	r24, r18
    3224:	93 27       	eor	r25, r19
}
    3226:	1f 91       	pop	r17
    3228:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    322a:	0c 94 c6 18 	jmp	0x318c	; 0x318c <default_layer_state_set>

0000322e <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	70 e0       	ldi	r23, 0x00	; 0
    3232:	cb 01       	movw	r24, r22
    3234:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

00003238 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	50 e0       	ldi	r21, 0x00	; 0
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	04 c0       	rjmp	.+8      	; 0x324a <layer_move+0x12>
    3242:	44 0f       	add	r20, r20
    3244:	55 1f       	adc	r21, r21
    3246:	66 1f       	adc	r22, r22
    3248:	77 1f       	adc	r23, r23
    324a:	8a 95       	dec	r24
    324c:	d2 f7       	brpl	.-12     	; 0x3242 <layer_move+0xa>
    324e:	cb 01       	movw	r24, r22
    3250:	ba 01       	movw	r22, r20
    3252:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

00003256 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	50 e0       	ldi	r21, 0x00	; 0
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	04 c0       	rjmp	.+8      	; 0x3268 <layer_on+0x12>
    3260:	44 0f       	add	r20, r20
    3262:	55 1f       	adc	r21, r21
    3264:	66 1f       	adc	r22, r22
    3266:	77 1f       	adc	r23, r23
    3268:	8a 95       	dec	r24
    326a:	d2 f7       	brpl	.-12     	; 0x3260 <layer_on+0xa>
    326c:	80 91 bf 01 	lds	r24, 0x01BF
    3270:	90 91 c0 01 	lds	r25, 0x01C0
    3274:	a0 91 c1 01 	lds	r26, 0x01C1
    3278:	b0 91 c2 01 	lds	r27, 0x01C2
    327c:	48 2b       	or	r20, r24
    327e:	59 2b       	or	r21, r25
    3280:	6a 2b       	or	r22, r26
    3282:	7b 2b       	or	r23, r27
    3284:	cb 01       	movw	r24, r22
    3286:	ba 01       	movw	r22, r20
    3288:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

0000328c <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    328c:	41 e0       	ldi	r20, 0x01	; 1
    328e:	50 e0       	ldi	r21, 0x00	; 0
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	70 e0       	ldi	r23, 0x00	; 0
    3294:	04 c0       	rjmp	.+8      	; 0x329e <layer_off+0x12>
    3296:	44 0f       	add	r20, r20
    3298:	55 1f       	adc	r21, r21
    329a:	66 1f       	adc	r22, r22
    329c:	77 1f       	adc	r23, r23
    329e:	8a 95       	dec	r24
    32a0:	d2 f7       	brpl	.-12     	; 0x3296 <layer_off+0xa>
    32a2:	40 95       	com	r20
    32a4:	50 95       	com	r21
    32a6:	60 95       	com	r22
    32a8:	70 95       	com	r23
    32aa:	80 91 bf 01 	lds	r24, 0x01BF
    32ae:	90 91 c0 01 	lds	r25, 0x01C0
    32b2:	a0 91 c1 01 	lds	r26, 0x01C1
    32b6:	b0 91 c2 01 	lds	r27, 0x01C2
    32ba:	48 23       	and	r20, r24
    32bc:	59 23       	and	r21, r25
    32be:	6a 23       	and	r22, r26
    32c0:	7b 23       	and	r23, r27
    32c2:	cb 01       	movw	r24, r22
    32c4:	ba 01       	movw	r22, r20
    32c6:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

000032ca <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	50 e0       	ldi	r21, 0x00	; 0
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	04 c0       	rjmp	.+8      	; 0x32dc <layer_invert+0x12>
    32d4:	44 0f       	add	r20, r20
    32d6:	55 1f       	adc	r21, r21
    32d8:	66 1f       	adc	r22, r22
    32da:	77 1f       	adc	r23, r23
    32dc:	8a 95       	dec	r24
    32de:	d2 f7       	brpl	.-12     	; 0x32d4 <layer_invert+0xa>
    32e0:	80 91 bf 01 	lds	r24, 0x01BF
    32e4:	90 91 c0 01 	lds	r25, 0x01C0
    32e8:	a0 91 c1 01 	lds	r26, 0x01C1
    32ec:	b0 91 c2 01 	lds	r27, 0x01C2
    32f0:	48 27       	eor	r20, r24
    32f2:	59 27       	eor	r21, r25
    32f4:	6a 27       	eor	r22, r26
    32f6:	7b 27       	eor	r23, r27
    32f8:	cb 01       	movw	r24, r22
    32fa:	ba 01       	movw	r22, r20
    32fc:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

00003300 <layer_or>:
}

void layer_or(uint32_t state)
{
    3300:	0f 93       	push	r16
    3302:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3304:	00 91 bf 01 	lds	r16, 0x01BF
    3308:	10 91 c0 01 	lds	r17, 0x01C0
    330c:	20 91 c1 01 	lds	r18, 0x01C1
    3310:	30 91 c2 01 	lds	r19, 0x01C2
    3314:	60 2b       	or	r22, r16
    3316:	71 2b       	or	r23, r17
    3318:	82 2b       	or	r24, r18
    331a:	93 2b       	or	r25, r19
}
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3320:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

00003324 <layer_and>:
}
void layer_and(uint32_t state)
{
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3328:	00 91 bf 01 	lds	r16, 0x01BF
    332c:	10 91 c0 01 	lds	r17, 0x01C0
    3330:	20 91 c1 01 	lds	r18, 0x01C1
    3334:	30 91 c2 01 	lds	r19, 0x01C2
    3338:	60 23       	and	r22, r16
    333a:	71 23       	and	r23, r17
    333c:	82 23       	and	r24, r18
    333e:	93 23       	and	r25, r19
}
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3344:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

00003348 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    334c:	00 91 bf 01 	lds	r16, 0x01BF
    3350:	10 91 c0 01 	lds	r17, 0x01C0
    3354:	20 91 c1 01 	lds	r18, 0x01C1
    3358:	30 91 c2 01 	lds	r19, 0x01C2
    335c:	60 27       	eor	r22, r16
    335e:	71 27       	eor	r23, r17
    3360:	82 27       	eor	r24, r18
    3362:	93 27       	eor	r25, r19
}
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3368:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <layer_state_set>

0000336c <layer_debug>:
}

void layer_debug(void)
{
    336c:	08 95       	ret

0000336e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    336e:	cf 92       	push	r12
    3370:	df 92       	push	r13
    3372:	ef 92       	push	r14
    3374:	ff 92       	push	r15
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
    action_t action = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3380:	c0 90 c3 01 	lds	r12, 0x01C3
    3384:	d0 90 c4 01 	lds	r13, 0x01C4
    3388:	e0 90 c5 01 	lds	r14, 0x01C5
    338c:	f0 90 c6 01 	lds	r15, 0x01C6
    3390:	80 91 bf 01 	lds	r24, 0x01BF
    3394:	90 91 c0 01 	lds	r25, 0x01C0
    3398:	a0 91 c1 01 	lds	r26, 0x01C1
    339c:	b0 91 c2 01 	lds	r27, 0x01C2
    33a0:	c8 2a       	or	r12, r24
    33a2:	d9 2a       	or	r13, r25
    33a4:	ea 2a       	or	r14, r26
    33a6:	fb 2a       	or	r15, r27
    33a8:	0f e1       	ldi	r16, 0x1F	; 31
    33aa:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    33ac:	b7 01       	movw	r22, r14
    33ae:	a6 01       	movw	r20, r12
    33b0:	00 2e       	mov	r0, r16
    33b2:	04 c0       	rjmp	.+8      	; 0x33bc <layer_switch_get_action+0x4e>
    33b4:	76 95       	lsr	r23
    33b6:	67 95       	ror	r22
    33b8:	57 95       	ror	r21
    33ba:	47 95       	ror	r20
    33bc:	0a 94       	dec	r0
    33be:	d2 f7       	brpl	.-12     	; 0x33b4 <layer_switch_get_action+0x46>
    33c0:	40 ff       	sbrs	r20, 0
    33c2:	07 c0       	rjmp	.+14     	; 0x33d2 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    33c4:	be 01       	movw	r22, r28
    33c6:	80 2f       	mov	r24, r16
    33c8:	0e 94 9d 1c 	call	0x393a	; 0x393a <action_for_key>
            if (action.code != (action_t)ACTION_TRANSPARENT.code) {
    33cc:	81 30       	cpi	r24, 0x01	; 1
    33ce:	91 05       	cpc	r25, r1
    33d0:	39 f4       	brne	.+14     	; 0x33e0 <layer_switch_get_action+0x72>
    33d2:	01 50       	subi	r16, 0x01	; 1
    33d4:	11 09       	sbc	r17, r1
    33d6:	50 f7       	brcc	.-44     	; 0x33ac <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    33d8:	be 01       	movw	r22, r28
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	0e 94 9d 1c 	call	0x393a	; 0x393a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	1f 91       	pop	r17
    33e6:	0f 91       	pop	r16
    33e8:	ff 90       	pop	r15
    33ea:	ef 90       	pop	r14
    33ec:	df 90       	pop	r13
    33ee:	cf 90       	pop	r12
    33f0:	08 95       	ret

000033f2 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    33f2:	90 91 0a 01 	lds	r25, 0x010A
    33f6:	99 23       	and	r25, r25
    33f8:	61 f1       	breq	.+88     	; 0x3452 <add_key+0x60>
    33fa:	90 91 0b 01 	lds	r25, 0x010B
    33fe:	99 23       	and	r25, r25
    3400:	41 f1       	breq	.+80     	; 0x3452 <add_key+0x60>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3402:	98 2f       	mov	r25, r24
    3404:	96 95       	lsr	r25
    3406:	96 95       	lsr	r25
    3408:	96 95       	lsr	r25
    340a:	9f 31       	cpi	r25, 0x1F	; 31
    340c:	88 f4       	brcc	.+34     	; 0x3430 <add_key+0x3e>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    340e:	e0 91 0c 01 	lds	r30, 0x010C
    3412:	f0 91 0d 01 	lds	r31, 0x010D
    3416:	e9 0f       	add	r30, r25
    3418:	f1 1d       	adc	r31, r1
    341a:	87 70       	andi	r24, 0x07	; 7
    341c:	21 e0       	ldi	r18, 0x01	; 1
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	01 c0       	rjmp	.+2      	; 0x3424 <add_key+0x32>
    3422:	22 0f       	add	r18, r18
    3424:	8a 95       	dec	r24
    3426:	ea f7       	brpl	.-6      	; 0x3422 <add_key+0x30>
    3428:	81 81       	ldd	r24, Z+1	; 0x01
    342a:	82 2b       	or	r24, r18
    342c:	81 83       	std	Z+1, r24	; 0x01
    342e:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3430:	90 91 ec 01 	lds	r25, 0x01EC
    3434:	90 ff       	sbrs	r25, 0
    3436:	2d c0       	rjmp	.+90     	; 0x3492 <add_key+0xa0>
    3438:	1f 92       	push	r1
    343a:	8f 93       	push	r24
    343c:	8d ea       	ldi	r24, 0xAD	; 173
    343e:	93 e0       	ldi	r25, 0x03	; 3
    3440:	9f 93       	push	r25
    3442:	8f 93       	push	r24
    3444:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3452:	40 91 0c 01 	lds	r20, 0x010C
    3456:	50 91 0d 01 	lds	r21, 0x010D
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	9f ef       	ldi	r25, 0xFF	; 255
    3460:	fa 01       	movw	r30, r20
    3462:	e2 0f       	add	r30, r18
    3464:	f3 1f       	adc	r31, r19
    3466:	62 81       	ldd	r22, Z+2	; 0x02
    3468:	68 17       	cp	r22, r24
    346a:	99 f0       	breq	.+38     	; 0x3492 <add_key+0xa0>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    346c:	9f 3f       	cpi	r25, 0xFF	; 255
    346e:	19 f4       	brne	.+6      	; 0x3476 <add_key+0x84>
    3470:	61 11       	cpse	r22, r1
    3472:	01 c0       	rjmp	.+2      	; 0x3476 <add_key+0x84>
    3474:	92 2f       	mov	r25, r18
    3476:	2f 5f       	subi	r18, 0xFF	; 255
    3478:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    347a:	2e 31       	cpi	r18, 0x1E	; 30
    347c:	31 05       	cpc	r19, r1
    347e:	81 f7       	brne	.-32     	; 0x3460 <add_key+0x6e>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3480:	9f 3f       	cpi	r25, 0xFF	; 255
    3482:	39 f0       	breq	.+14     	; 0x3492 <add_key+0xa0>
            keyboard_report->keys[empty] = code;
    3484:	fa 01       	movw	r30, r20
    3486:	e9 0f       	add	r30, r25
    3488:	f1 1d       	adc	r31, r1
    348a:	97 fd       	sbrc	r25, 7
    348c:	fa 95       	dec	r31
    348e:	82 83       	std	Z+2, r24	; 0x02
    3490:	08 95       	ret
    3492:	08 95       	ret

00003494 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3494:	90 91 0a 01 	lds	r25, 0x010A
    3498:	99 23       	and	r25, r25
    349a:	69 f1       	breq	.+90     	; 0x34f6 <del_key+0x62>
    349c:	90 91 0b 01 	lds	r25, 0x010B
    34a0:	99 23       	and	r25, r25
    34a2:	49 f1       	breq	.+82     	; 0x34f6 <del_key+0x62>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    34a4:	98 2f       	mov	r25, r24
    34a6:	96 95       	lsr	r25
    34a8:	96 95       	lsr	r25
    34aa:	96 95       	lsr	r25
    34ac:	9f 31       	cpi	r25, 0x1F	; 31
    34ae:	90 f4       	brcc	.+36     	; 0x34d4 <del_key+0x40>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    34b0:	e0 91 0c 01 	lds	r30, 0x010C
    34b4:	f0 91 0d 01 	lds	r31, 0x010D
    34b8:	e9 0f       	add	r30, r25
    34ba:	f1 1d       	adc	r31, r1
    34bc:	87 70       	andi	r24, 0x07	; 7
    34be:	21 e0       	ldi	r18, 0x01	; 1
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <del_key+0x32>
    34c4:	22 0f       	add	r18, r18
    34c6:	8a 95       	dec	r24
    34c8:	ea f7       	brpl	.-6      	; 0x34c4 <del_key+0x30>
    34ca:	20 95       	com	r18
    34cc:	81 81       	ldd	r24, Z+1	; 0x01
    34ce:	28 23       	and	r18, r24
    34d0:	21 83       	std	Z+1, r18	; 0x01
    34d2:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    34d4:	90 91 ec 01 	lds	r25, 0x01EC
    34d8:	90 ff       	sbrs	r25, 0
    34da:	1f c0       	rjmp	.+62     	; 0x351a <del_key+0x86>
    34dc:	1f 92       	push	r1
    34de:	8f 93       	push	r24
    34e0:	8f e8       	ldi	r24, 0x8F	; 143
    34e2:	93 e0       	ldi	r25, 0x03	; 3
    34e4:	9f 93       	push	r25
    34e6:	8f 93       	push	r24
    34e8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    34ec:	0f 90       	pop	r0
    34ee:	0f 90       	pop	r0
    34f0:	0f 90       	pop	r0
    34f2:	0f 90       	pop	r0
    34f4:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    34f6:	40 91 0c 01 	lds	r20, 0x010C
    34fa:	50 91 0d 01 	lds	r21, 0x010D
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	fa 01       	movw	r30, r20
    3504:	e2 0f       	add	r30, r18
    3506:	f3 1f       	adc	r31, r19
    3508:	92 81       	ldd	r25, Z+2	; 0x02
    350a:	98 13       	cpse	r25, r24
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <del_key+0x7c>
            keyboard_report->keys[i] = 0;
    350e:	12 82       	std	Z+2, r1	; 0x02
    3510:	2f 5f       	subi	r18, 0xFF	; 255
    3512:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3514:	2e 31       	cpi	r18, 0x1E	; 30
    3516:	31 05       	cpc	r19, r1
    3518:	a1 f7       	brne	.-24     	; 0x3502 <del_key+0x6e>
    351a:	08 95       	ret

0000351c <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3520:	e0 91 0c 01 	lds	r30, 0x010C
    3524:	f0 91 0d 01 	lds	r31, 0x010D
    3528:	e8 0f       	add	r30, r24
    352a:	f9 1f       	adc	r31, r25
    352c:	10 82       	st	Z, r1
    352e:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3530:	80 32       	cpi	r24, 0x20	; 32
    3532:	91 05       	cpc	r25, r1
    3534:	a9 f7       	brne	.-22     	; 0x3520 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3536:	08 95       	ret

00003538 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3538:	80 91 eb 01 	lds	r24, 0x01EB
    353c:	08 95       	ret

0000353e <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    353e:	90 91 eb 01 	lds	r25, 0x01EB
    3542:	98 2b       	or	r25, r24
    3544:	90 93 eb 01 	sts	0x01EB, r25
    3548:	08 95       	ret

0000354a <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    354a:	80 95       	com	r24
    354c:	90 91 eb 01 	lds	r25, 0x01EB
    3550:	98 23       	and	r25, r24
    3552:	90 93 eb 01 	sts	0x01EB, r25
    3556:	08 95       	ret

00003558 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3558:	80 93 eb 01 	sts	0x01EB, r24
    355c:	08 95       	ret

0000355e <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    355e:	10 92 eb 01 	sts	0x01EB, r1
    3562:	08 95       	ret

00003564 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3564:	90 91 ea 01 	lds	r25, 0x01EA
    3568:	98 2b       	or	r25, r24
    356a:	90 93 ea 01 	sts	0x01EA, r25
    356e:	08 95       	ret

00003570 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3570:	80 95       	com	r24
    3572:	90 91 ea 01 	lds	r25, 0x01EA
    3576:	98 23       	and	r25, r24
    3578:	90 93 ea 01 	sts	0x01EA, r25
    357c:	08 95       	ret

0000357e <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    357e:	10 92 ea 01 	sts	0x01EA, r1
    3582:	08 95       	ret

00003584 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3584:	80 93 c9 01 	sts	0x01C9, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
    3588:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    358c:	90 93 c8 01 	sts	0x01C8, r25
    3590:	80 93 c7 01 	sts	0x01C7, r24
    3594:	08 95       	ret

00003596 <clear_oneshot_mods>:
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3596:	10 92 c9 01 	sts	0x01C9, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
    359a:	10 92 c8 01 	sts	0x01C8, r1
    359e:	10 92 c7 01 	sts	0x01C7, r1
    35a2:	08 95       	ret

000035a4 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    35a4:	40 91 0c 01 	lds	r20, 0x010C
    35a8:	50 91 0d 01 	lds	r21, 0x010D
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	fa 01       	movw	r30, r20
    35b4:	e2 0f       	add	r30, r18
    35b6:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    35b8:	91 81       	ldd	r25, Z+1	; 0x01
    35ba:	91 11       	cpse	r25, r1
            cnt++;
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	2f 5f       	subi	r18, 0xFF	; 255
    35c0:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    35c2:	2f 31       	cpi	r18, 0x1F	; 31
    35c4:	31 05       	cpc	r19, r1
    35c6:	a9 f7       	brne	.-22     	; 0x35b2 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    35c8:	08 95       	ret

000035ca <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    35ca:	e0 91 0c 01 	lds	r30, 0x010C
    35ce:	f0 91 0d 01 	lds	r31, 0x010D
    35d2:	80 91 eb 01 	lds	r24, 0x01EB
    35d6:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    35d8:	e0 91 0c 01 	lds	r30, 0x010C
    35dc:	f0 91 0d 01 	lds	r31, 0x010D
    35e0:	80 81       	ld	r24, Z
    35e2:	90 91 ea 01 	lds	r25, 0x01EA
    35e6:	89 2b       	or	r24, r25
    35e8:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    35ea:	80 91 c9 01 	lds	r24, 0x01C9
    35ee:	88 23       	and	r24, r24
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <send_keyboard_report+0x2a>
    35f2:	3e c0       	rjmp	.+124    	; 0x3670 <send_keyboard_report+0xa6>
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
    35f4:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    35f8:	20 91 c7 01 	lds	r18, 0x01C7
    35fc:	30 91 c8 01 	lds	r19, 0x01C8
    3600:	82 17       	cp	r24, r18
    3602:	93 07       	cpc	r25, r19
    3604:	60 f0       	brcs	.+24     	; 0x361e <send_keyboard_report+0x54>
    3606:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    360a:	20 91 c7 01 	lds	r18, 0x01C7
    360e:	30 91 c8 01 	lds	r19, 0x01C8
    3612:	82 1b       	sub	r24, r18
    3614:	93 0b       	sbc	r25, r19
    3616:	8c 32       	cpi	r24, 0x2C	; 44
    3618:	91 40       	sbci	r25, 0x01	; 1
    361a:	70 f4       	brcc	.+28     	; 0x3638 <send_keyboard_report+0x6e>
    361c:	1b c0       	rjmp	.+54     	; 0x3654 <send_keyboard_report+0x8a>
    361e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    3622:	20 91 c7 01 	lds	r18, 0x01C7
    3626:	30 91 c8 01 	lds	r19, 0x01C8
    362a:	20 95       	com	r18
    362c:	30 95       	com	r19
    362e:	28 0f       	add	r18, r24
    3630:	39 1f       	adc	r19, r25
    3632:	2c 32       	cpi	r18, 0x2C	; 44
    3634:	31 40       	sbci	r19, 0x01	; 1
    3636:	70 f0       	brcs	.+28     	; 0x3654 <send_keyboard_report+0x8a>
            dprintf("Oneshot: timeout\n");
    3638:	80 91 ec 01 	lds	r24, 0x01EC
    363c:	80 ff       	sbrs	r24, 0
    363e:	08 c0       	rjmp	.+16     	; 0x3650 <send_keyboard_report+0x86>
    3640:	8b ec       	ldi	r24, 0xCB	; 203
    3642:	93 e0       	ldi	r25, 0x03	; 3
    3644:	9f 93       	push	r25
    3646:	8f 93       	push	r24
    3648:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
            clear_oneshot_mods();
    3650:	0e 94 cb 1a 	call	0x3596	; 0x3596 <clear_oneshot_mods>
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3654:	e0 91 0c 01 	lds	r30, 0x010C
    3658:	f0 91 0d 01 	lds	r31, 0x010D
    365c:	80 81       	ld	r24, Z
    365e:	90 91 c9 01 	lds	r25, 0x01C9
    3662:	89 2b       	or	r24, r25
    3664:	80 83       	st	Z, r24
        if (has_anykey()) {
    3666:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <has_anykey>
    366a:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    366c:	0e 94 cb 1a 	call	0x3596	; 0x3596 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3670:	80 91 0c 01 	lds	r24, 0x010C
    3674:	90 91 0d 01 	lds	r25, 0x010D
    3678:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <host_keyboard_send>

0000367c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    367c:	90 93 39 01 	sts	0x0139, r25
    3680:	80 93 38 01 	sts	0x0138, r24
    3684:	08 95       	ret

00003686 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3686:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3688:	98 2f       	mov	r25, r24
    368a:	9c 7c       	andi	r25, 0xCC	; 204
    368c:	96 95       	lsr	r25
    368e:	96 95       	lsr	r25
    3690:	83 73       	andi	r24, 0x33	; 51
    3692:	44 e0       	ldi	r20, 0x04	; 4
    3694:	84 9f       	mul	r24, r20
    3696:	90 01       	movw	r18, r0
    3698:	11 24       	eor	r1, r1
    369a:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    369c:	89 2f       	mov	r24, r25
    369e:	8a 7a       	andi	r24, 0xAA	; 170
    36a0:	86 95       	lsr	r24
    36a2:	95 75       	andi	r25, 0x55	; 85
    36a4:	99 0f       	add	r25, r25
    return bits;
}
    36a6:	89 2b       	or	r24, r25
    36a8:	08 95       	ret

000036aa <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    36aa:	08 95       	ret

000036ac <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	00 d0       	rcall	.+0      	; 0x36b2 <hook_matrix_change+0x6>
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <hook_matrix_change+0x8>
    36b4:	1f 92       	push	r1
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	df 91       	pop	r29
    36c6:	cf 91       	pop	r28
    36c8:	08 95       	ret

000036ca <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    36ca:	08 95       	ret

000036cc <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    36cc:	08 95       	ret

000036ce <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    36ce:	0c 94 37 10 	jmp	0x206e	; 0x206e <keyboard_set_leds>

000036d2 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    36d2:	80 91 01 02 	lds	r24, 0x0201
    36d6:	84 30       	cpi	r24, 0x04	; 4
    36d8:	09 f1       	breq	.+66     	; 0x371c <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    36da:	10 92 ed 01 	sts	0x01ED, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    36de:	20 e4       	ldi	r18, 0x40	; 64
    36e0:	88 e1       	ldi	r24, 0x18	; 24
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	a8 95       	wdr
    36ea:	80 93 60 00 	sts	0x0060, r24
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    36f4:	83 b7       	in	r24, 0x33	; 51
    36f6:	81 7f       	andi	r24, 0xF1	; 241
    36f8:	84 60       	ori	r24, 0x04	; 4
    36fa:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    36fc:	83 b7       	in	r24, 0x33	; 51
    36fe:	81 60       	ori	r24, 0x01	; 1
    3700:	83 bf       	out	0x33, r24	; 51
    sei();
    3702:	78 94       	sei
    sleep_cpu();
    3704:	88 95       	sleep
    sleep_disable();
    3706:	83 b7       	in	r24, 0x33	; 51
    3708:	8e 7f       	andi	r24, 0xFE	; 254
    370a:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    370c:	88 e1       	ldi	r24, 0x18	; 24
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	80 93 60 00 	sts	0x0060, r24
    3716:	10 92 60 00 	sts	0x0060, r1
    371a:	0f be       	out	0x3f, r0	; 63
    371c:	08 95       	ret

0000371e <suspend_wakeup_condition>:
    power_down(WDTO_15MS);
#endif
}

bool suspend_wakeup_condition(void)
{
    371e:	cf 93       	push	r28
    matrix_power_up();
    3720:	0e 94 00 07 	call	0xe00	; 0xe00 <matrix_power_up>
    matrix_scan();
    3724:	0e 94 2a 06 	call	0xc54	; 0xc54 <matrix_scan>
    matrix_power_down();
    3728:	0e 94 01 07 	call	0xe02	; 0xe02 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    372c:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    372e:	8c 2f       	mov	r24, r28
    3730:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <matrix_get_row>
    3734:	81 11       	cpse	r24, r1
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3738:	cf 5f       	subi	r28, 0xFF	; 255
    373a:	c8 30       	cpi	r28, 0x08	; 8
    373c:	c1 f7       	brne	.-16     	; 0x372e <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3744:	cf 91       	pop	r28
    3746:	08 95       	ret

00003748 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    matrix_clear();
    3748:	0e 94 39 10 	call	0x2072	; 0x2072 <matrix_clear>
    clear_keyboard();
    374c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <clear_keyboard>

00003750 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3750:	1f 92       	push	r1
    3752:	0f 92       	push	r0
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	0f 92       	push	r0
    3758:	11 24       	eor	r1, r1
    375a:	8f 93       	push	r24
    375c:	9f 93       	push	r25
    375e:	af 93       	push	r26
    3760:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3762:	80 91 ed 01 	lds	r24, 0x01ED
    3766:	81 11       	cpse	r24, r1
    3768:	13 c0       	rjmp	.+38     	; 0x3790 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    376a:	80 91 ee 01 	lds	r24, 0x01EE
    376e:	90 91 ef 01 	lds	r25, 0x01EF
    3772:	a0 91 f0 01 	lds	r26, 0x01F0
    3776:	b0 91 f1 01 	lds	r27, 0x01F1
    377a:	41 96       	adiw	r24, 0x11	; 17
    377c:	a1 1d       	adc	r26, r1
    377e:	b1 1d       	adc	r27, r1
    3780:	80 93 ee 01 	sts	0x01EE, r24
    3784:	90 93 ef 01 	sts	0x01EF, r25
    3788:	a0 93 f0 01 	sts	0x01F0, r26
    378c:	b0 93 f1 01 	sts	0x01F1, r27
            break;
        default:
            ;
    }
}
    3790:	bf 91       	pop	r27
    3792:	af 91       	pop	r26
    3794:	9f 91       	pop	r25
    3796:	8f 91       	pop	r24
    3798:	0f 90       	pop	r0
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	0f 90       	pop	r0
    379e:	1f 90       	pop	r1
    37a0:	18 95       	reti

000037a2 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    37a2:	82 e0       	ldi	r24, 0x02	; 2
    37a4:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    37a6:	93 e0       	ldi	r25, 0x03	; 3
    37a8:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    37aa:	9a ef       	ldi	r25, 0xFA	; 250
    37ac:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    37ae:	80 93 6e 00 	sts	0x006E, r24
    37b2:	08 95       	ret

000037b4 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    37b4:	2f b7       	in	r18, 0x3f	; 63
    cli();
    37b6:	f8 94       	cli
    t = timer_count;
    37b8:	80 91 ee 01 	lds	r24, 0x01EE
    37bc:	90 91 ef 01 	lds	r25, 0x01EF
    37c0:	a0 91 f0 01 	lds	r26, 0x01F0
    37c4:	b0 91 f1 01 	lds	r27, 0x01F1
    SREG = sreg;
    37c8:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    37ca:	08 95       	ret

000037cc <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    37cc:	2f b7       	in	r18, 0x3f	; 63
    cli();
    37ce:	f8 94       	cli
    t = timer_count;
    37d0:	60 91 ee 01 	lds	r22, 0x01EE
    37d4:	70 91 ef 01 	lds	r23, 0x01EF
    37d8:	80 91 f0 01 	lds	r24, 0x01F0
    37dc:	90 91 f1 01 	lds	r25, 0x01F1
    SREG = sreg;
    37e0:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    37e2:	08 95       	ret

000037e4 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    37e4:	cf 92       	push	r12
    37e6:	df 92       	push	r13
    37e8:	ef 92       	push	r14
    37ea:	ff 92       	push	r15
    37ec:	0f 93       	push	r16
    37ee:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    37f0:	2f b7       	in	r18, 0x3f	; 63
    cli();
    37f2:	f8 94       	cli
    t = timer_count;
    37f4:	40 91 ee 01 	lds	r20, 0x01EE
    37f8:	50 91 ef 01 	lds	r21, 0x01EF
    37fc:	60 91 f0 01 	lds	r22, 0x01F0
    3800:	70 91 f1 01 	lds	r23, 0x01F1
    SREG = sreg;
    3804:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3806:	6a 01       	movw	r12, r20
    3808:	7b 01       	movw	r14, r22
    380a:	ee 24       	eor	r14, r14
    380c:	ff 24       	eor	r15, r15
    380e:	8c 01       	movw	r16, r24
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	c0 16       	cp	r12, r16
    3816:	d1 06       	cpc	r13, r17
    3818:	e2 06       	cpc	r14, r18
    381a:	f3 06       	cpc	r15, r19
    381c:	10 f4       	brcc	.+4      	; 0x3822 <timer_elapsed+0x3e>
    381e:	41 50       	subi	r20, 0x01	; 1
    3820:	51 09       	sbc	r21, r1
    3822:	48 1b       	sub	r20, r24
    3824:	59 0b       	sbc	r21, r25
}
    3826:	ca 01       	movw	r24, r20
    3828:	1f 91       	pop	r17
    382a:	0f 91       	pop	r16
    382c:	ff 90       	pop	r15
    382e:	ef 90       	pop	r14
    3830:	df 90       	pop	r13
    3832:	cf 90       	pop	r12
    3834:	08 95       	ret

00003836 <timer_elapsed32>:

inline
uint32_t timer_elapsed32(uint32_t last)
{
    3836:	cf 92       	push	r12
    3838:	df 92       	push	r13
    383a:	ef 92       	push	r14
    383c:	ff 92       	push	r15
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3842:	4f b7       	in	r20, 0x3f	; 63
    cli();
    3844:	f8 94       	cli
    t = timer_count;
    3846:	00 91 ee 01 	lds	r16, 0x01EE
    384a:	10 91 ef 01 	lds	r17, 0x01EF
    384e:	20 91 f0 01 	lds	r18, 0x01F0
    3852:	30 91 f1 01 	lds	r19, 0x01F1
    SREG = sreg;
    3856:	4f bf       	out	0x3f, r20	; 63
    3858:	68 01       	movw	r12, r16
    385a:	79 01       	movw	r14, r18
    385c:	c6 1a       	sub	r12, r22
    385e:	d7 0a       	sbc	r13, r23
    3860:	e8 0a       	sbc	r14, r24
    3862:	f9 0a       	sbc	r15, r25

    return TIMER_DIFF_32(t, last);
    3864:	06 17       	cp	r16, r22
    3866:	17 07       	cpc	r17, r23
    3868:	28 07       	cpc	r18, r24
    386a:	39 07       	cpc	r19, r25
    386c:	18 f0       	brcs	.+6      	; 0x3874 <timer_elapsed32+0x3e>
    386e:	c7 01       	movw	r24, r14
    3870:	b6 01       	movw	r22, r12
    3872:	06 c0       	rjmp	.+12     	; 0x3880 <timer_elapsed32+0x4a>
    3874:	c7 01       	movw	r24, r14
    3876:	b6 01       	movw	r22, r12
    3878:	61 50       	subi	r22, 0x01	; 1
    387a:	71 09       	sbc	r23, r1
    387c:	81 09       	sbc	r24, r1
    387e:	91 09       	sbc	r25, r1
}
    3880:	1f 91       	pop	r17
    3882:	0f 91       	pop	r16
    3884:	ff 90       	pop	r15
    3886:	ef 90       	pop	r14
    3888:	df 90       	pop	r13
    388a:	cf 90       	pop	r12
    388c:	08 95       	ret

0000388e <__vector_21>:

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    388e:	1f 92       	push	r1
    3890:	0f 92       	push	r0
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	0f 92       	push	r0
    3896:	11 24       	eor	r1, r1
    3898:	8f 93       	push	r24
    389a:	9f 93       	push	r25
    389c:	af 93       	push	r26
    389e:	bf 93       	push	r27
    timer_count++;
    38a0:	80 91 ee 01 	lds	r24, 0x01EE
    38a4:	90 91 ef 01 	lds	r25, 0x01EF
    38a8:	a0 91 f0 01 	lds	r26, 0x01F0
    38ac:	b0 91 f1 01 	lds	r27, 0x01F1
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	a1 1d       	adc	r26, r1
    38b4:	b1 1d       	adc	r27, r1
    38b6:	80 93 ee 01 	sts	0x01EE, r24
    38ba:	90 93 ef 01 	sts	0x01EF, r25
    38be:	a0 93 f0 01 	sts	0x01F0, r26
    38c2:	b0 93 f1 01 	sts	0x01F1, r27
}
    38c6:	bf 91       	pop	r27
    38c8:	af 91       	pop	r26
    38ca:	9f 91       	pop	r25
    38cc:	8f 91       	pop	r24
    38ce:	0f 90       	pop	r0
    38d0:	0f be       	out	0x3f, r0	; 63
    38d2:	0f 90       	pop	r0
    38d4:	1f 90       	pop	r1
    38d6:	18 95       	reti

000038d8 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    38d8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <USB_Disable>
    cli();
    38dc:	f8 94       	cli
    38de:	2f ef       	ldi	r18, 0xFF	; 255
    38e0:	87 ea       	ldi	r24, 0xA7	; 167
    38e2:	91 e6       	ldi	r25, 0x61	; 97
    38e4:	21 50       	subi	r18, 0x01	; 1
    38e6:	80 40       	sbci	r24, 0x00	; 0
    38e8:	90 40       	sbci	r25, 0x00	; 0
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <bootloader_jump+0xc>
    38ec:	00 c0       	rjmp	.+0      	; 0x38ee <bootloader_jump+0x16>
    38ee:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    38f0:	87 e0       	ldi	r24, 0x07	; 7
    38f2:	90 eb       	ldi	r25, 0xB0	; 176
    38f4:	dc 01       	movw	r26, r24
    38f6:	80 93 0a 02 	sts	0x020A, r24
    38fa:	90 93 0b 02 	sts	0x020B, r25
    38fe:	a0 93 0c 02 	sts	0x020C, r26
    3902:	b0 93 0d 02 	sts	0x020D, r27
    wdt_enable(WDTO_250MS);
    3906:	2c e0       	ldi	r18, 0x0C	; 12
    3908:	88 e1       	ldi	r24, 0x18	; 24
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	a8 95       	wdr
    3912:	80 93 60 00 	sts	0x0060, r24
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	20 93 60 00 	sts	0x0060, r18
    391c:	ff cf       	rjmp	.-2      	; 0x391c <bootloader_jump+0x44>

0000391e <unimap_translate>:
// translates raw matrix to universal map
keypos_t unimap_translate(keypos_t key)
{
    uint8_t unimap_pos = 
#if defined(__AVR__)
        pgm_read_byte(&unimap_trans[key.row][key.col]);
    391e:	28 e0       	ldi	r18, 0x08	; 8
    3920:	92 9f       	mul	r25, r18
    3922:	f0 01       	movw	r30, r0
    3924:	11 24       	eor	r1, r1
    3926:	e8 0f       	add	r30, r24
    3928:	f1 1d       	adc	r31, r1
    392a:	e0 52       	subi	r30, 0x20	; 32
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	94 91       	lpm	r25, Z
#endif
    return (keypos_t) {
        .row = ((unimap_pos & 0xf0) >> 4),
        .col = (unimap_pos & 0x0f)
    };
}
    3930:	89 2f       	mov	r24, r25
    3932:	8f 70       	andi	r24, 0x0F	; 15
    3934:	92 95       	swap	r25
    3936:	9f 70       	andi	r25, 0x0F	; 15
    3938:	08 95       	ret

0000393a <action_for_key>:

/* Converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    393a:	cf 93       	push	r28
    393c:	c8 2f       	mov	r28, r24
    keypos_t uni = unimap_translate(key);
    393e:	cb 01       	movw	r24, r22
    3940:	0e 94 8f 1c 	call	0x391e	; 0x391e <unimap_translate>
    if ((uni.row << 4 | uni.col) == UNIMAP_NO) {
    3944:	48 2f       	mov	r20, r24
    3946:	50 e0       	ldi	r21, 0x00	; 0
    3948:	80 e1       	ldi	r24, 0x10	; 16
    394a:	98 9f       	mul	r25, r24
    394c:	90 01       	movw	r18, r0
    394e:	11 24       	eor	r1, r1
    3950:	24 2b       	or	r18, r20
    3952:	35 2b       	or	r19, r21
    3954:	20 38       	cpi	r18, 0x80	; 128
    3956:	31 05       	cpc	r19, r1
    3958:	19 f4       	brne	.+6      	; 0x3960 <action_for_key+0x26>
        return (action_t)ACTION_NO;
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	15 c0       	rjmp	.+42     	; 0x398a <action_for_key+0x50>
    }
#if defined(__AVR__)
    return (action_t)pgm_read_word(&actionmaps[(layer)][(uni.row & 0x7)][(uni.col)]);
    3960:	97 70       	andi	r25, 0x07	; 7
    3962:	e9 2f       	mov	r30, r25
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	88 e0       	ldi	r24, 0x08	; 8
    3968:	c8 9f       	mul	r28, r24
    396a:	e0 0d       	add	r30, r0
    396c:	f1 1d       	adc	r31, r1
    396e:	11 24       	eor	r1, r1
    3970:	84 e0       	ldi	r24, 0x04	; 4
    3972:	ee 0f       	add	r30, r30
    3974:	ff 1f       	adc	r31, r31
    3976:	8a 95       	dec	r24
    3978:	e1 f7       	brne	.-8      	; 0x3972 <action_for_key+0x38>
    397a:	e4 0f       	add	r30, r20
    397c:	f5 1f       	adc	r31, r21
    397e:	ee 0f       	add	r30, r30
    3980:	ff 1f       	adc	r31, r31
    3982:	e0 50       	subi	r30, 0x00	; 0
    3984:	f8 49       	sbci	r31, 0x98	; 152
    3986:	85 91       	lpm	r24, Z+
    3988:	94 91       	lpm	r25, Z
#else
    return actionmaps[(layer)][(uni.row & 0x7)][(uni.col)];
#endif
}
    398a:	cf 91       	pop	r28
    398c:	08 95       	ret

0000398e <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	08 95       	ret

00003994 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3994:	08 95       	ret

00003996 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3996:	80 91 f4 01 	lds	r24, 0x01F4
    399a:	80 ff       	sbrs	r24, 0
    399c:	0b c0       	rjmp	.+22     	; 0x39b4 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    399e:	60 91 11 01 	lds	r22, 0x0111
    39a2:	85 e0       	ldi	r24, 0x05	; 5
    39a4:	68 9f       	mul	r22, r24
    39a6:	b0 01       	movw	r22, r0
    39a8:	11 24       	eor	r1, r1
    39aa:	75 95       	asr	r23
    39ac:	67 95       	ror	r22
    39ae:	75 95       	asr	r23
    39b0:	67 95       	ror	r22
    39b2:	2a c0       	rjmp	.+84     	; 0x3a08 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    39b4:	81 ff       	sbrs	r24, 1
    39b6:	09 c0       	rjmp	.+18     	; 0x39ca <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    39b8:	60 91 11 01 	lds	r22, 0x0111
    39bc:	85 e0       	ldi	r24, 0x05	; 5
    39be:	68 9f       	mul	r22, r24
    39c0:	b0 01       	movw	r22, r0
    39c2:	11 24       	eor	r1, r1
    39c4:	75 95       	asr	r23
    39c6:	67 95       	ror	r22
    39c8:	1f c0       	rjmp	.+62     	; 0x3a08 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    39ca:	82 ff       	sbrs	r24, 2
    39cc:	07 c0       	rjmp	.+14     	; 0x39dc <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    39ce:	60 91 11 01 	lds	r22, 0x0111
    39d2:	85 e0       	ldi	r24, 0x05	; 5
    39d4:	68 9f       	mul	r22, r24
    39d6:	b0 01       	movw	r22, r0
    39d8:	11 24       	eor	r1, r1
    39da:	16 c0       	rjmp	.+44     	; 0x3a08 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    39dc:	40 91 f5 01 	lds	r20, 0x01F5
    39e0:	44 23       	and	r20, r20
    39e2:	c9 f0       	breq	.+50     	; 0x3a16 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    39e4:	60 91 10 01 	lds	r22, 0x0110
    39e8:	46 17       	cp	r20, r22
    39ea:	88 f7       	brcc	.-30     	; 0x39ce <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    39ec:	20 91 11 01 	lds	r18, 0x0111
    39f0:	85 e0       	ldi	r24, 0x05	; 5
    39f2:	28 9f       	mul	r18, r24
    39f4:	90 01       	movw	r18, r0
    39f6:	11 24       	eor	r1, r1
    39f8:	42 9f       	mul	r20, r18
    39fa:	c0 01       	movw	r24, r0
    39fc:	43 9f       	mul	r20, r19
    39fe:	90 0d       	add	r25, r0
    3a00:	11 24       	eor	r1, r1
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	0e 94 87 24 	call	0x490e	; 0x490e <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3a08:	60 38       	cpi	r22, 0x80	; 128
    3a0a:	71 05       	cpc	r23, r1
    3a0c:	40 f4       	brcc	.+16     	; 0x3a1e <move_unit+0x88>
    3a0e:	61 15       	cp	r22, r1
    3a10:	71 05       	cpc	r23, r1
    3a12:	39 f0       	breq	.+14     	; 0x3a22 <move_unit+0x8c>
    3a14:	02 c0       	rjmp	.+4      	; 0x3a1a <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    3a16:	65 e0       	ldi	r22, 0x05	; 5
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    3a1a:	86 2f       	mov	r24, r22
    3a1c:	08 95       	ret
    3a1e:	8f e7       	ldi	r24, 0x7F	; 127
    3a20:	08 95       	ret
    3a22:	81 e0       	ldi	r24, 0x01	; 1
}
    3a24:	08 95       	ret

00003a26 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    3a26:	80 91 f4 01 	lds	r24, 0x01F4
    3a2a:	80 ff       	sbrs	r24, 0
    3a2c:	08 c0       	rjmp	.+16     	; 0x3a3e <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    3a2e:	60 91 0f 01 	lds	r22, 0x010F
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	75 95       	asr	r23
    3a36:	67 95       	ror	r22
    3a38:	75 95       	asr	r23
    3a3a:	67 95       	ror	r22
    3a3c:	21 c0       	rjmp	.+66     	; 0x3a80 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    3a3e:	81 ff       	sbrs	r24, 1
    3a40:	06 c0       	rjmp	.+12     	; 0x3a4e <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    3a42:	60 91 0f 01 	lds	r22, 0x010F
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	75 95       	asr	r23
    3a4a:	67 95       	ror	r22
    3a4c:	19 c0       	rjmp	.+50     	; 0x3a80 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    3a4e:	82 ff       	sbrs	r24, 2
    3a50:	04 c0       	rjmp	.+8      	; 0x3a5a <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    3a52:	60 91 0f 01 	lds	r22, 0x010F
    3a56:	70 e0       	ldi	r23, 0x00	; 0
    3a58:	10 c0       	rjmp	.+32     	; 0x3a7a <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    3a5a:	80 91 f5 01 	lds	r24, 0x01F5
    3a5e:	88 23       	and	r24, r24
    3a60:	c1 f0       	breq	.+48     	; 0x3a92 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    3a62:	60 91 0e 01 	lds	r22, 0x010E
    3a66:	86 17       	cp	r24, r22
    3a68:	a0 f7       	brcc	.-24     	; 0x3a52 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    3a6a:	90 91 0f 01 	lds	r25, 0x010F
    3a6e:	98 9f       	mul	r25, r24
    3a70:	c0 01       	movw	r24, r0
    3a72:	11 24       	eor	r1, r1
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	0e 94 87 24 	call	0x490e	; 0x490e <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    3a7a:	60 38       	cpi	r22, 0x80	; 128
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	28 f4       	brcc	.+10     	; 0x3a8a <wheel_unit+0x64>
    3a80:	61 15       	cp	r22, r1
    3a82:	71 05       	cpc	r23, r1
    3a84:	21 f0       	breq	.+8      	; 0x3a8e <wheel_unit+0x68>
    3a86:	86 2f       	mov	r24, r22
    3a88:	08 95       	ret
    3a8a:	8f e7       	ldi	r24, 0x7F	; 127
    3a8c:	08 95       	ret
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    3a92:	61 e0       	ldi	r22, 0x01	; 1
    3a94:	70 e0       	ldi	r23, 0x00	; 0
    3a96:	f4 cf       	rjmp	.-24     	; 0x3a80 <wheel_unit+0x5a>

00003a98 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    3a98:	80 3f       	cpi	r24, 0xF0	; 240
    3a9a:	21 f4       	brne	.+8      	; 0x3aa4 <mousekey_on+0xc>
    3a9c:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3aa0:	81 95       	neg	r24
    3aa2:	04 c0       	rjmp	.+8      	; 0x3aac <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    3aa4:	81 3f       	cpi	r24, 0xF1	; 241
    3aa6:	29 f4       	brne	.+10     	; 0x3ab2 <mousekey_on+0x1a>
    3aa8:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3aac:	80 93 f8 01 	sts	0x01F8, r24
    3ab0:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    3ab2:	82 3f       	cpi	r24, 0xF2	; 242
    3ab4:	21 f4       	brne	.+8      	; 0x3abe <mousekey_on+0x26>
    3ab6:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3aba:	81 95       	neg	r24
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    3abe:	83 3f       	cpi	r24, 0xF3	; 243
    3ac0:	29 f4       	brne	.+10     	; 0x3acc <mousekey_on+0x34>
    3ac2:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3ac6:	80 93 f7 01 	sts	0x01F7, r24
    3aca:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    3acc:	89 3f       	cpi	r24, 0xF9	; 249
    3ace:	19 f4       	brne	.+6      	; 0x3ad6 <mousekey_on+0x3e>
    3ad0:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3ad4:	05 c0       	rjmp	.+10     	; 0x3ae0 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    3ad6:	8a 3f       	cpi	r24, 0xFA	; 250
    3ad8:	31 f4       	brne	.+12     	; 0x3ae6 <mousekey_on+0x4e>
    3ada:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3ade:	81 95       	neg	r24
    3ae0:	80 93 f9 01 	sts	0x01F9, r24
    3ae4:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    3ae6:	8b 3f       	cpi	r24, 0xFB	; 251
    3ae8:	21 f4       	brne	.+8      	; 0x3af2 <mousekey_on+0x5a>
    3aea:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3aee:	81 95       	neg	r24
    3af0:	04 c0       	rjmp	.+8      	; 0x3afa <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    3af2:	8c 3f       	cpi	r24, 0xFC	; 252
    3af4:	29 f4       	brne	.+10     	; 0x3b00 <mousekey_on+0x68>
    3af6:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3afa:	80 93 fa 01 	sts	0x01FA, r24
    3afe:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    3b00:	84 3f       	cpi	r24, 0xF4	; 244
    3b02:	21 f4       	brne	.+8      	; 0x3b0c <mousekey_on+0x74>
    3b04:	80 91 f6 01 	lds	r24, 0x01F6
    3b08:	81 60       	ori	r24, 0x01	; 1
    3b0a:	17 c0       	rjmp	.+46     	; 0x3b3a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    3b0c:	85 3f       	cpi	r24, 0xF5	; 245
    3b0e:	21 f4       	brne	.+8      	; 0x3b18 <mousekey_on+0x80>
    3b10:	80 91 f6 01 	lds	r24, 0x01F6
    3b14:	82 60       	ori	r24, 0x02	; 2
    3b16:	11 c0       	rjmp	.+34     	; 0x3b3a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    3b18:	86 3f       	cpi	r24, 0xF6	; 246
    3b1a:	21 f4       	brne	.+8      	; 0x3b24 <mousekey_on+0x8c>
    3b1c:	80 91 f6 01 	lds	r24, 0x01F6
    3b20:	84 60       	ori	r24, 0x04	; 4
    3b22:	0b c0       	rjmp	.+22     	; 0x3b3a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    3b24:	87 3f       	cpi	r24, 0xF7	; 247
    3b26:	21 f4       	brne	.+8      	; 0x3b30 <mousekey_on+0x98>
    3b28:	80 91 f6 01 	lds	r24, 0x01F6
    3b2c:	88 60       	ori	r24, 0x08	; 8
    3b2e:	05 c0       	rjmp	.+10     	; 0x3b3a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    3b30:	88 3f       	cpi	r24, 0xF8	; 248
    3b32:	31 f4       	brne	.+12     	; 0x3b40 <mousekey_on+0xa8>
    3b34:	80 91 f6 01 	lds	r24, 0x01F6
    3b38:	80 61       	ori	r24, 0x10	; 16
    3b3a:	80 93 f6 01 	sts	0x01F6, r24
    3b3e:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    3b40:	8d 3f       	cpi	r24, 0xFD	; 253
    3b42:	21 f4       	brne	.+8      	; 0x3b4c <mousekey_on+0xb4>
    3b44:	80 91 f4 01 	lds	r24, 0x01F4
    3b48:	81 60       	ori	r24, 0x01	; 1
    3b4a:	0b c0       	rjmp	.+22     	; 0x3b62 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    3b4c:	8e 3f       	cpi	r24, 0xFE	; 254
    3b4e:	21 f4       	brne	.+8      	; 0x3b58 <mousekey_on+0xc0>
    3b50:	80 91 f4 01 	lds	r24, 0x01F4
    3b54:	82 60       	ori	r24, 0x02	; 2
    3b56:	05 c0       	rjmp	.+10     	; 0x3b62 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    3b58:	8f 3f       	cpi	r24, 0xFF	; 255
    3b5a:	29 f4       	brne	.+10     	; 0x3b66 <mousekey_on+0xce>
    3b5c:	80 91 f4 01 	lds	r24, 0x01F4
    3b60:	84 60       	ori	r24, 0x04	; 4
    3b62:	80 93 f4 01 	sts	0x01F4, r24
    3b66:	08 95       	ret

00003b68 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    3b68:	80 3f       	cpi	r24, 0xF0	; 240
    3b6a:	39 f4       	brne	.+14     	; 0x3b7a <mousekey_off+0x12>
    3b6c:	80 91 f8 01 	lds	r24, 0x01F8
    3b70:	87 ff       	sbrs	r24, 7
    3b72:	6c c0       	rjmp	.+216    	; 0x3c4c <mousekey_off+0xe4>
    3b74:	10 92 f8 01 	sts	0x01F8, r1
    3b78:	69 c0       	rjmp	.+210    	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    3b7a:	81 3f       	cpi	r24, 0xF1	; 241
    3b7c:	29 f4       	brne	.+10     	; 0x3b88 <mousekey_off+0x20>
    3b7e:	80 91 f8 01 	lds	r24, 0x01F8
    3b82:	18 16       	cp	r1, r24
    3b84:	bc f3       	brlt	.-18     	; 0x3b74 <mousekey_off+0xc>
    3b86:	62 c0       	rjmp	.+196    	; 0x3c4c <mousekey_off+0xe4>
    3b88:	90 91 f7 01 	lds	r25, 0x01F7
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    3b8c:	82 3f       	cpi	r24, 0xF2	; 242
    3b8e:	29 f4       	brne	.+10     	; 0x3b9a <mousekey_off+0x32>
    3b90:	97 ff       	sbrs	r25, 7
    3b92:	5c c0       	rjmp	.+184    	; 0x3c4c <mousekey_off+0xe4>
    3b94:	10 92 f7 01 	sts	0x01F7, r1
    3b98:	59 c0       	rjmp	.+178    	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    3b9a:	83 3f       	cpi	r24, 0xF3	; 243
    3b9c:	19 f4       	brne	.+6      	; 0x3ba4 <mousekey_off+0x3c>
    3b9e:	19 16       	cp	r1, r25
    3ba0:	cc f3       	brlt	.-14     	; 0x3b94 <mousekey_off+0x2c>
    3ba2:	54 c0       	rjmp	.+168    	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    3ba4:	89 3f       	cpi	r24, 0xF9	; 249
    3ba6:	41 f4       	brne	.+16     	; 0x3bb8 <mousekey_off+0x50>
    3ba8:	80 91 f9 01 	lds	r24, 0x01F9
    3bac:	18 16       	cp	r1, r24
    3bae:	0c f0       	brlt	.+2      	; 0x3bb2 <mousekey_off+0x4a>
    3bb0:	4d c0       	rjmp	.+154    	; 0x3c4c <mousekey_off+0xe4>
    3bb2:	10 92 f9 01 	sts	0x01F9, r1
    3bb6:	4a c0       	rjmp	.+148    	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    3bb8:	8a 3f       	cpi	r24, 0xFA	; 250
    3bba:	29 f4       	brne	.+10     	; 0x3bc6 <mousekey_off+0x5e>
    3bbc:	80 91 f9 01 	lds	r24, 0x01F9
    3bc0:	87 ff       	sbrs	r24, 7
    3bc2:	44 c0       	rjmp	.+136    	; 0x3c4c <mousekey_off+0xe4>
    3bc4:	f6 cf       	rjmp	.-20     	; 0x3bb2 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    3bc6:	8b 3f       	cpi	r24, 0xFB	; 251
    3bc8:	39 f4       	brne	.+14     	; 0x3bd8 <mousekey_off+0x70>
    3bca:	80 91 fa 01 	lds	r24, 0x01FA
    3bce:	87 ff       	sbrs	r24, 7
    3bd0:	3d c0       	rjmp	.+122    	; 0x3c4c <mousekey_off+0xe4>
    3bd2:	10 92 fa 01 	sts	0x01FA, r1
    3bd6:	3a c0       	rjmp	.+116    	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    3bd8:	8c 3f       	cpi	r24, 0xFC	; 252
    3bda:	29 f4       	brne	.+10     	; 0x3be6 <mousekey_off+0x7e>
    3bdc:	80 91 fa 01 	lds	r24, 0x01FA
    3be0:	18 16       	cp	r1, r24
    3be2:	bc f3       	brlt	.-18     	; 0x3bd2 <mousekey_off+0x6a>
    3be4:	33 c0       	rjmp	.+102    	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    3be6:	84 3f       	cpi	r24, 0xF4	; 244
    3be8:	21 f4       	brne	.+8      	; 0x3bf2 <mousekey_off+0x8a>
    3bea:	80 91 f6 01 	lds	r24, 0x01F6
    3bee:	8e 7f       	andi	r24, 0xFE	; 254
    3bf0:	17 c0       	rjmp	.+46     	; 0x3c20 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    3bf2:	85 3f       	cpi	r24, 0xF5	; 245
    3bf4:	21 f4       	brne	.+8      	; 0x3bfe <mousekey_off+0x96>
    3bf6:	80 91 f6 01 	lds	r24, 0x01F6
    3bfa:	8d 7f       	andi	r24, 0xFD	; 253
    3bfc:	11 c0       	rjmp	.+34     	; 0x3c20 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    3bfe:	86 3f       	cpi	r24, 0xF6	; 246
    3c00:	21 f4       	brne	.+8      	; 0x3c0a <mousekey_off+0xa2>
    3c02:	80 91 f6 01 	lds	r24, 0x01F6
    3c06:	8b 7f       	andi	r24, 0xFB	; 251
    3c08:	0b c0       	rjmp	.+22     	; 0x3c20 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    3c0a:	87 3f       	cpi	r24, 0xF7	; 247
    3c0c:	21 f4       	brne	.+8      	; 0x3c16 <mousekey_off+0xae>
    3c0e:	80 91 f6 01 	lds	r24, 0x01F6
    3c12:	87 7f       	andi	r24, 0xF7	; 247
    3c14:	05 c0       	rjmp	.+10     	; 0x3c20 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    3c16:	88 3f       	cpi	r24, 0xF8	; 248
    3c18:	31 f4       	brne	.+12     	; 0x3c26 <mousekey_off+0xbe>
    3c1a:	80 91 f6 01 	lds	r24, 0x01F6
    3c1e:	8f 7e       	andi	r24, 0xEF	; 239
    3c20:	80 93 f6 01 	sts	0x01F6, r24
    3c24:	13 c0       	rjmp	.+38     	; 0x3c4c <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    3c26:	8d 3f       	cpi	r24, 0xFD	; 253
    3c28:	21 f4       	brne	.+8      	; 0x3c32 <mousekey_off+0xca>
    3c2a:	80 91 f4 01 	lds	r24, 0x01F4
    3c2e:	8e 7f       	andi	r24, 0xFE	; 254
    3c30:	0b c0       	rjmp	.+22     	; 0x3c48 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    3c32:	8e 3f       	cpi	r24, 0xFE	; 254
    3c34:	21 f4       	brne	.+8      	; 0x3c3e <mousekey_off+0xd6>
    3c36:	80 91 f4 01 	lds	r24, 0x01F4
    3c3a:	8d 7f       	andi	r24, 0xFD	; 253
    3c3c:	05 c0       	rjmp	.+10     	; 0x3c48 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    3c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c40:	29 f4       	brne	.+10     	; 0x3c4c <mousekey_off+0xe4>
    3c42:	80 91 f4 01 	lds	r24, 0x01F4
    3c46:	8b 7f       	andi	r24, 0xFB	; 251
    3c48:	80 93 f4 01 	sts	0x01F4, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3c4c:	80 91 f7 01 	lds	r24, 0x01F7
    3c50:	81 11       	cpse	r24, r1
    3c52:	0e c0       	rjmp	.+28     	; 0x3c70 <mousekey_off+0x108>
    3c54:	80 91 f8 01 	lds	r24, 0x01F8
    3c58:	81 11       	cpse	r24, r1
    3c5a:	0a c0       	rjmp	.+20     	; 0x3c70 <mousekey_off+0x108>
    3c5c:	80 91 f9 01 	lds	r24, 0x01F9
    3c60:	81 11       	cpse	r24, r1
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <mousekey_off+0x108>
    3c64:	80 91 fa 01 	lds	r24, 0x01FA
    3c68:	81 11       	cpse	r24, r1
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <mousekey_off+0x108>
        mousekey_repeat = 0;
    3c6c:	10 92 f5 01 	sts	0x01F5, r1
    3c70:	08 95       	ret

00003c72 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    3c72:	80 91 ec 01 	lds	r24, 0x01EC
    3c76:	83 ff       	sbrs	r24, 3
    3c78:	7e c0       	rjmp	.+252    	; 0x3d76 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    3c7a:	84 e0       	ldi	r24, 0x04	; 4
    3c7c:	94 e0       	ldi	r25, 0x04	; 4
    3c7e:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    phex(mouse_report.buttons); print("|");
    3c82:	80 91 f6 01 	lds	r24, 0x01F6
    3c86:	1f 92       	push	r1
    3c88:	8f 93       	push	r24
    3c8a:	8f ef       	ldi	r24, 0xFF	; 255
    3c8c:	93 e0       	ldi	r25, 0x03	; 3
    3c8e:	9f 93       	push	r25
    3c90:	8f 93       	push	r24
    3c92:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3c96:	8d ef       	ldi	r24, 0xFD	; 253
    3c98:	93 e0       	ldi	r25, 0x03	; 3
    3c9a:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print_decs(mouse_report.x); print(" ");
    3c9e:	20 91 f7 01 	lds	r18, 0x01F7
    3ca2:	82 2f       	mov	r24, r18
    3ca4:	99 27       	eor	r25, r25
    3ca6:	87 fd       	sbrc	r24, 7
    3ca8:	90 95       	com	r25
    3caa:	9f 93       	push	r25
    3cac:	2f 93       	push	r18
    3cae:	8a ef       	ldi	r24, 0xFA	; 250
    3cb0:	93 e0       	ldi	r25, 0x03	; 3
    3cb2:	9f 93       	push	r25
    3cb4:	8f 93       	push	r24
    3cb6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3cba:	88 ef       	ldi	r24, 0xF8	; 248
    3cbc:	93 e0       	ldi	r25, 0x03	; 3
    3cbe:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print_decs(mouse_report.y); print(" ");
    3cc2:	20 91 f8 01 	lds	r18, 0x01F8
    3cc6:	82 2f       	mov	r24, r18
    3cc8:	99 27       	eor	r25, r25
    3cca:	87 fd       	sbrc	r24, 7
    3ccc:	90 95       	com	r25
    3cce:	9f 93       	push	r25
    3cd0:	2f 93       	push	r18
    3cd2:	85 ef       	ldi	r24, 0xF5	; 245
    3cd4:	93 e0       	ldi	r25, 0x03	; 3
    3cd6:	9f 93       	push	r25
    3cd8:	8f 93       	push	r24
    3cda:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3cde:	83 ef       	ldi	r24, 0xF3	; 243
    3ce0:	93 e0       	ldi	r25, 0x03	; 3
    3ce2:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print_decs(mouse_report.v); print(" ");
    3ce6:	20 91 f9 01 	lds	r18, 0x01F9
    3cea:	82 2f       	mov	r24, r18
    3cec:	99 27       	eor	r25, r25
    3cee:	87 fd       	sbrc	r24, 7
    3cf0:	90 95       	com	r25
    3cf2:	9f 93       	push	r25
    3cf4:	2f 93       	push	r18
    3cf6:	80 ef       	ldi	r24, 0xF0	; 240
    3cf8:	93 e0       	ldi	r25, 0x03	; 3
    3cfa:	9f 93       	push	r25
    3cfc:	8f 93       	push	r24
    3cfe:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3d02:	8e ee       	ldi	r24, 0xEE	; 238
    3d04:	93 e0       	ldi	r25, 0x03	; 3
    3d06:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print_decs(mouse_report.h); print("](");
    3d0a:	20 91 fa 01 	lds	r18, 0x01FA
    3d0e:	82 2f       	mov	r24, r18
    3d10:	99 27       	eor	r25, r25
    3d12:	87 fd       	sbrc	r24, 7
    3d14:	90 95       	com	r25
    3d16:	9f 93       	push	r25
    3d18:	2f 93       	push	r18
    3d1a:	8b ee       	ldi	r24, 0xEB	; 235
    3d1c:	93 e0       	ldi	r25, 0x03	; 3
    3d1e:	9f 93       	push	r25
    3d20:	8f 93       	push	r24
    3d22:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3d26:	88 ee       	ldi	r24, 0xE8	; 232
    3d28:	93 e0       	ldi	r25, 0x03	; 3
    3d2a:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print_dec(mousekey_repeat); print("/");
    3d2e:	80 91 f5 01 	lds	r24, 0x01F5
    3d32:	1f 92       	push	r1
    3d34:	8f 93       	push	r24
    3d36:	85 ee       	ldi	r24, 0xE5	; 229
    3d38:	93 e0       	ldi	r25, 0x03	; 3
    3d3a:	9f 93       	push	r25
    3d3c:	8f 93       	push	r24
    3d3e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3d42:	83 ee       	ldi	r24, 0xE3	; 227
    3d44:	93 e0       	ldi	r25, 0x03	; 3
    3d46:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print_dec(mousekey_accel); print(")\n");
    3d4a:	80 91 f4 01 	lds	r24, 0x01F4
    3d4e:	1f 92       	push	r1
    3d50:	8f 93       	push	r24
    3d52:	80 ee       	ldi	r24, 0xE0	; 224
    3d54:	93 e0       	ldi	r25, 0x03	; 3
    3d56:	9f 93       	push	r25
    3d58:	8f 93       	push	r24
    3d5a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3d5e:	8d ed       	ldi	r24, 0xDD	; 221
    3d60:	93 e0       	ldi	r25, 0x03	; 3
    3d62:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    3d66:	8d b7       	in	r24, 0x3d	; 61
    3d68:	9e b7       	in	r25, 0x3e	; 62
    3d6a:	4c 96       	adiw	r24, 0x1c	; 28
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	9e bf       	out	0x3e, r25	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    3d76:	86 ef       	ldi	r24, 0xF6	; 246
    3d78:	91 e0       	ldi	r25, 0x01	; 1
    3d7a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <host_mouse_send>
    last_timer = timer_read();
    3d7e:	0e 94 da 1b 	call	0x37b4	; 0x37b4 <timer_read>
    3d82:	90 93 f3 01 	sts	0x01F3, r25
    3d86:	80 93 f2 01 	sts	0x01F2, r24
    3d8a:	08 95       	ret

00003d8c <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    3d8c:	1f 93       	push	r17
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    3d92:	80 91 f2 01 	lds	r24, 0x01F2
    3d96:	90 91 f3 01 	lds	r25, 0x01F3
    3d9a:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <timer_elapsed>
    3d9e:	40 91 f5 01 	lds	r20, 0x01F5
    3da2:	44 23       	and	r20, r20
    3da4:	21 f0       	breq	.+8      	; 0x3dae <mousekey_task+0x22>
    3da6:	20 91 12 01 	lds	r18, 0x0112
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	06 c0       	rjmp	.+12     	; 0x3dba <mousekey_task+0x2e>
    3dae:	20 91 13 01 	lds	r18, 0x0113
    3db2:	5a e0       	ldi	r21, 0x0A	; 10
    3db4:	25 9f       	mul	r18, r21
    3db6:	90 01       	movw	r18, r0
    3db8:	11 24       	eor	r1, r1
    3dba:	82 17       	cp	r24, r18
    3dbc:	93 07       	cpc	r25, r19
    3dbe:	08 f4       	brcc	.+2      	; 0x3dc2 <mousekey_task+0x36>
    3dc0:	82 c0       	rjmp	.+260    	; 0x3ec6 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    3dc2:	80 91 f7 01 	lds	r24, 0x01F7
    3dc6:	10 91 f8 01 	lds	r17, 0x01F8
    3dca:	d0 91 f9 01 	lds	r29, 0x01F9
    3dce:	c0 91 fa 01 	lds	r28, 0x01FA
    3dd2:	81 11       	cpse	r24, r1
    3dd4:	07 c0       	rjmp	.+14     	; 0x3de4 <mousekey_task+0x58>
    3dd6:	11 11       	cpse	r17, r1
    3dd8:	05 c0       	rjmp	.+10     	; 0x3de4 <mousekey_task+0x58>
    3dda:	d1 11       	cpse	r29, r1
    3ddc:	03 c0       	rjmp	.+6      	; 0x3de4 <mousekey_task+0x58>
    3dde:	cc 23       	and	r28, r28
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <mousekey_task+0x58>
    3de2:	71 c0       	rjmp	.+226    	; 0x3ec6 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    3de4:	4f 3f       	cpi	r20, 0xFF	; 255
    3de6:	19 f0       	breq	.+6      	; 0x3dee <mousekey_task+0x62>
        mousekey_repeat++;
    3de8:	4f 5f       	subi	r20, 0xFF	; 255
    3dea:	40 93 f5 01 	sts	0x01F5, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    3dee:	18 16       	cp	r1, r24
    3df0:	24 f4       	brge	.+8      	; 0x3dfa <mousekey_task+0x6e>
    3df2:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3df6:	80 93 f7 01 	sts	0x01F7, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    3dfa:	80 91 f7 01 	lds	r24, 0x01F7
    3dfe:	87 ff       	sbrs	r24, 7
    3e00:	05 c0       	rjmp	.+10     	; 0x3e0c <mousekey_task+0x80>
    3e02:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3e06:	81 95       	neg	r24
    3e08:	80 93 f7 01 	sts	0x01F7, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    3e0c:	11 16       	cp	r1, r17
    3e0e:	24 f4       	brge	.+8      	; 0x3e18 <mousekey_task+0x8c>
    3e10:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3e14:	80 93 f8 01 	sts	0x01F8, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    3e18:	80 91 f8 01 	lds	r24, 0x01F8
    3e1c:	87 ff       	sbrs	r24, 7
    3e1e:	05 c0       	rjmp	.+10     	; 0x3e2a <mousekey_task+0x9e>
    3e20:	0e 94 cb 1c 	call	0x3996	; 0x3996 <move_unit>
    3e24:	81 95       	neg	r24
    3e26:	80 93 f8 01 	sts	0x01F8, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    3e2a:	60 91 f7 01 	lds	r22, 0x01F7
    3e2e:	66 23       	and	r22, r22
    3e30:	39 f1       	breq	.+78     	; 0x3e80 <mousekey_task+0xf4>
    3e32:	10 91 f8 01 	lds	r17, 0x01F8
    3e36:	11 23       	and	r17, r17
    3e38:	19 f1       	breq	.+70     	; 0x3e80 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    3e3a:	77 27       	eor	r23, r23
    3e3c:	67 fd       	sbrc	r22, 7
    3e3e:	70 95       	com	r23
    3e40:	87 2f       	mov	r24, r23
    3e42:	97 2f       	mov	r25, r23
    3e44:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    3e48:	23 e3       	ldi	r18, 0x33	; 51
    3e4a:	33 e3       	ldi	r19, 0x33	; 51
    3e4c:	43 e3       	ldi	r20, 0x33	; 51
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    3e54:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__fixsfsi>
    3e58:	60 93 f7 01 	sts	0x01F7, r22
        mouse_report.y *= 0.7;
    3e5c:	61 2f       	mov	r22, r17
    3e5e:	77 27       	eor	r23, r23
    3e60:	67 fd       	sbrc	r22, 7
    3e62:	70 95       	com	r23
    3e64:	87 2f       	mov	r24, r23
    3e66:	97 2f       	mov	r25, r23
    3e68:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    3e6c:	23 e3       	ldi	r18, 0x33	; 51
    3e6e:	33 e3       	ldi	r19, 0x33	; 51
    3e70:	43 e3       	ldi	r20, 0x33	; 51
    3e72:	5f e3       	ldi	r21, 0x3F	; 63
    3e74:	0e 94 f0 23 	call	0x47e0	; 0x47e0 <__mulsf3>
    3e78:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__fixsfsi>
    3e7c:	60 93 f8 01 	sts	0x01F8, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    3e80:	1d 16       	cp	r1, r29
    3e82:	24 f4       	brge	.+8      	; 0x3e8c <mousekey_task+0x100>
    3e84:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3e88:	80 93 f9 01 	sts	0x01F9, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    3e8c:	80 91 f9 01 	lds	r24, 0x01F9
    3e90:	87 ff       	sbrs	r24, 7
    3e92:	05 c0       	rjmp	.+10     	; 0x3e9e <mousekey_task+0x112>
    3e94:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3e98:	81 95       	neg	r24
    3e9a:	80 93 f9 01 	sts	0x01F9, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    3e9e:	1c 16       	cp	r1, r28
    3ea0:	24 f4       	brge	.+8      	; 0x3eaa <mousekey_task+0x11e>
    3ea2:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3ea6:	80 93 fa 01 	sts	0x01FA, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    3eaa:	80 91 fa 01 	lds	r24, 0x01FA
    3eae:	87 ff       	sbrs	r24, 7
    3eb0:	05 c0       	rjmp	.+10     	; 0x3ebc <mousekey_task+0x130>
    3eb2:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <wheel_unit>
    3eb6:	81 95       	neg	r24
    3eb8:	80 93 fa 01 	sts	0x01FA, r24

    mousekey_send();
}
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    3ec2:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <mousekey_send>
}
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	08 95       	ret

00003ece <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    3ece:	e6 ef       	ldi	r30, 0xF6	; 246
    3ed0:	f1 e0       	ldi	r31, 0x01	; 1
    3ed2:	85 e0       	ldi	r24, 0x05	; 5
    3ed4:	df 01       	movw	r26, r30
    3ed6:	1d 92       	st	X+, r1
    3ed8:	8a 95       	dec	r24
    3eda:	e9 f7       	brne	.-6      	; 0x3ed6 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    3edc:	10 92 f5 01 	sts	0x01F5, r1
    mousekey_accel = 0;
    3ee0:	10 92 f4 01 	sts	0x01F4, r1
    3ee4:	08 95       	ret

00003ee6 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    3ee6:	87 e2       	ldi	r24, 0x27	; 39
    3ee8:	96 e0       	ldi	r25, 0x06	; 6
    3eea:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    3eee:	1f 92       	push	r1
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	8f 93       	push	r24
    3ef4:	1f 92       	push	r1
    3ef6:	85 e0       	ldi	r24, 0x05	; 5
    3ef8:	8f 93       	push	r24
    3efa:	89 ed       	ldi	r24, 0xD9	; 217
    3efc:	95 e0       	ldi	r25, 0x05	; 5
    3efe:	9f 93       	push	r25
    3f00:	8f 93       	push	r24
    3f02:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
    3f0e:	0f 90       	pop	r0
    3f10:	0f 90       	pop	r0
    3f12:	08 95       	ret

00003f14 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    3f14:	83 30       	cpi	r24, 0x03	; 3
    3f16:	e9 f1       	breq	.+122    	; 0x3f92 <mousekey_param_inc+0x7e>
    3f18:	28 f4       	brcc	.+10     	; 0x3f24 <mousekey_param_inc+0x10>
    3f1a:	81 30       	cpi	r24, 0x01	; 1
    3f1c:	61 f0       	breq	.+24     	; 0x3f36 <mousekey_param_inc+0x22>
    3f1e:	82 30       	cpi	r24, 0x02	; 2
    3f20:	09 f1       	breq	.+66     	; 0x3f64 <mousekey_param_inc+0x50>
    3f22:	08 95       	ret
    3f24:	85 30       	cpi	r24, 0x05	; 5
    3f26:	09 f4       	brne	.+2      	; 0x3f2a <mousekey_param_inc+0x16>
    3f28:	62 c0       	rjmp	.+196    	; 0x3fee <mousekey_param_inc+0xda>
    3f2a:	08 f4       	brcc	.+2      	; 0x3f2e <mousekey_param_inc+0x1a>
    3f2c:	49 c0       	rjmp	.+146    	; 0x3fc0 <mousekey_param_inc+0xac>
    3f2e:	86 30       	cpi	r24, 0x06	; 6
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <mousekey_param_inc+0x20>
    3f32:	74 c0       	rjmp	.+232    	; 0x401c <mousekey_param_inc+0x108>
    3f34:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    3f36:	20 91 13 01 	lds	r18, 0x0113
    3f3a:	86 2f       	mov	r24, r22
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	82 0f       	add	r24, r18
    3f40:	91 1d       	adc	r25, r1
    3f42:	8f 3f       	cpi	r24, 0xFF	; 255
    3f44:	91 05       	cpc	r25, r1
    3f46:	20 f4       	brcc	.+8      	; 0x3f50 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    3f48:	62 0f       	add	r22, r18
    3f4a:	60 93 13 01 	sts	0x0113, r22
    3f4e:	03 c0       	rjmp	.+6      	; 0x3f56 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    3f50:	8f ef       	ldi	r24, 0xFF	; 255
    3f52:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    3f56:	80 91 13 01 	lds	r24, 0x0113
    3f5a:	1f 92       	push	r1
    3f5c:	8f 93       	push	r24
    3f5e:	82 e1       	ldi	r24, 0x12	; 18
    3f60:	95 e0       	ldi	r25, 0x05	; 5
    3f62:	72 c0       	rjmp	.+228    	; 0x4048 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    3f64:	20 91 12 01 	lds	r18, 0x0112
    3f68:	86 2f       	mov	r24, r22
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	82 0f       	add	r24, r18
    3f6e:	91 1d       	adc	r25, r1
    3f70:	8f 3f       	cpi	r24, 0xFF	; 255
    3f72:	91 05       	cpc	r25, r1
    3f74:	20 f4       	brcc	.+8      	; 0x3f7e <mousekey_param_inc+0x6a>
                mk_interval += inc;
    3f76:	62 0f       	add	r22, r18
    3f78:	60 93 12 01 	sts	0x0112, r22
    3f7c:	03 c0       	rjmp	.+6      	; 0x3f84 <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    3f7e:	8f ef       	ldi	r24, 0xFF	; 255
    3f80:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    3f84:	80 91 12 01 	lds	r24, 0x0112
    3f88:	1f 92       	push	r1
    3f8a:	8f 93       	push	r24
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	95 e0       	ldi	r25, 0x05	; 5
    3f90:	5b c0       	rjmp	.+182    	; 0x4048 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    3f92:	20 91 11 01 	lds	r18, 0x0111
    3f96:	86 2f       	mov	r24, r22
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	82 0f       	add	r24, r18
    3f9c:	91 1d       	adc	r25, r1
    3f9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	20 f4       	brcc	.+8      	; 0x3fac <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    3fa4:	62 0f       	add	r22, r18
    3fa6:	60 93 11 01 	sts	0x0111, r22
    3faa:	03 c0       	rjmp	.+6      	; 0x3fb2 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    3fac:	8f ef       	ldi	r24, 0xFF	; 255
    3fae:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    3fb2:	80 91 11 01 	lds	r24, 0x0111
    3fb6:	1f 92       	push	r1
    3fb8:	8f 93       	push	r24
    3fba:	8d ee       	ldi	r24, 0xED	; 237
    3fbc:	94 e0       	ldi	r25, 0x04	; 4
    3fbe:	44 c0       	rjmp	.+136    	; 0x4048 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    3fc0:	20 91 10 01 	lds	r18, 0x0110
    3fc4:	86 2f       	mov	r24, r22
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	82 0f       	add	r24, r18
    3fca:	91 1d       	adc	r25, r1
    3fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    3fce:	91 05       	cpc	r25, r1
    3fd0:	20 f4       	brcc	.+8      	; 0x3fda <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    3fd2:	62 0f       	add	r22, r18
    3fd4:	60 93 10 01 	sts	0x0110, r22
    3fd8:	03 c0       	rjmp	.+6      	; 0x3fe0 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    3fda:	8f ef       	ldi	r24, 0xFF	; 255
    3fdc:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    3fe0:	80 91 10 01 	lds	r24, 0x0110
    3fe4:	1f 92       	push	r1
    3fe6:	8f 93       	push	r24
    3fe8:	88 ed       	ldi	r24, 0xD8	; 216
    3fea:	94 e0       	ldi	r25, 0x04	; 4
    3fec:	2d c0       	rjmp	.+90     	; 0x4048 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    3fee:	20 91 0f 01 	lds	r18, 0x010F
    3ff2:	86 2f       	mov	r24, r22
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	82 0f       	add	r24, r18
    3ff8:	91 1d       	adc	r25, r1
    3ffa:	8f 3f       	cpi	r24, 0xFF	; 255
    3ffc:	91 05       	cpc	r25, r1
    3ffe:	20 f4       	brcc	.+8      	; 0x4008 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    4000:	62 0f       	add	r22, r18
    4002:	60 93 0f 01 	sts	0x010F, r22
    4006:	03 c0       	rjmp	.+6      	; 0x400e <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4008:	8f ef       	ldi	r24, 0xFF	; 255
    400a:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    400e:	80 91 0f 01 	lds	r24, 0x010F
    4012:	1f 92       	push	r1
    4014:	8f 93       	push	r24
    4016:	8f eb       	ldi	r24, 0xBF	; 191
    4018:	94 e0       	ldi	r25, 0x04	; 4
    401a:	16 c0       	rjmp	.+44     	; 0x4048 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    401c:	20 91 0e 01 	lds	r18, 0x010E
    4020:	86 2f       	mov	r24, r22
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	82 0f       	add	r24, r18
    4026:	91 1d       	adc	r25, r1
    4028:	8f 3f       	cpi	r24, 0xFF	; 255
    402a:	91 05       	cpc	r25, r1
    402c:	20 f4       	brcc	.+8      	; 0x4036 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    402e:	62 0f       	add	r22, r18
    4030:	60 93 0e 01 	sts	0x010E, r22
    4034:	03 c0       	rjmp	.+6      	; 0x403c <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4036:	8f ef       	ldi	r24, 0xFF	; 255
    4038:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    403c:	80 91 0e 01 	lds	r24, 0x010E
    4040:	1f 92       	push	r1
    4042:	8f 93       	push	r24
    4044:	84 ea       	ldi	r24, 0xA4	; 164
    4046:	94 e0       	ldi	r25, 0x04	; 4
    4048:	9f 93       	push	r25
    404a:	8f 93       	push	r24
    404c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
            break;
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	08 95       	ret

0000405a <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    405a:	83 30       	cpi	r24, 0x03	; 3
    405c:	81 f1       	breq	.+96     	; 0x40be <mousekey_param_dec+0x64>
    405e:	28 f4       	brcc	.+10     	; 0x406a <mousekey_param_dec+0x10>
    4060:	81 30       	cpi	r24, 0x01	; 1
    4062:	59 f0       	breq	.+22     	; 0x407a <mousekey_param_dec+0x20>
    4064:	82 30       	cpi	r24, 0x02	; 2
    4066:	d1 f0       	breq	.+52     	; 0x409c <mousekey_param_dec+0x42>
    4068:	08 95       	ret
    406a:	85 30       	cpi	r24, 0x05	; 5
    406c:	09 f4       	brne	.+2      	; 0x4070 <mousekey_param_dec+0x16>
    406e:	49 c0       	rjmp	.+146    	; 0x4102 <mousekey_param_dec+0xa8>
    4070:	b8 f1       	brcs	.+110    	; 0x40e0 <mousekey_param_dec+0x86>
    4072:	86 30       	cpi	r24, 0x06	; 6
    4074:	09 f4       	brne	.+2      	; 0x4078 <mousekey_param_dec+0x1e>
    4076:	56 c0       	rjmp	.+172    	; 0x4124 <mousekey_param_dec+0xca>
    4078:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    407a:	80 91 13 01 	lds	r24, 0x0113
    407e:	68 17       	cp	r22, r24
    4080:	20 f4       	brcc	.+8      	; 0x408a <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4082:	86 1b       	sub	r24, r22
    4084:	80 93 13 01 	sts	0x0113, r24
    4088:	02 c0       	rjmp	.+4      	; 0x408e <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    408a:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    408e:	80 91 13 01 	lds	r24, 0x0113
    4092:	1f 92       	push	r1
    4094:	8f 93       	push	r24
    4096:	85 e9       	ldi	r24, 0x95	; 149
    4098:	94 e0       	ldi	r25, 0x04	; 4
    409a:	54 c0       	rjmp	.+168    	; 0x4144 <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    409c:	80 91 12 01 	lds	r24, 0x0112
    40a0:	68 17       	cp	r22, r24
    40a2:	20 f4       	brcc	.+8      	; 0x40ac <mousekey_param_dec+0x52>
                mk_interval -= dec;
    40a4:	86 1b       	sub	r24, r22
    40a6:	80 93 12 01 	sts	0x0112, r24
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    40ac:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    40b0:	80 91 12 01 	lds	r24, 0x0112
    40b4:	1f 92       	push	r1
    40b6:	8f 93       	push	r24
    40b8:	83 e8       	ldi	r24, 0x83	; 131
    40ba:	94 e0       	ldi	r25, 0x04	; 4
    40bc:	43 c0       	rjmp	.+134    	; 0x4144 <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    40be:	80 91 11 01 	lds	r24, 0x0111
    40c2:	68 17       	cp	r22, r24
    40c4:	20 f4       	brcc	.+8      	; 0x40ce <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    40c6:	86 1b       	sub	r24, r22
    40c8:	80 93 11 01 	sts	0x0111, r24
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    40ce:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    40d2:	80 91 11 01 	lds	r24, 0x0111
    40d6:	1f 92       	push	r1
    40d8:	8f 93       	push	r24
    40da:	80 e7       	ldi	r24, 0x70	; 112
    40dc:	94 e0       	ldi	r25, 0x04	; 4
    40de:	32 c0       	rjmp	.+100    	; 0x4144 <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    40e0:	80 91 10 01 	lds	r24, 0x0110
    40e4:	68 17       	cp	r22, r24
    40e6:	20 f4       	brcc	.+8      	; 0x40f0 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    40e8:	86 1b       	sub	r24, r22
    40ea:	80 93 10 01 	sts	0x0110, r24
    40ee:	02 c0       	rjmp	.+4      	; 0x40f4 <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    40f0:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    40f4:	80 91 10 01 	lds	r24, 0x0110
    40f8:	1f 92       	push	r1
    40fa:	8f 93       	push	r24
    40fc:	8b e5       	ldi	r24, 0x5B	; 91
    40fe:	94 e0       	ldi	r25, 0x04	; 4
    4100:	21 c0       	rjmp	.+66     	; 0x4144 <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4102:	80 91 0f 01 	lds	r24, 0x010F
    4106:	68 17       	cp	r22, r24
    4108:	20 f4       	brcc	.+8      	; 0x4112 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    410a:	86 1b       	sub	r24, r22
    410c:	80 93 0f 01 	sts	0x010F, r24
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    4112:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4116:	80 91 0f 01 	lds	r24, 0x010F
    411a:	1f 92       	push	r1
    411c:	8f 93       	push	r24
    411e:	82 e4       	ldi	r24, 0x42	; 66
    4120:	94 e0       	ldi	r25, 0x04	; 4
    4122:	10 c0       	rjmp	.+32     	; 0x4144 <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4124:	80 91 0e 01 	lds	r24, 0x010E
    4128:	68 17       	cp	r22, r24
    412a:	20 f4       	brcc	.+8      	; 0x4134 <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    412c:	86 1b       	sub	r24, r22
    412e:	80 93 0e 01 	sts	0x010E, r24
    4132:	02 c0       	rjmp	.+4      	; 0x4138 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    4134:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4138:	80 91 0e 01 	lds	r24, 0x010E
    413c:	1f 92       	push	r1
    413e:	8f 93       	push	r24
    4140:	87 e2       	ldi	r24, 0x27	; 39
    4142:	94 e0       	ldi	r25, 0x04	; 4
    4144:	9f 93       	push	r25
    4146:	8f 93       	push	r24
    4148:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
            break;
    414c:	0f 90       	pop	r0
    414e:	0f 90       	pop	r0
    4150:	0f 90       	pop	r0
    4152:	0f 90       	pop	r0
    4154:	08 95       	ret

00004156 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4156:	cf 93       	push	r28
    4158:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    415a:	1f 92       	push	r1
    415c:	8f 93       	push	r24
    415e:	2c e2       	ldi	r18, 0x2C	; 44
    4160:	37 e0       	ldi	r19, 0x07	; 7
    4162:	3f 93       	push	r19
    4164:	2f 93       	push	r18
    4166:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    default_layer_set(1UL<<layer);
    416a:	61 e0       	ldi	r22, 0x01	; 1
    416c:	70 e0       	ldi	r23, 0x00	; 0
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	04 c0       	rjmp	.+8      	; 0x417c <switch_default_layer+0x26>
    4174:	66 0f       	add	r22, r22
    4176:	77 1f       	adc	r23, r23
    4178:	88 1f       	adc	r24, r24
    417a:	99 1f       	adc	r25, r25
    417c:	ca 95       	dec	r28
    417e:	d2 f7       	brpl	.-12     	; 0x4174 <switch_default_layer+0x1e>
    4180:	0e 94 df 18 	call	0x31be	; 0x31be <default_layer_set>
    clear_keyboard();
    4184:	0f 90       	pop	r0
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
}
    418c:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    418e:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <clear_keyboard>

00004192 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4192:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    4194:	87 32       	cpi	r24, 0x27	; 39
    4196:	a8 f5       	brcc	.+106    	; 0x4202 <command_common+0x70>
    4198:	8e 31       	cpi	r24, 0x1E	; 30
    419a:	08 f0       	brcs	.+2      	; 0x419e <command_common+0xc>
    419c:	28 c1       	rjmp	.+592    	; 0x43ee <command_common+0x25c>
    419e:	80 31       	cpi	r24, 0x10	; 16
    41a0:	09 f4       	brne	.+2      	; 0x41a4 <command_common+0x12>
    41a2:	9d c0       	rjmp	.+314    	; 0x42de <command_common+0x14c>
    41a4:	f8 f4       	brcc	.+62     	; 0x41e4 <command_common+0x52>
    41a6:	87 30       	cpi	r24, 0x07	; 7
    41a8:	09 f4       	brne	.+2      	; 0x41ac <command_common+0x1a>
    41aa:	64 c0       	rjmp	.+200    	; 0x4274 <command_common+0xe2>
    41ac:	a8 f4       	brcc	.+42     	; 0x41d8 <command_common+0x46>
    41ae:	86 30       	cpi	r24, 0x06	; 6
    41b0:	09 f0       	breq	.+2      	; 0x41b4 <command_common+0x22>
    41b2:	21 c1       	rjmp	.+578    	; 0x43f6 <command_common+0x264>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    41b4:	80 91 ec 01 	lds	r24, 0x01EC
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    41b8:	81 7f       	andi	r24, 0xF1	; 241
    41ba:	8e 7f       	andi	r24, 0xFE	; 254
    41bc:	80 93 ec 01 	sts	0x01EC, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    41c0:	81 e3       	ldi	r24, 0x31	; 49
    41c2:	97 e0       	ldi	r25, 0x07	; 7
    41c4:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    41c8:	85 e1       	ldi	r24, 0x15	; 21
    41ca:	9a e0       	ldi	r25, 0x0A	; 10
    41cc:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            command_state = CONSOLE;
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	80 93 fc 01 	sts	0x01FC, r24
    41d6:	4c c0       	rjmp	.+152    	; 0x4270 <command_common+0xde>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    41d8:	8b 30       	cpi	r24, 0x0B	; 11
    41da:	f1 f1       	breq	.+124    	; 0x4258 <command_common+0xc6>
    41dc:	8e 30       	cpi	r24, 0x0E	; 14
    41de:	09 f4       	brne	.+2      	; 0x41e2 <command_common+0x50>
    41e0:	6b c0       	rjmp	.+214    	; 0x42b8 <command_common+0x126>
    41e2:	09 c1       	rjmp	.+530    	; 0x43f6 <command_common+0x264>
    41e4:	86 31       	cpi	r24, 0x16	; 22
    41e6:	09 f4       	brne	.+2      	; 0x41ea <command_common+0x58>
    41e8:	ad c0       	rjmp	.+346    	; 0x4344 <command_common+0x1b2>
    41ea:	20 f4       	brcc	.+8      	; 0x41f4 <command_common+0x62>
    41ec:	81 31       	cpi	r24, 0x11	; 17
    41ee:	09 f4       	brne	.+2      	; 0x41f2 <command_common+0x60>
    41f0:	ea c0       	rjmp	.+468    	; 0x43c6 <command_common+0x234>
    41f2:	01 c1       	rjmp	.+514    	; 0x43f6 <command_common+0x264>
    41f4:	89 31       	cpi	r24, 0x19	; 25
    41f6:	09 f4       	brne	.+2      	; 0x41fa <command_common+0x68>
    41f8:	8e c0       	rjmp	.+284    	; 0x4316 <command_common+0x184>
    41fa:	8b 31       	cpi	r24, 0x1B	; 27
    41fc:	09 f4       	brne	.+2      	; 0x4200 <command_common+0x6e>
    41fe:	49 c0       	rjmp	.+146    	; 0x4292 <command_common+0x100>
    4200:	fa c0       	rjmp	.+500    	; 0x43f6 <command_common+0x264>
    4202:	88 33       	cpi	r24, 0x38	; 56
    4204:	49 f1       	breq	.+82     	; 0x4258 <command_common+0xc6>
    4206:	50 f4       	brcc	.+20     	; 0x421c <command_common+0x8a>
    4208:	89 32       	cpi	r24, 0x29	; 41
    420a:	09 f4       	brne	.+2      	; 0x420e <command_common+0x7c>
    420c:	ee c0       	rjmp	.+476    	; 0x43ea <command_common+0x258>
    420e:	85 33       	cpi	r24, 0x35	; 53
    4210:	09 f4       	brne	.+2      	; 0x4214 <command_common+0x82>
    4212:	eb c0       	rjmp	.+470    	; 0x43ea <command_common+0x258>
    4214:	87 32       	cpi	r24, 0x27	; 39
    4216:	09 f0       	breq	.+2      	; 0x421a <command_common+0x88>
    4218:	ee c0       	rjmp	.+476    	; 0x43f6 <command_common+0x264>
    421a:	e7 c0       	rjmp	.+462    	; 0x43ea <command_common+0x258>
    421c:	83 34       	cpi	r24, 0x43	; 67
    421e:	09 f4       	brne	.+2      	; 0x4222 <command_common+0x90>
    4220:	e4 c0       	rjmp	.+456    	; 0x43ea <command_common+0x258>
    4222:	28 f4       	brcc	.+10     	; 0x422e <command_common+0x9c>
    4224:	8a 33       	cpi	r24, 0x3A	; 58
    4226:	08 f4       	brcc	.+2      	; 0x422a <command_common+0x98>
    4228:	e6 c0       	rjmp	.+460    	; 0x43f6 <command_common+0x264>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    422a:	89 53       	subi	r24, 0x39	; 57
    422c:	e1 c0       	rjmp	.+450    	; 0x43f0 <command_common+0x25e>
    static host_driver_t *host_driver = 0;
#endif
#ifdef SLEEP_LED_ENABLE
    static bool sleep_led_test = false;
#endif
    switch (code) {
    422e:	88 34       	cpi	r24, 0x48	; 72
    4230:	09 f0       	breq	.+2      	; 0x4234 <command_common+0xa2>
    4232:	e1 c0       	rjmp	.+450    	; 0x43f6 <command_common+0x264>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4234:	0e 94 b0 14 	call	0x2960	; 0x2960 <clear_keyboard>
            print("\n\nbootloader... ");
    4238:	84 e0       	ldi	r24, 0x04	; 4
    423a:	9a e0       	ldi	r25, 0x0A	; 10
    423c:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    4240:	2f ef       	ldi	r18, 0xFF	; 255
    4242:	83 ed       	ldi	r24, 0xD3	; 211
    4244:	90 e3       	ldi	r25, 0x30	; 48
    4246:	21 50       	subi	r18, 0x01	; 1
    4248:	80 40       	sbci	r24, 0x00	; 0
    424a:	90 40       	sbci	r25, 0x00	; 0
    424c:	e1 f7       	brne	.-8      	; 0x4246 <command_common+0xb4>
    424e:	00 c0       	rjmp	.+0      	; 0x4250 <command_common+0xbe>
    4250:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    4252:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <bootloader_jump>
    4256:	0c c0       	rjmp	.+24     	; 0x4270 <command_common+0xde>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4258:	88 e5       	ldi	r24, 0x58	; 88
    425a:	97 e0       	ldi	r25, 0x07	; 7
    425c:	59 c0       	rjmp	.+178    	; 0x4310 <command_common+0x17e>
                debug_matrix   = false;
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
            } else {
                print("\ndebug: on\n");
    425e:	8b ee       	ldi	r24, 0xEB	; 235
    4260:	99 e0       	ldi	r25, 0x09	; 9
    4262:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
                debug_enable   = true;
    4266:	80 91 ec 01 	lds	r24, 0x01EC
    426a:	81 60       	ori	r24, 0x01	; 1
    426c:	80 93 ec 01 	sts	0x01EC, r24
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4270:	c1 e0       	ldi	r28, 0x01	; 1
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
    4272:	c6 c0       	rjmp	.+396    	; 0x4400 <command_common+0x26e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4274:	80 91 ec 01 	lds	r24, 0x01EC
    4278:	c8 2f       	mov	r28, r24
    427a:	c1 70       	andi	r28, 0x01	; 1
    427c:	80 ff       	sbrs	r24, 0
    427e:	ef cf       	rjmp	.-34     	; 0x425e <command_common+0xcc>
                print("\ndebug: off\n");
    4280:	87 ef       	ldi	r24, 0xF7	; 247
    4282:	99 e0       	ldi	r25, 0x09	; 9
    4284:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
                debug_matrix   = false;
    4288:	80 91 ec 01 	lds	r24, 0x01EC
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    428c:	81 7f       	andi	r24, 0xF1	; 241
    428e:	8e 7f       	andi	r24, 0xFE	; 254
    4290:	3a c0       	rjmp	.+116    	; 0x4306 <command_common+0x174>
                print("\ndebug: on\n");
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4292:	80 91 ec 01 	lds	r24, 0x01EC
    4296:	81 fb       	bst	r24, 1
    4298:	cc 27       	eor	r28, r28
    429a:	c0 f9       	bld	r28, 0
    429c:	91 e0       	ldi	r25, 0x01	; 1
    429e:	c9 27       	eor	r28, r25
    42a0:	c0 fb       	bst	r28, 0
    42a2:	81 f9       	bld	r24, 1
    42a4:	80 93 ec 01 	sts	0x01EC, r24
            if (debug_matrix) {
    42a8:	cc 23       	and	r28, r28
    42aa:	19 f0       	breq	.+6      	; 0x42b2 <command_common+0x120>
                print("\nmatrix: on\n");
    42ac:	8e ed       	ldi	r24, 0xDE	; 222
    42ae:	99 e0       	ldi	r25, 0x09	; 9
    42b0:	25 c0       	rjmp	.+74     	; 0x42fc <command_common+0x16a>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    42b2:	80 ed       	ldi	r24, 0xD0	; 208
    42b4:	99 e0       	ldi	r25, 0x09	; 9
    42b6:	2c c0       	rjmp	.+88     	; 0x4310 <command_common+0x17e>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    42b8:	80 91 ec 01 	lds	r24, 0x01EC
    42bc:	82 fb       	bst	r24, 2
    42be:	cc 27       	eor	r28, r28
    42c0:	c0 f9       	bld	r28, 0
    42c2:	91 e0       	ldi	r25, 0x01	; 1
    42c4:	c9 27       	eor	r28, r25
    42c6:	c0 fb       	bst	r28, 0
    42c8:	82 f9       	bld	r24, 2
    42ca:	80 93 ec 01 	sts	0x01EC, r24
            if (debug_keyboard) {
    42ce:	cc 23       	and	r28, r28
    42d0:	19 f0       	breq	.+6      	; 0x42d8 <command_common+0x146>
                print("\nkeyboard: on\n");
    42d2:	81 ec       	ldi	r24, 0xC1	; 193
    42d4:	99 e0       	ldi	r25, 0x09	; 9
    42d6:	12 c0       	rjmp	.+36     	; 0x42fc <command_common+0x16a>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    42d8:	81 eb       	ldi	r24, 0xB1	; 177
    42da:	99 e0       	ldi	r25, 0x09	; 9
    42dc:	19 c0       	rjmp	.+50     	; 0x4310 <command_common+0x17e>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    42de:	80 91 ec 01 	lds	r24, 0x01EC
    42e2:	83 fb       	bst	r24, 3
    42e4:	cc 27       	eor	r28, r28
    42e6:	c0 f9       	bld	r28, 0
    42e8:	91 e0       	ldi	r25, 0x01	; 1
    42ea:	c9 27       	eor	r28, r25
    42ec:	c0 fb       	bst	r28, 0
    42ee:	83 f9       	bld	r24, 3
    42f0:	80 93 ec 01 	sts	0x01EC, r24
            if (debug_mouse) {
    42f4:	cc 23       	and	r28, r28
    42f6:	51 f0       	breq	.+20     	; 0x430c <command_common+0x17a>
                print("\nmouse: on\n");
    42f8:	85 ea       	ldi	r24, 0xA5	; 165
    42fa:	99 e0       	ldi	r25, 0x09	; 9
    42fc:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
                debug_enable = true;
    4300:	80 91 ec 01 	lds	r24, 0x01EC
    4304:	81 60       	ori	r24, 0x01	; 1
    4306:	80 93 ec 01 	sts	0x01EC, r24
    430a:	7a c0       	rjmp	.+244    	; 0x4400 <command_common+0x26e>
            } else {
                print("\nmouse: off\n");
    430c:	88 e9       	ldi	r24, 0x98	; 152
    430e:	99 e0       	ldi	r25, 0x09	; 9
    4310:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    4314:	ad cf       	rjmp	.-166    	; 0x4270 <command_common+0xde>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4316:	89 e8       	ldi	r24, 0x89	; 137
    4318:	99 e0       	ldi	r25, 0x09	; 9
    431a:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    431e:	8c e5       	ldi	r24, 0x5C	; 92
    4320:	99 e0       	ldi	r25, 0x09	; 9
    4322:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4326:	85 e2       	ldi	r24, 0x25	; 37
    4328:	99 e0       	ldi	r25, 0x09	; 9
    432a:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    432e:	8e ef       	ldi	r24, 0xFE	; 254
    4330:	98 e0       	ldi	r25, 0x08	; 8
    4332:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            /* build options */
            print("OPTIONS:"
    4336:	84 eb       	ldi	r24, 0xB4	; 180
    4338:	98 e0       	ldi	r25, 0x08	; 8
    433a:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    433e:	86 e8       	ldi	r24, 0x86	; 134
    4340:	98 e0       	ldi	r25, 0x08	; 8
    4342:	e6 cf       	rjmp	.-52     	; 0x4310 <command_common+0x17e>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4344:	88 e7       	ldi	r24, 0x78	; 120
    4346:	98 e0       	ldi	r25, 0x08	; 8
    4348:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            print_val_hex8(host_keyboard_leds());
    434c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <host_keyboard_leds>
    4350:	1f 92       	push	r1
    4352:	8f 93       	push	r24
    4354:	8e e5       	ldi	r24, 0x5E	; 94
    4356:	98 e0       	ldi	r25, 0x08	; 8
    4358:	9f 93       	push	r25
    435a:	8f 93       	push	r24
    435c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4360:	80 91 0a 01 	lds	r24, 0x010A
    4364:	1f 92       	push	r1
    4366:	8f 93       	push	r24
    4368:	87 e4       	ldi	r24, 0x47	; 71
    436a:	98 e0       	ldi	r25, 0x08	; 8
    436c:	9f 93       	push	r25
    436e:	8f 93       	push	r24
    4370:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
            print_val_hex8(keyboard_idle);
    4374:	80 91 77 01 	lds	r24, 0x0177
    4378:	1f 92       	push	r1
    437a:	8f 93       	push	r24
    437c:	84 e3       	ldi	r24, 0x34	; 52
    437e:	98 e0       	ldi	r25, 0x08	; 8
    4380:	9f 93       	push	r25
    4382:	8f 93       	push	r24
    4384:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    4388:	80 91 0b 01 	lds	r24, 0x010B
    438c:	1f 92       	push	r1
    438e:	8f 93       	push	r24
    4390:	81 e2       	ldi	r24, 0x21	; 33
    4392:	98 e0       	ldi	r25, 0x08	; 8
    4394:	9f 93       	push	r25
    4396:	8f 93       	push	r24
    4398:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
#endif
            print_val_hex32(timer_read32());
    439c:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <timer_read32>
    43a0:	9f 93       	push	r25
    43a2:	8f 93       	push	r24
    43a4:	7f 93       	push	r23
    43a6:	6f 93       	push	r22
    43a8:	8a e0       	ldi	r24, 0x0A	; 10
    43aa:	98 e0       	ldi	r25, 0x08	; 8
    43ac:	9f 93       	push	r25
    43ae:	8f 93       	push	r24
    43b0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    43b4:	8d b7       	in	r24, 0x3d	; 61
    43b6:	9e b7       	in	r25, 0x3e	; 62
    43b8:	46 96       	adiw	r24, 0x16	; 22
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	9e bf       	out	0x3e, r25	; 62
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	8d bf       	out	0x3d, r24	; 61
    43c4:	55 cf       	rjmp	.-342    	; 0x4270 <command_common+0xde>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    43c6:	0e 94 b0 14 	call	0x2960	; 0x2960 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    43ca:	c0 91 0b 01 	lds	r28, 0x010B
    43ce:	81 e0       	ldi	r24, 0x01	; 1
    43d0:	c8 27       	eor	r28, r24
    43d2:	c0 93 0b 01 	sts	0x010B, r28
            if (keyboard_nkro) {
    43d6:	cc 23       	and	r28, r28
    43d8:	29 f0       	breq	.+10     	; 0x43e4 <command_common+0x252>
                print("NKRO: on\n");
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	98 e0       	ldi	r25, 0x08	; 8
    43de:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    43e2:	0e c0       	rjmp	.+28     	; 0x4400 <command_common+0x26e>
            } else {
                print("NKRO: off\n");
    43e4:	85 ef       	ldi	r24, 0xF5	; 245
    43e6:	97 e0       	ldi	r25, 0x07	; 7
    43e8:	93 cf       	rjmp	.-218    	; 0x4310 <command_common+0x17e>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	01 c0       	rjmp	.+2      	; 0x43f0 <command_common+0x25e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    43ee:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    43f0:	0e 94 ab 20 	call	0x4156	; 0x4156 <switch_default_layer>
    43f4:	3d cf       	rjmp	.-390    	; 0x4270 <command_common+0xde>
            break;
        default:
            print("?");
    43f6:	83 ef       	ldi	r24, 0xF3	; 243
    43f8:	97 e0       	ldi	r25, 0x07	; 7
    43fa:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            return false;
    43fe:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4400:	8c 2f       	mov	r24, r28
    4402:	cf 91       	pop	r28
    4404:	08 95       	ret

00004406 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	08 95       	ret

0000440a <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	08 95       	ret

0000440e <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    440e:	cf 93       	push	r28
    4410:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4412:	80 91 fc 01 	lds	r24, 0x01FC
    4416:	81 30       	cpi	r24, 0x01	; 1
    4418:	71 f0       	breq	.+28     	; 0x4436 <command_proc+0x28>
    441a:	20 f0       	brcs	.+8      	; 0x4424 <command_proc+0x16>
    441c:	82 30       	cpi	r24, 0x02	; 2
    441e:	09 f4       	brne	.+2      	; 0x4422 <command_proc+0x14>
    4420:	48 c0       	rjmp	.+144    	; 0x44b2 <command_proc+0xa4>
    4422:	3f c1       	rjmp	.+638    	; 0x46a2 <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4424:	a0 91 0c 01 	lds	r26, 0x010C
    4428:	b0 91 0d 01 	lds	r27, 0x010D
    442c:	8c 91       	ld	r24, X
    442e:	82 32       	cpi	r24, 0x22	; 34
    4430:	09 f0       	breq	.+2      	; 0x4434 <command_proc+0x26>
    4432:	39 c1       	rjmp	.+626    	; 0x46a6 <command_proc+0x298>
    4434:	07 c0       	rjmp	.+14     	; 0x4444 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4436:	a0 91 0c 01 	lds	r26, 0x010C
    443a:	b0 91 0d 01 	lds	r27, 0x010D
    443e:	8c 91       	ld	r24, X
    4440:	82 32       	cpi	r24, 0x22	; 34
    4442:	49 f4       	brne	.+18     	; 0x4456 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4444:	8c 2f       	mov	r24, r28
    4446:	0e 94 03 22 	call	0x4406	; 0x4406 <command_extra>
    444a:	81 11       	cpse	r24, r1
    444c:	2f c0       	rjmp	.+94     	; 0x44ac <command_proc+0x9e>
    444e:	8c 2f       	mov	r24, r28
    4450:	0e 94 c9 20 	call	0x4192	; 0x4192 <command_common>
    4454:	2c c0       	rjmp	.+88     	; 0x44ae <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4456:	8c 2f       	mov	r24, r28
    4458:	0e 94 05 22 	call	0x440a	; 0x440a <command_console_extra>
    445c:	81 11       	cpse	r24, r1
    445e:	26 c0       	rjmp	.+76     	; 0x44ac <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4460:	c4 31       	cpi	r28, 0x14	; 20
    4462:	e1 f0       	breq	.+56     	; 0x449c <command_proc+0x8e>
    4464:	70 f4       	brcc	.+28     	; 0x4482 <command_proc+0x74>
    4466:	cb 30       	cpi	r28, 0x0B	; 11
    4468:	81 f0       	breq	.+32     	; 0x448a <command_proc+0x7c>
    446a:	c0 31       	cpi	r28, 0x10	; 16
    446c:	d1 f4       	brne	.+52     	; 0x44a2 <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    446e:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <mousekey_console_help>
            print("M> ");
    4472:	84 e2       	ldi	r24, 0x24	; 36
    4474:	97 e0       	ldi	r25, 0x07	; 7
    4476:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
            command_state = MOUSEKEY;
    447a:	82 e0       	ldi	r24, 0x02	; 2
    447c:	80 93 fc 01 	sts	0x01FC, r24
    4480:	15 c0       	rjmp	.+42     	; 0x44ac <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4482:	c9 32       	cpi	r28, 0x29	; 41
    4484:	59 f0       	breq	.+22     	; 0x449c <command_proc+0x8e>
    4486:	c8 33       	cpi	r28, 0x38	; 56
    4488:	61 f4       	brne	.+24     	; 0x44a2 <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    448a:	81 e3       	ldi	r24, 0x31	; 49
    448c:	97 e0       	ldi	r25, 0x07	; 7
    448e:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4492:	88 e2       	ldi	r24, 0x28	; 40
    4494:	97 e0       	ldi	r25, 0x07	; 7
    4496:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    449a:	08 c0       	rjmp	.+16     	; 0x44ac <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    449c:	10 92 fc 01 	sts	0x01FC, r1
    44a0:	04 c1       	rjmp	.+520    	; 0x46aa <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    44a2:	82 e2       	ldi	r24, 0x22	; 34
    44a4:	97 e0       	ldi	r25, 0x07	; 7
    44a6:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    44aa:	ff c0       	rjmp	.+510    	; 0x46aa <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	81 70       	andi	r24, 0x01	; 1
    44b0:	fe c0       	rjmp	.+508    	; 0x46ae <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    44b2:	c4 32       	cpi	r28, 0x24	; 36
    44b4:	28 f5       	brcc	.+74     	; 0x4500 <command_proc+0xf2>
    44b6:	ce 31       	cpi	r28, 0x1E	; 30
    44b8:	08 f0       	brcs	.+2      	; 0x44bc <command_proc+0xae>
    44ba:	c1 c0       	rjmp	.+386    	; 0x463e <command_proc+0x230>
    44bc:	cb 30       	cpi	r28, 0x0B	; 11
    44be:	a1 f1       	breq	.+104    	; 0x4528 <command_proc+0x11a>
    44c0:	d0 f4       	brcc	.+52     	; 0x44f6 <command_proc+0xe8>
    44c2:	c7 30       	cpi	r28, 0x07	; 7
    44c4:	09 f0       	breq	.+2      	; 0x44c8 <command_proc+0xba>
    44c6:	d3 c0       	rjmp	.+422    	; 0x466e <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    44c8:	8e e1       	ldi	r24, 0x1E	; 30
    44ca:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    44ce:	82 e3       	ldi	r24, 0x32	; 50
    44d0:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    44d4:	8a e0       	ldi	r24, 0x0A	; 10
    44d6:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    44da:	84 e1       	ldi	r24, 0x14	; 20
    44dc:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    44e0:	88 e0       	ldi	r24, 0x08	; 8
    44e2:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    44e6:	88 e2       	ldi	r24, 0x28	; 40
    44e8:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    44ec:	88 ec       	ldi	r24, 0xC8	; 200
    44ee:	95 e0       	ldi	r25, 0x05	; 5
    44f0:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    44f4:	bf c0       	rjmp	.+382    	; 0x4674 <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    44f6:	c3 31       	cpi	r28, 0x13	; 19
    44f8:	49 f1       	breq	.+82     	; 0x454c <command_proc+0x13e>
    44fa:	c4 31       	cpi	r28, 0x14	; 20
    44fc:	c1 f0       	breq	.+48     	; 0x452e <command_proc+0x120>
    44fe:	b7 c0       	rjmp	.+366    	; 0x466e <command_proc+0x260>
    4500:	cb 34       	cpi	r28, 0x4B	; 75
    4502:	09 f4       	brne	.+2      	; 0x4506 <command_proc+0xf8>
    4504:	a9 c0       	rjmp	.+338    	; 0x4658 <command_proc+0x24a>
    4506:	28 f4       	brcc	.+10     	; 0x4512 <command_proc+0x104>
    4508:	c9 32       	cpi	r28, 0x29	; 41
    450a:	89 f0       	breq	.+34     	; 0x452e <command_proc+0x120>
    450c:	c8 33       	cpi	r28, 0x38	; 56
    450e:	61 f0       	breq	.+24     	; 0x4528 <command_proc+0x11a>
    4510:	ae c0       	rjmp	.+348    	; 0x466e <command_proc+0x260>
    4512:	c1 35       	cpi	r28, 0x51	; 81
    4514:	09 f4       	brne	.+2      	; 0x4518 <command_proc+0x10a>
    4516:	9e c0       	rjmp	.+316    	; 0x4654 <command_proc+0x246>
    4518:	c2 35       	cpi	r28, 0x52	; 82
    451a:	09 f4       	brne	.+2      	; 0x451e <command_proc+0x110>
    451c:	99 c0       	rjmp	.+306    	; 0x4650 <command_proc+0x242>
    451e:	ce 34       	cpi	r28, 0x4E	; 78
    4520:	09 f0       	breq	.+2      	; 0x4524 <command_proc+0x116>
    4522:	a5 c0       	rjmp	.+330    	; 0x466e <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4524:	6a e0       	ldi	r22, 0x0A	; 10
    4526:	9e c0       	rjmp	.+316    	; 0x4664 <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4528:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <mousekey_console_help>
    452c:	a3 c0       	rjmp	.+326    	; 0x4674 <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    452e:	80 91 fb 01 	lds	r24, 0x01FB
    4532:	88 23       	and	r24, r24
    4534:	19 f0       	breq	.+6      	; 0x453c <command_proc+0x12e>
                mousekey_param = 0;
    4536:	10 92 fb 01 	sts	0x01FB, r1
    453a:	9c c0       	rjmp	.+312    	; 0x4674 <command_proc+0x266>
            } else {
                print("C> ");
    453c:	85 ed       	ldi	r24, 0xD5	; 213
    453e:	95 e0       	ldi	r25, 0x05	; 5
    4540:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
                command_state = CONSOLE;
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	80 93 fc 01 	sts	0x01FC, r24
    454a:	b1 c0       	rjmp	.+354    	; 0x46ae <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    454c:	8f ea       	ldi	r24, 0xAF	; 175
    454e:	95 e0       	ldi	r25, 0x05	; 5
    4550:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4554:	8d e9       	ldi	r24, 0x9D	; 157
    4556:	95 e0       	ldi	r25, 0x05	; 5
    4558:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    455c:	80 91 13 01 	lds	r24, 0x0113
    4560:	1f 92       	push	r1
    4562:	8f 93       	push	r24
    4564:	8a e9       	ldi	r24, 0x9A	; 154
    4566:	95 e0       	ldi	r25, 0x05	; 5
    4568:	9f 93       	push	r25
    456a:	8f 93       	push	r24
    456c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    4570:	88 e9       	ldi	r24, 0x98	; 152
    4572:	95 e0       	ldi	r25, 0x05	; 5
    4574:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4578:	86 e8       	ldi	r24, 0x86	; 134
    457a:	95 e0       	ldi	r25, 0x05	; 5
    457c:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    4580:	80 91 12 01 	lds	r24, 0x0112
    4584:	1f 92       	push	r1
    4586:	8f 93       	push	r24
    4588:	83 e8       	ldi	r24, 0x83	; 131
    458a:	95 e0       	ldi	r25, 0x05	; 5
    458c:	9f 93       	push	r25
    458e:	8f 93       	push	r24
    4590:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    4594:	81 e8       	ldi	r24, 0x81	; 129
    4596:	95 e0       	ldi	r25, 0x05	; 5
    4598:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    459c:	82 e7       	ldi	r24, 0x72	; 114
    459e:	95 e0       	ldi	r25, 0x05	; 5
    45a0:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    45a4:	80 91 11 01 	lds	r24, 0x0111
    45a8:	1f 92       	push	r1
    45aa:	8f 93       	push	r24
    45ac:	8f e6       	ldi	r24, 0x6F	; 111
    45ae:	95 e0       	ldi	r25, 0x05	; 5
    45b0:	9f 93       	push	r25
    45b2:	8f 93       	push	r24
    45b4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    45b8:	8d e6       	ldi	r24, 0x6D	; 109
    45ba:	95 e0       	ldi	r25, 0x05	; 5
    45bc:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    45c0:	8c e5       	ldi	r24, 0x5C	; 92
    45c2:	95 e0       	ldi	r25, 0x05	; 5
    45c4:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    45c8:	80 91 10 01 	lds	r24, 0x0110
    45cc:	1f 92       	push	r1
    45ce:	8f 93       	push	r24
    45d0:	89 e5       	ldi	r24, 0x59	; 89
    45d2:	95 e0       	ldi	r25, 0x05	; 5
    45d4:	9f 93       	push	r25
    45d6:	8f 93       	push	r24
    45d8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    45dc:	87 e5       	ldi	r24, 0x57	; 87
    45de:	95 e0       	ldi	r25, 0x05	; 5
    45e0:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    45e4:	82 e4       	ldi	r24, 0x42	; 66
    45e6:	95 e0       	ldi	r25, 0x05	; 5
    45e8:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    45ec:	80 91 0f 01 	lds	r24, 0x010F
    45f0:	1f 92       	push	r1
    45f2:	8f 93       	push	r24
    45f4:	8f e3       	ldi	r24, 0x3F	; 63
    45f6:	95 e0       	ldi	r25, 0x05	; 5
    45f8:	9f 93       	push	r25
    45fa:	8f 93       	push	r24
    45fc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    4600:	8d e3       	ldi	r24, 0x3D	; 61
    4602:	95 e0       	ldi	r25, 0x05	; 5
    4604:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4608:	86 e2       	ldi	r24, 0x26	; 38
    460a:	95 e0       	ldi	r25, 0x05	; 5
    460c:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    4610:	80 91 0e 01 	lds	r24, 0x010E
    4614:	1f 92       	push	r1
    4616:	8f 93       	push	r24
    4618:	83 e2       	ldi	r24, 0x23	; 35
    461a:	95 e0       	ldi	r25, 0x05	; 5
    461c:	9f 93       	push	r25
    461e:	8f 93       	push	r24
    4620:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    4624:	81 e2       	ldi	r24, 0x21	; 33
    4626:	95 e0       	ldi	r25, 0x05	; 5
    4628:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
    462c:	8d b7       	in	r24, 0x3d	; 61
    462e:	9e b7       	in	r25, 0x3e	; 62
    4630:	48 96       	adiw	r24, 0x18	; 24
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	9e bf       	out	0x3e, r25	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	8d bf       	out	0x3d, r24	; 61
    463c:	1b c0       	rjmp	.+54     	; 0x4674 <command_proc+0x266>
    463e:	ce 51       	subi	r28, 0x1E	; 30
    4640:	ec 2f       	mov	r30, r28
    4642:	f0 e0       	ldi	r31, 0x00	; 0
    4644:	e2 5d       	subi	r30, 0xD2	; 210
    4646:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4648:	80 81       	ld	r24, Z
    464a:	80 93 fb 01 	sts	0x01FB, r24
    464e:	12 c0       	rjmp	.+36     	; 0x4674 <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4650:	61 e0       	ldi	r22, 0x01	; 1
    4652:	03 c0       	rjmp	.+6      	; 0x465a <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4654:	61 e0       	ldi	r22, 0x01	; 1
    4656:	06 c0       	rjmp	.+12     	; 0x4664 <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4658:	6a e0       	ldi	r22, 0x0A	; 10
    465a:	80 91 fb 01 	lds	r24, 0x01FB
    465e:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <mousekey_param_inc>
    4662:	08 c0       	rjmp	.+16     	; 0x4674 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4664:	80 91 fb 01 	lds	r24, 0x01FB
    4668:	0e 94 2d 20 	call	0x405a	; 0x405a <mousekey_param_dec>
    466c:	03 c0       	rjmp	.+6      	; 0x4674 <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    466e:	86 ec       	ldi	r24, 0xC6	; 198
    4670:	95 e0       	ldi	r25, 0x05	; 5
    4672:	13 c0       	rjmp	.+38     	; 0x469a <command_proc+0x28c>
            return false;
    }
    if (mousekey_param) {
    4674:	80 91 fb 01 	lds	r24, 0x01FB
    4678:	88 23       	and	r24, r24
    467a:	69 f0       	breq	.+26     	; 0x4696 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    467c:	1f 92       	push	r1
    467e:	8f 93       	push	r24
    4680:	80 ec       	ldi	r24, 0xC0	; 192
    4682:	95 e0       	ldi	r25, 0x05	; 5
    4684:	9f 93       	push	r25
    4686:	8f 93       	push	r24
    4688:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__xprintf>
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	04 c0       	rjmp	.+8      	; 0x469e <command_proc+0x290>
    } else {
        print("M>" );
    4696:	8d eb       	ldi	r24, 0xBD	; 189
    4698:	95 e0       	ldi	r25, 0x05	; 5
    469a:	0e 94 5f 05 	call	0xabe	; 0xabe <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	06 c0       	rjmp	.+12     	; 0x46ae <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    46a2:	10 92 fc 01 	sts	0x01FC, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	02 c0       	rjmp	.+4      	; 0x46ae <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	00 cf       	rjmp	.-512    	; 0x44ae <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    46ae:	cf 91       	pop	r28
    46b0:	08 95       	ret

000046b2 <__fixsfsi>:
    46b2:	04 d0       	rcall	.+8      	; 0x46bc <__fixunssfsi>
    46b4:	68 94       	set
    46b6:	b1 11       	cpse	r27, r1
    46b8:	8d c0       	rjmp	.+282    	; 0x47d4 <__fp_szero>
    46ba:	08 95       	ret

000046bc <__fixunssfsi>:
    46bc:	70 d0       	rcall	.+224    	; 0x479e <__fp_splitA>
    46be:	88 f0       	brcs	.+34     	; 0x46e2 <__fixunssfsi+0x26>
    46c0:	9f 57       	subi	r25, 0x7F	; 127
    46c2:	90 f0       	brcs	.+36     	; 0x46e8 <__fixunssfsi+0x2c>
    46c4:	b9 2f       	mov	r27, r25
    46c6:	99 27       	eor	r25, r25
    46c8:	b7 51       	subi	r27, 0x17	; 23
    46ca:	a0 f0       	brcs	.+40     	; 0x46f4 <__fixunssfsi+0x38>
    46cc:	d1 f0       	breq	.+52     	; 0x4702 <__fixunssfsi+0x46>
    46ce:	66 0f       	add	r22, r22
    46d0:	77 1f       	adc	r23, r23
    46d2:	88 1f       	adc	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	1a f0       	brmi	.+6      	; 0x46de <__fixunssfsi+0x22>
    46d8:	ba 95       	dec	r27
    46da:	c9 f7       	brne	.-14     	; 0x46ce <__fixunssfsi+0x12>
    46dc:	12 c0       	rjmp	.+36     	; 0x4702 <__fixunssfsi+0x46>
    46de:	b1 30       	cpi	r27, 0x01	; 1
    46e0:	81 f0       	breq	.+32     	; 0x4702 <__fixunssfsi+0x46>
    46e2:	77 d0       	rcall	.+238    	; 0x47d2 <__fp_zero>
    46e4:	b1 e0       	ldi	r27, 0x01	; 1
    46e6:	08 95       	ret
    46e8:	74 c0       	rjmp	.+232    	; 0x47d2 <__fp_zero>
    46ea:	67 2f       	mov	r22, r23
    46ec:	78 2f       	mov	r23, r24
    46ee:	88 27       	eor	r24, r24
    46f0:	b8 5f       	subi	r27, 0xF8	; 248
    46f2:	39 f0       	breq	.+14     	; 0x4702 <__fixunssfsi+0x46>
    46f4:	b9 3f       	cpi	r27, 0xF9	; 249
    46f6:	cc f3       	brlt	.-14     	; 0x46ea <__fixunssfsi+0x2e>
    46f8:	86 95       	lsr	r24
    46fa:	77 95       	ror	r23
    46fc:	67 95       	ror	r22
    46fe:	b3 95       	inc	r27
    4700:	d9 f7       	brne	.-10     	; 0x46f8 <__fixunssfsi+0x3c>
    4702:	3e f4       	brtc	.+14     	; 0x4712 <__fixunssfsi+0x56>
    4704:	90 95       	com	r25
    4706:	80 95       	com	r24
    4708:	70 95       	com	r23
    470a:	61 95       	neg	r22
    470c:	7f 4f       	sbci	r23, 0xFF	; 255
    470e:	8f 4f       	sbci	r24, 0xFF	; 255
    4710:	9f 4f       	sbci	r25, 0xFF	; 255
    4712:	08 95       	ret

00004714 <__floatunsisf>:
    4714:	e8 94       	clt
    4716:	09 c0       	rjmp	.+18     	; 0x472a <__floatsisf+0x12>

00004718 <__floatsisf>:
    4718:	97 fb       	bst	r25, 7
    471a:	3e f4       	brtc	.+14     	; 0x472a <__floatsisf+0x12>
    471c:	90 95       	com	r25
    471e:	80 95       	com	r24
    4720:	70 95       	com	r23
    4722:	61 95       	neg	r22
    4724:	7f 4f       	sbci	r23, 0xFF	; 255
    4726:	8f 4f       	sbci	r24, 0xFF	; 255
    4728:	9f 4f       	sbci	r25, 0xFF	; 255
    472a:	99 23       	and	r25, r25
    472c:	a9 f0       	breq	.+42     	; 0x4758 <__floatsisf+0x40>
    472e:	f9 2f       	mov	r31, r25
    4730:	96 e9       	ldi	r25, 0x96	; 150
    4732:	bb 27       	eor	r27, r27
    4734:	93 95       	inc	r25
    4736:	f6 95       	lsr	r31
    4738:	87 95       	ror	r24
    473a:	77 95       	ror	r23
    473c:	67 95       	ror	r22
    473e:	b7 95       	ror	r27
    4740:	f1 11       	cpse	r31, r1
    4742:	f8 cf       	rjmp	.-16     	; 0x4734 <__floatsisf+0x1c>
    4744:	fa f4       	brpl	.+62     	; 0x4784 <__floatsisf+0x6c>
    4746:	bb 0f       	add	r27, r27
    4748:	11 f4       	brne	.+4      	; 0x474e <__floatsisf+0x36>
    474a:	60 ff       	sbrs	r22, 0
    474c:	1b c0       	rjmp	.+54     	; 0x4784 <__floatsisf+0x6c>
    474e:	6f 5f       	subi	r22, 0xFF	; 255
    4750:	7f 4f       	sbci	r23, 0xFF	; 255
    4752:	8f 4f       	sbci	r24, 0xFF	; 255
    4754:	9f 4f       	sbci	r25, 0xFF	; 255
    4756:	16 c0       	rjmp	.+44     	; 0x4784 <__floatsisf+0x6c>
    4758:	88 23       	and	r24, r24
    475a:	11 f0       	breq	.+4      	; 0x4760 <__floatsisf+0x48>
    475c:	96 e9       	ldi	r25, 0x96	; 150
    475e:	11 c0       	rjmp	.+34     	; 0x4782 <__floatsisf+0x6a>
    4760:	77 23       	and	r23, r23
    4762:	21 f0       	breq	.+8      	; 0x476c <__floatsisf+0x54>
    4764:	9e e8       	ldi	r25, 0x8E	; 142
    4766:	87 2f       	mov	r24, r23
    4768:	76 2f       	mov	r23, r22
    476a:	05 c0       	rjmp	.+10     	; 0x4776 <__floatsisf+0x5e>
    476c:	66 23       	and	r22, r22
    476e:	71 f0       	breq	.+28     	; 0x478c <__floatsisf+0x74>
    4770:	96 e8       	ldi	r25, 0x86	; 134
    4772:	86 2f       	mov	r24, r22
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	2a f0       	brmi	.+10     	; 0x4784 <__floatsisf+0x6c>
    477a:	9a 95       	dec	r25
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	da f7       	brpl	.-10     	; 0x477a <__floatsisf+0x62>
    4784:	88 0f       	add	r24, r24
    4786:	96 95       	lsr	r25
    4788:	87 95       	ror	r24
    478a:	97 f9       	bld	r25, 7
    478c:	08 95       	ret

0000478e <__fp_split3>:
    478e:	57 fd       	sbrc	r21, 7
    4790:	90 58       	subi	r25, 0x80	; 128
    4792:	44 0f       	add	r20, r20
    4794:	55 1f       	adc	r21, r21
    4796:	59 f0       	breq	.+22     	; 0x47ae <__fp_splitA+0x10>
    4798:	5f 3f       	cpi	r21, 0xFF	; 255
    479a:	71 f0       	breq	.+28     	; 0x47b8 <__fp_splitA+0x1a>
    479c:	47 95       	ror	r20

0000479e <__fp_splitA>:
    479e:	88 0f       	add	r24, r24
    47a0:	97 fb       	bst	r25, 7
    47a2:	99 1f       	adc	r25, r25
    47a4:	61 f0       	breq	.+24     	; 0x47be <__fp_splitA+0x20>
    47a6:	9f 3f       	cpi	r25, 0xFF	; 255
    47a8:	79 f0       	breq	.+30     	; 0x47c8 <__fp_splitA+0x2a>
    47aa:	87 95       	ror	r24
    47ac:	08 95       	ret
    47ae:	12 16       	cp	r1, r18
    47b0:	13 06       	cpc	r1, r19
    47b2:	14 06       	cpc	r1, r20
    47b4:	55 1f       	adc	r21, r21
    47b6:	f2 cf       	rjmp	.-28     	; 0x479c <__fp_split3+0xe>
    47b8:	46 95       	lsr	r20
    47ba:	f1 df       	rcall	.-30     	; 0x479e <__fp_splitA>
    47bc:	08 c0       	rjmp	.+16     	; 0x47ce <__fp_splitA+0x30>
    47be:	16 16       	cp	r1, r22
    47c0:	17 06       	cpc	r1, r23
    47c2:	18 06       	cpc	r1, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	f1 cf       	rjmp	.-30     	; 0x47aa <__fp_splitA+0xc>
    47c8:	86 95       	lsr	r24
    47ca:	71 05       	cpc	r23, r1
    47cc:	61 05       	cpc	r22, r1
    47ce:	08 94       	sec
    47d0:	08 95       	ret

000047d2 <__fp_zero>:
    47d2:	e8 94       	clt

000047d4 <__fp_szero>:
    47d4:	bb 27       	eor	r27, r27
    47d6:	66 27       	eor	r22, r22
    47d8:	77 27       	eor	r23, r23
    47da:	cb 01       	movw	r24, r22
    47dc:	97 f9       	bld	r25, 7
    47de:	08 95       	ret

000047e0 <__mulsf3>:
    47e0:	0b d0       	rcall	.+22     	; 0x47f8 <__mulsf3x>
    47e2:	78 c0       	rjmp	.+240    	; 0x48d4 <__fp_round>
    47e4:	69 d0       	rcall	.+210    	; 0x48b8 <__fp_pscA>
    47e6:	28 f0       	brcs	.+10     	; 0x47f2 <__mulsf3+0x12>
    47e8:	6e d0       	rcall	.+220    	; 0x48c6 <__fp_pscB>
    47ea:	18 f0       	brcs	.+6      	; 0x47f2 <__mulsf3+0x12>
    47ec:	95 23       	and	r25, r21
    47ee:	09 f0       	breq	.+2      	; 0x47f2 <__mulsf3+0x12>
    47f0:	5a c0       	rjmp	.+180    	; 0x48a6 <__fp_inf>
    47f2:	5f c0       	rjmp	.+190    	; 0x48b2 <__fp_nan>
    47f4:	11 24       	eor	r1, r1
    47f6:	ee cf       	rjmp	.-36     	; 0x47d4 <__fp_szero>

000047f8 <__mulsf3x>:
    47f8:	ca df       	rcall	.-108    	; 0x478e <__fp_split3>
    47fa:	a0 f3       	brcs	.-24     	; 0x47e4 <__mulsf3+0x4>

000047fc <__mulsf3_pse>:
    47fc:	95 9f       	mul	r25, r21
    47fe:	d1 f3       	breq	.-12     	; 0x47f4 <__mulsf3+0x14>
    4800:	95 0f       	add	r25, r21
    4802:	50 e0       	ldi	r21, 0x00	; 0
    4804:	55 1f       	adc	r21, r21
    4806:	62 9f       	mul	r22, r18
    4808:	f0 01       	movw	r30, r0
    480a:	72 9f       	mul	r23, r18
    480c:	bb 27       	eor	r27, r27
    480e:	f0 0d       	add	r31, r0
    4810:	b1 1d       	adc	r27, r1
    4812:	63 9f       	mul	r22, r19
    4814:	aa 27       	eor	r26, r26
    4816:	f0 0d       	add	r31, r0
    4818:	b1 1d       	adc	r27, r1
    481a:	aa 1f       	adc	r26, r26
    481c:	64 9f       	mul	r22, r20
    481e:	66 27       	eor	r22, r22
    4820:	b0 0d       	add	r27, r0
    4822:	a1 1d       	adc	r26, r1
    4824:	66 1f       	adc	r22, r22
    4826:	82 9f       	mul	r24, r18
    4828:	22 27       	eor	r18, r18
    482a:	b0 0d       	add	r27, r0
    482c:	a1 1d       	adc	r26, r1
    482e:	62 1f       	adc	r22, r18
    4830:	73 9f       	mul	r23, r19
    4832:	b0 0d       	add	r27, r0
    4834:	a1 1d       	adc	r26, r1
    4836:	62 1f       	adc	r22, r18
    4838:	83 9f       	mul	r24, r19
    483a:	a0 0d       	add	r26, r0
    483c:	61 1d       	adc	r22, r1
    483e:	22 1f       	adc	r18, r18
    4840:	74 9f       	mul	r23, r20
    4842:	33 27       	eor	r19, r19
    4844:	a0 0d       	add	r26, r0
    4846:	61 1d       	adc	r22, r1
    4848:	23 1f       	adc	r18, r19
    484a:	84 9f       	mul	r24, r20
    484c:	60 0d       	add	r22, r0
    484e:	21 1d       	adc	r18, r1
    4850:	82 2f       	mov	r24, r18
    4852:	76 2f       	mov	r23, r22
    4854:	6a 2f       	mov	r22, r26
    4856:	11 24       	eor	r1, r1
    4858:	9f 57       	subi	r25, 0x7F	; 127
    485a:	50 40       	sbci	r21, 0x00	; 0
    485c:	8a f0       	brmi	.+34     	; 0x4880 <__mulsf3_pse+0x84>
    485e:	e1 f0       	breq	.+56     	; 0x4898 <__mulsf3_pse+0x9c>
    4860:	88 23       	and	r24, r24
    4862:	4a f0       	brmi	.+18     	; 0x4876 <__mulsf3_pse+0x7a>
    4864:	ee 0f       	add	r30, r30
    4866:	ff 1f       	adc	r31, r31
    4868:	bb 1f       	adc	r27, r27
    486a:	66 1f       	adc	r22, r22
    486c:	77 1f       	adc	r23, r23
    486e:	88 1f       	adc	r24, r24
    4870:	91 50       	subi	r25, 0x01	; 1
    4872:	50 40       	sbci	r21, 0x00	; 0
    4874:	a9 f7       	brne	.-22     	; 0x4860 <__mulsf3_pse+0x64>
    4876:	9e 3f       	cpi	r25, 0xFE	; 254
    4878:	51 05       	cpc	r21, r1
    487a:	70 f0       	brcs	.+28     	; 0x4898 <__mulsf3_pse+0x9c>
    487c:	14 c0       	rjmp	.+40     	; 0x48a6 <__fp_inf>
    487e:	aa cf       	rjmp	.-172    	; 0x47d4 <__fp_szero>
    4880:	5f 3f       	cpi	r21, 0xFF	; 255
    4882:	ec f3       	brlt	.-6      	; 0x487e <__mulsf3_pse+0x82>
    4884:	98 3e       	cpi	r25, 0xE8	; 232
    4886:	dc f3       	brlt	.-10     	; 0x487e <__mulsf3_pse+0x82>
    4888:	86 95       	lsr	r24
    488a:	77 95       	ror	r23
    488c:	67 95       	ror	r22
    488e:	b7 95       	ror	r27
    4890:	f7 95       	ror	r31
    4892:	e7 95       	ror	r30
    4894:	9f 5f       	subi	r25, 0xFF	; 255
    4896:	c1 f7       	brne	.-16     	; 0x4888 <__mulsf3_pse+0x8c>
    4898:	fe 2b       	or	r31, r30
    489a:	88 0f       	add	r24, r24
    489c:	91 1d       	adc	r25, r1
    489e:	96 95       	lsr	r25
    48a0:	87 95       	ror	r24
    48a2:	97 f9       	bld	r25, 7
    48a4:	08 95       	ret

000048a6 <__fp_inf>:
    48a6:	97 f9       	bld	r25, 7
    48a8:	9f 67       	ori	r25, 0x7F	; 127
    48aa:	80 e8       	ldi	r24, 0x80	; 128
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	60 e0       	ldi	r22, 0x00	; 0
    48b0:	08 95       	ret

000048b2 <__fp_nan>:
    48b2:	9f ef       	ldi	r25, 0xFF	; 255
    48b4:	80 ec       	ldi	r24, 0xC0	; 192
    48b6:	08 95       	ret

000048b8 <__fp_pscA>:
    48b8:	00 24       	eor	r0, r0
    48ba:	0a 94       	dec	r0
    48bc:	16 16       	cp	r1, r22
    48be:	17 06       	cpc	r1, r23
    48c0:	18 06       	cpc	r1, r24
    48c2:	09 06       	cpc	r0, r25
    48c4:	08 95       	ret

000048c6 <__fp_pscB>:
    48c6:	00 24       	eor	r0, r0
    48c8:	0a 94       	dec	r0
    48ca:	12 16       	cp	r1, r18
    48cc:	13 06       	cpc	r1, r19
    48ce:	14 06       	cpc	r1, r20
    48d0:	05 06       	cpc	r0, r21
    48d2:	08 95       	ret

000048d4 <__fp_round>:
    48d4:	09 2e       	mov	r0, r25
    48d6:	03 94       	inc	r0
    48d8:	00 0c       	add	r0, r0
    48da:	11 f4       	brne	.+4      	; 0x48e0 <__fp_round+0xc>
    48dc:	88 23       	and	r24, r24
    48de:	52 f0       	brmi	.+20     	; 0x48f4 <__fp_round+0x20>
    48e0:	bb 0f       	add	r27, r27
    48e2:	40 f4       	brcc	.+16     	; 0x48f4 <__fp_round+0x20>
    48e4:	bf 2b       	or	r27, r31
    48e6:	11 f4       	brne	.+4      	; 0x48ec <__fp_round+0x18>
    48e8:	60 ff       	sbrs	r22, 0
    48ea:	04 c0       	rjmp	.+8      	; 0x48f4 <__fp_round+0x20>
    48ec:	6f 5f       	subi	r22, 0xFF	; 255
    48ee:	7f 4f       	sbci	r23, 0xFF	; 255
    48f0:	8f 4f       	sbci	r24, 0xFF	; 255
    48f2:	9f 4f       	sbci	r25, 0xFF	; 255
    48f4:	08 95       	ret

000048f6 <__udivmodqi4>:
    48f6:	99 1b       	sub	r25, r25
    48f8:	79 e0       	ldi	r23, 0x09	; 9
    48fa:	04 c0       	rjmp	.+8      	; 0x4904 <__udivmodqi4_ep>

000048fc <__udivmodqi4_loop>:
    48fc:	99 1f       	adc	r25, r25
    48fe:	96 17       	cp	r25, r22
    4900:	08 f0       	brcs	.+2      	; 0x4904 <__udivmodqi4_ep>
    4902:	96 1b       	sub	r25, r22

00004904 <__udivmodqi4_ep>:
    4904:	88 1f       	adc	r24, r24
    4906:	7a 95       	dec	r23
    4908:	c9 f7       	brne	.-14     	; 0x48fc <__udivmodqi4_loop>
    490a:	80 95       	com	r24
    490c:	08 95       	ret

0000490e <__divmodhi4>:
    490e:	97 fb       	bst	r25, 7
    4910:	07 2e       	mov	r0, r23
    4912:	16 f4       	brtc	.+4      	; 0x4918 <__divmodhi4+0xa>
    4914:	00 94       	com	r0
    4916:	07 d0       	rcall	.+14     	; 0x4926 <__divmodhi4_neg1>
    4918:	77 fd       	sbrc	r23, 7
    491a:	09 d0       	rcall	.+18     	; 0x492e <__divmodhi4_neg2>
    491c:	0e 94 a1 24 	call	0x4942	; 0x4942 <__udivmodhi4>
    4920:	07 fc       	sbrc	r0, 7
    4922:	05 d0       	rcall	.+10     	; 0x492e <__divmodhi4_neg2>
    4924:	3e f4       	brtc	.+14     	; 0x4934 <__divmodhi4_exit>

00004926 <__divmodhi4_neg1>:
    4926:	90 95       	com	r25
    4928:	81 95       	neg	r24
    492a:	9f 4f       	sbci	r25, 0xFF	; 255
    492c:	08 95       	ret

0000492e <__divmodhi4_neg2>:
    492e:	70 95       	com	r23
    4930:	61 95       	neg	r22
    4932:	7f 4f       	sbci	r23, 0xFF	; 255

00004934 <__divmodhi4_exit>:
    4934:	08 95       	ret

00004936 <__tablejump2__>:
    4936:	ee 0f       	add	r30, r30
    4938:	ff 1f       	adc	r31, r31

0000493a <__tablejump__>:
    493a:	05 90       	lpm	r0, Z+
    493c:	f4 91       	lpm	r31, Z
    493e:	e0 2d       	mov	r30, r0
    4940:	09 94       	ijmp

00004942 <__udivmodhi4>:
    4942:	aa 1b       	sub	r26, r26
    4944:	bb 1b       	sub	r27, r27
    4946:	51 e1       	ldi	r21, 0x11	; 17
    4948:	07 c0       	rjmp	.+14     	; 0x4958 <__udivmodhi4_ep>

0000494a <__udivmodhi4_loop>:
    494a:	aa 1f       	adc	r26, r26
    494c:	bb 1f       	adc	r27, r27
    494e:	a6 17       	cp	r26, r22
    4950:	b7 07       	cpc	r27, r23
    4952:	10 f0       	brcs	.+4      	; 0x4958 <__udivmodhi4_ep>
    4954:	a6 1b       	sub	r26, r22
    4956:	b7 0b       	sbc	r27, r23

00004958 <__udivmodhi4_ep>:
    4958:	88 1f       	adc	r24, r24
    495a:	99 1f       	adc	r25, r25
    495c:	5a 95       	dec	r21
    495e:	a9 f7       	brne	.-22     	; 0x494a <__udivmodhi4_loop>
    4960:	80 95       	com	r24
    4962:	90 95       	com	r25
    4964:	bc 01       	movw	r22, r24
    4966:	cd 01       	movw	r24, r26
    4968:	08 95       	ret

0000496a <_exit>:
    496a:	f8 94       	cli

0000496c <__stop_program>:
    496c:	ff cf       	rjmp	.-2      	; 0x496c <__stop_program>
